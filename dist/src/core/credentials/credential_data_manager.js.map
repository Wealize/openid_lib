{"version":3,"file":"credential_data_manager.js","sourceRoot":"","sources":["../../../../src/core/credentials/credential_data_manager.ts"],"names":[],"mappings":"AAQA;;;GAGG;AACH,MAAM,OAAgB,qBAAqB;IA6BzC;;;;;;OAMG;IACH,KAAK,CAAC,wBAAwB,CAC5B,mBAA2B,EAC3B,WAAmB;QAEnB,OAAO,WAAW,CAAC;IACrB,CAAC;CACF","sourcesContent":["import {Result} from '@/classes';\nimport {\n  CredentialDataResponse,\n  DeferredCredentialData,\n  InTimeCredentialData,\n} from './types.js';\nimport {W3CVerifiableCredentialFormats} from '@/formats';\n\n/**\n * Abstract class that provided an interface to a VC Issuer\n * thorugh which it can get the information related to a VC\n */\nexport abstract class CredentialDataManager {\n  /**\n   * Allows to get all the related data to a VC, like the credentialSubject data,\n   * the terms of use and the status information.\n   * @param types The types of the VC\n   * @param holder The future holder of the VC\n   */\n  abstract getCredentialData(\n    types: string[],\n    holder: string,\n  ): Promise<CredentialDataResponse>;\n\n  // TODO: Set VC format. This callback could fail if the acceptance token is wrong\n  /**\n   * Allows to exchange an acepptance Token of a deferred flow for another one or for\n   * a VC if it is already available\n   * @param acceptanceToken The token to exchange\n   */\n  abstract deferredExchange(acceptanceToken: string): Promise<\n    Result<\n      | (InTimeCredentialData & {\n          format: W3CVerifiableCredentialFormats;\n          types: string[];\n        })\n      | DeferredCredentialData,\n      Error\n    >\n  >;\n\n  /**\n   * Allows to obtain the true identifier of the credential subject. This method\n   * can be overwritten if needed and can be useful when working with DID URL syntax\n   * @param _accessTokenSubject The subject ID contained in an Access Token\n   * @param proofIssuer The subject ID contained in a control proof\n   * @returns\n   */\n  async resolveCredentialSubject(\n    _accessTokenSubject: string,\n    proofIssuer: string,\n  ): Promise<string> {\n    return proofIssuer;\n  }\n}\n"]}