{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/core/credentials/types.ts"],"names":[],"mappings":"","sourcesContent":["import { W3CVerifiableCredentialFormats } from \"../../common/formats/index.js\";\nimport {\n  W3CCredentialStatus,\n  W3CSingleCredentialSubject,\n  W3CTermsOfUse,\n  W3CVcSchemaDefinition,\n  W3CVerifiableCredential\n} from \"../../common/interfaces/w3c_verifiable_credential.interface.js\";\nimport { CompactVc, VerificationResult } from \"../../common/types/index.js\";\nimport { JwtHeader, JwtPayload } from \"jsonwebtoken\";\n\n/**\n * Function type that allows to verify the contents, but no the\n * signature, of an acess token\n * @param header The JWT header of the token\n * @param payload The JWT payload of the token\n * @returns Verification that result that specify if it was successful\n * and an optional error message\n */\nexport type AccessTokenVerifyCallback = (\n  header: JwtHeader,\n  payload: JwtPayload\n) => Promise<VerificationResult>;\n\n/**\n * Function type that allows to sign a W3C credential in a specific format\n * @param format The format of the VC\n * @param vc The VC to sign\n * @returns A signed VC in W3C or compact(string) format\n */\nexport type VcSignCallback = (\n  format: W3CVerifiableCredentialFormats,\n  vc: W3CVerifiableCredential | JwtPayload\n) => Promise<W3CVerifiableCredential | CompactVc>;\n\n\nexport type CredentialDataResponse = InTimeCredentialData\n  | DeferredCredentialData\n\nexport interface InTimeCredentialData {\n  type: \"InTime\",\n  /**\n   * The subject data of a credential\n   */\n  data: W3CSingleCredentialSubject,\n  /**\n   * The schema of the VC\n   */\n  schema: W3CVcSchemaDefinition | W3CVcSchemaDefinition[],\n  /**\n   * The credential status information of the VC\n   */\n  status?: W3CCredentialStatus | W3CCredentialStatus[],\n  /**\n   * The terms of use information of the VC\n   */\n  termfOfUse?: W3CTermsOfUse | W3CTermsOfUse[],\n  /**\n   * The metadata of the VC\n   */\n  metadata: CredentialMetadata\n}\n\nexport interface DeferredCredentialData {\n  type: \"Deferred\",\n  /**\n   * A deferred code that can be exchange for a VC\n   */\n  deferredCode?: string,\n}\n\nexport interface CredentialMetadata {\n  /** The expiration time in UTC and in ISO format. Can't be combined with expiresIn */\n  validUntil?: string,\n  /** For how long will be valid the VC. Can't be combined with validUntil */\n  expiresInSeconds?: number,\n  /** When the VC will be valid */\n  nbf?: string,\n  /** Issuance in ISO format. If not defined, the current datetime is taken */\n  iss?: string\n}\n"]}