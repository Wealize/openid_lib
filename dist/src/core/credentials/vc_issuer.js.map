{"version":3,"file":"vc_issuer.js","sourceRoot":"","sources":["../../../../src/core/credentials/vc_issuer.ts"],"names":[],"mappings":"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","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\nimport { P, match } from 'ts-pattern';\nimport moment from 'moment';\nimport { Resolver } from \"did-resolver\";\nimport { JWK } from \"jose\";\nimport { Jwt, JwtPayload } from \"jsonwebtoken\";\nimport { ControlProof } from \"../../common/classes/control_proof.js\";\nimport {\n  CONTEXT_VC_DATA_MODEL_1,\n  CONTEXT_VC_DATA_MODEL_2,\n  C_NONCE_EXPIRATION_TIME\n} from \"../../common/constants/index.js\";\nimport {\n  W3CDataModel,\n  W3CVerifiableCredentialFormats\n} from \"../../common/formats/index.js\";\nimport {\n  CredentialRequest\n} from \"../../common/interfaces/credential_request.interface.js\";\nimport {\n  IssuerMetadata\n} from \"../../common/interfaces/issuer_metadata.interface.js\";\nimport {\n  W3CVcSchemaDefinition,\n  W3CVerifiableCredential,\n  W3CVerifiableCredentialV1,\n  W3CVerifiableCredentialV2,\n} from \"../../common/interfaces/w3c_verifiable_credential.interface.js\";\nimport {\n  decodeToken,\n  verifyJwtWithExpAndAudience\n} from \"../../common/utils/jwt.utils.js\";\nimport { VcFormatter } from './formatters.js';\nimport {\n  CredentialResponse\n} from \"../../common/interfaces/credential_response.interface.js\";\nimport * as VcIssuerTypes from \"./types.js\";\nimport {\n  InternalNonceError,\n  InvalidCredentialRequest,\n  InvalidDataProvided,\n  InvalidProof,\n  InvalidToken\n} from \"../../common/classes/index.js\";\nimport { areDidUrlsSameDid } from '../../common/utils/did.utils.js';\nimport {\n  CredentialDataManager,\n} from './credential_data_manager.js';\nimport { arraysAreEqual } from '../../common/utils/array.utils.js';\nimport { StateManager } from '../state/index.js';\nimport { NonceManager } from '../nonce/index.js';\n\n/**\n * W3C credentials issuer in both deferred and In-Time flows\n */\nexport class W3CVcIssuer {\n  /**\n   * Constructor of the issuer\n   * @param metadata Issuer metadata\n   * @param didResolver Object that allows to resolve the DIDs found\n   * @param issuerDid The DID of the issuer\n   * @param signCallback Callback used to sign the VC generated\n   * @param cNonceRetrieval Callback to recover the challenge nonce expected\n   * for a control proof\n   * @param getVcSchema Callback to recover the schema associated with a VC\n   * @param getCredentialData Callback to recover the subject data to\n   * include in the VC\n   * It can also be used to specify if the user should follow the deferred flow\n   */\n  private nonceManager;\n  constructor(\n    private metadata: IssuerMetadata,\n    private didResolver: Resolver,\n    private issuerDid: string,\n    private signCallback: VcIssuerTypes.VcSignCallback,\n    stateManager: StateManager,\n    private credentialDataManager: CredentialDataManager,\n    private vcTypesContextRelationship?: Record<string, string>\n  ) {\n    this.nonceManager = new NonceManager(stateManager)\n  }\n\n  /**\n   * Allows to verify a JWT Access Token in string format\n   * @param token The access token\n   * @param publicKeyJwkAuthServer The public key that should verify the token\n   * @param tokenVerifyCallback A callback that can be used to perform an\n   * additional verification of the contents of the token\n   * @returns Access token in JWT format\n   * @throws If data provided is incorrect\n   */\n  async verifyAccessToken(\n    token: string,\n    publicKeyJwkAuthServer: JWK,\n    tokenVerifyCallback?: VcIssuerTypes.AccessTokenVerifyCallback\n  ): Promise<Jwt> {\n    await verifyJwtWithExpAndAudience(\n      token,\n      publicKeyJwkAuthServer,\n      this.metadata.credential_issuer\n    );\n    const jwt = decodeToken(token);\n    if (tokenVerifyCallback) {\n      const verificationResult = await tokenVerifyCallback(\n        jwt.header,\n        jwt.payload as JwtPayload\n      );\n      if (!verificationResult.valid) {\n        throw new InvalidToken(\n          `Invalid access token provided${verificationResult.error ? \": \" + verificationResult.error : '.'}`\n        );\n      }\n    }\n    return jwt;\n  }\n\n  /**\n   * Allows to generate a Credential Response in accordance to\n   * the OID4VCI specification\n   * @param acessToken The access token needed to perform the operation\n   * @param credentialRequest The credential request sent by an user\n   * @param dataModel The W3 VC Data Model version\n   * @returns A credential response with a VC or a deferred code\n   * @throws If data provided is incorrect\n   */\n  async generateCredentialResponse(\n    acessToken: Jwt,\n    credentialRequest: CredentialRequest,\n    dataModel: W3CDataModel,\n  ): Promise<CredentialResponse> {\n    this.checkCredentialTypesAndFormat(credentialRequest.types, credentialRequest.format);\n    const controlProof = ControlProof.fromJSON(credentialRequest.proof);\n    const proofAssociatedClient = controlProof.getAssociatedIdentifier();\n    const jwtPayload = acessToken.payload as JwtPayload;\n    const innerNonce = jwtPayload.nonce as string;\n    const cNonceResult = await this.nonceManager.getChallengeNonce(innerNonce);\n    if (cNonceResult.isError()) {\n      throw new InvalidProof(\"Invalid provided nonce for control proof\");\n    }\n    const cNonce = cNonceResult.unwrap();\n    if (cNonce.timestamp + cNonce.expirationTime <= Date.now()) {\n      this.nonceManager.deleteNonce(innerNonce);\n      throw new InvalidCredentialRequest(\"Challenge nonce has expired\");\n    }\n    match(cNonce)\n      .with({ operationType: { type: \"Verification\" } }, (_) => {\n        throw new InvalidCredentialRequest(\"Invalid provided nonce\");\n      })\n      .with({ operationType: { type: \"Issuance\", vcTypes: { type: \"Know\", vcTypes: P.select() } } }, (types) => {\n        if (!areDidUrlsSameDid(proofAssociatedClient, jwtPayload.sub!)) {\n          throw new InvalidToken(\n            \"Access Token was issued for a different identifier that the one that sign the proof\"\n          );\n        }\n        if (!arraysAreEqual(types, credentialRequest.types)) {\n          throw new InvalidCredentialRequest(\n            \"The provided token does not allow for the issuance of a VC of the specified types\"\n          );\n        }\n      })\n      .with({ operationType: { type: \"Issuance\", vcTypes: { type: \"Uknown\" } } }, (_) => {\n        // Most probably generated from pre-auth flow\n      })\n      .otherwise(() => {\n        throw new InternalNonceError(\"Unexpected behaviour detected at nonce matching\");\n      });\n    await controlProof.verifyProof(\n      innerNonce,\n      this.metadata.credential_issuer,\n      this.didResolver\n    );\n    const credentialSubject = await this.credentialDataManager.resolveCredentialSubject(\n      jwtPayload.sub!,\n      proofAssociatedClient\n    );\n    const credentialResponse = await this.credentialResponseMatch(\n      credentialRequest.types,\n      credentialSubject,\n      credentialRequest.format,\n      dataModel,\n    );\n    this.nonceManager.deleteNonce(innerNonce);\n    return credentialResponse;\n  }\n\n  private async credentialResponseMatch(\n    types: string[],\n    credentialSubject: string,\n    format: W3CVerifiableCredentialFormats,\n    dataModel: W3CDataModel,\n  ) {\n    const credentialDataOrDeferred = await this.credentialDataManager.getCredentialData(\n      types,\n      credentialSubject\n    );\n    return match(credentialDataOrDeferred)\n      .with({ type: \"InTime\" }, async (data) => this.generateW3CCredential(\n        types,\n        data.schema,\n        credentialSubject,\n        data,\n        format,\n        dataModel,\n      ))\n      .with({ type: \"Deferred\" }, (data) => {\n        return {\n          acceptance_token: data.deferredCode\n        }\n      })\n      .exhaustive();\n  }\n\n  /**\n   * Allows for the generation of a VC without an Access Token\n   * @param did The DID if the holder of the VC\n   * @param dataModel The W3 VC Data Model version\n   * @param types The types of the VCs\n   * @param format The format of the VC\n   * @returns A credential response with the VC\n   */\n  async generateVcDirectMode(\n    did: string,\n    dataModel: W3CDataModel,\n    types: string[],\n    format: W3CVerifiableCredentialFormats,\n  ): Promise<CredentialResponse> {\n    this.checkCredentialTypesAndFormat(types, format);\n    return await this.credentialResponseMatch(\n      types,\n      did,\n      format,\n      dataModel,\n    );\n  }\n\n  // TODO: valorar quitar iss de 'CredentialDataOrDeferred' y homogeneizar comportamiento entre V1 y V2\n  // El motivo es que V1 incluye un campo issuanceDate, y además EBSI está obligando a que sea igual al 'iat' del token.\n  // Sin embargo, en V2 ese campo no existe. La propusta sería:\n  // - En V2, validFrom se asocia con nbf, y iat sería Date.now(). Según esto, en formatDataModel2, iat debería ajustarse a\n  //   Date.now() y valorar quitar el nbf o también asignarlo a Date.now(). Notar diferencia entre info de la credencial y del token\n  // - En V1, validFrom se asocia con nbf, issued y issuanceDate y iat con Date.now()\n  private generateCredentialTimeStamps(data: VcIssuerTypes.CredentialMetadata) {\n    if (data.validUntil && data.expiresInSeconds) {\n      throw new InvalidDataProvided(`\"expiresInSeconds\" and \"validUntil\" can't be defined at the same time`);\n    }\n\n    const issuanceDate = (() => {\n      const iss = data.iss ? moment(data.iss, true) : moment();\n      if (!iss.isValid()) {\n        throw new InvalidDataProvided(`Invalid specified date for \"iss\" parameter`);\n      }\n      return iss;\n    })();\n\n    const validFrom = (() => {\n      const nbf = data.nbf ? moment(data.nbf, true) : issuanceDate.clone();\n      if (!nbf.isValid()) {\n        throw new InvalidDataProvided(`Invalid specified date for \"nbf\" parameter`);\n      }\n      if (nbf.isBefore(issuanceDate)) {\n        throw new InvalidDataProvided(`\"validFrom\" can not be before \"issuanceDate\"`);\n      }\n      return nbf;\n    })();\n\n    const expirationDate = (() => {\n      const exp = (() => {\n        if (data.validUntil) {\n          return moment(data.validUntil, true);\n        } else if (data.expiresInSeconds) {\n          return issuanceDate.clone().add(data.expiresInSeconds, 'seconds');\n        } else {\n          return undefined;\n        }\n      })();\n      if (exp) {\n        if (!exp.isValid()) {\n          throw new InvalidDataProvided(`Invalid specified date for \"expirationDate\" parameter`);\n        }\n        if (exp.isBefore(validFrom)) {\n          throw new InvalidDataProvided(`\"expirationDate\" can not be before \"validFrom\"`);\n        }\n      }\n      return exp;\n    })();\n\n    return {\n      issuanceDate: issuanceDate.utc().toISOString(),\n      validFrom: validFrom.utc().toISOString(),\n      expirationDate: expirationDate ? expirationDate.utc().toISOString() : undefined,\n    }\n  }\n\n  private generateVcId() {\n    return `urn:uuid:${uuidv4()}`;\n  }\n\n  private generateW3CDataForV1(\n    type: string[],\n    schema: W3CVcSchemaDefinition | W3CVcSchemaDefinition[],\n    subject: string,\n    vcData: VcIssuerTypes.InTimeCredentialData,\n  ): W3CVerifiableCredentialV1 {\n    const timestamps = this.generateCredentialTimeStamps(vcData.metadata);\n    const vcId = this.generateVcId();\n    return {\n      \"@context\": [CONTEXT_VC_DATA_MODEL_1],\n      type,\n      credentialSchema: schema,\n      issuanceDate: timestamps.issuanceDate,\n      validFrom: timestamps.validFrom,\n      expirationDate: timestamps.expirationDate,\n      id: vcId,\n      credentialStatus: vcData.status,\n      issuer: this.issuerDid,\n      issued: timestamps.issuanceDate,\n      termsOfUse: vcData.termfOfUse,\n      credentialSubject: {\n        id: subject,\n        ...vcData.data\n      }\n    }\n  }\n\n  private generateW3CDataForV2(\n    type: string[],\n    schema: W3CVcSchemaDefinition | W3CVcSchemaDefinition[],\n    subject: string,\n    vcData: VcIssuerTypes.InTimeCredentialData,\n  ): W3CVerifiableCredentialV2 {\n    const vcId = this.generateVcId();\n    const timestamps = this.generateCredentialTimeStamps(vcData.metadata);\n    return {\n      \"@context\": [CONTEXT_VC_DATA_MODEL_2],\n      type,\n      credentialSchema: schema,\n      validFrom: timestamps.validFrom,\n      validUntil: timestamps.expirationDate,\n      id: vcId,\n      credentialStatus: vcData.status,\n      termsOfUse: vcData.termfOfUse,\n      issuer: this.issuerDid,\n      credentialSubject: {\n        id: subject,\n        ...vcData.data\n      }\n    }\n  }\n\n  private extendsVcContext(content: W3CVerifiableCredential) {\n    if (!this.vcTypesContextRelationship) {\n      return;\n    }\n    const typesToExtend = Object.keys(this.vcTypesContextRelationship);\n    for (const type of content.type) {\n      if (typesToExtend.includes(type)) {\n        content['@context'].push(this.vcTypesContextRelationship[type]);\n      }\n    }\n  }\n\n  private async generateW3CCredential(\n    type: string[],\n    schema: W3CVcSchemaDefinition | W3CVcSchemaDefinition[],\n    subject: string,\n    vcData: VcIssuerTypes.InTimeCredentialData,\n    format: W3CVerifiableCredentialFormats,\n    dataModel: W3CDataModel,\n  ): Promise<CredentialResponse> {\n    const formatter = VcFormatter.fromVcFormat(format, dataModel);\n    const content: W3CVerifiableCredential = dataModel === W3CDataModel.V1 ?\n      this.generateW3CDataForV1(type, schema, subject, vcData) :\n      this.generateW3CDataForV2(type, schema, subject, vcData)\n    this.extendsVcContext(content);\n    const vcPreSign = formatter.formatVc(content);\n    const signedVc = await this.signCallback(format, vcPreSign);\n    // Generate a new nonce\n    const nonce = uuidv4();\n    const expirationTime = C_NONCE_EXPIRATION_TIME // TODO: Make it configurable\n    this.nonceManager.saveNonce(nonce, {\n      timestamp: Date.now(),\n      sub: subject,\n      operationType: {\n        type: 'Issuance',\n        vcTypes: {\n          type: \"Know\",\n          vcTypes: type,\n        }\n      },\n      type: 'ChallengeNonce',\n      expirationTime\n    });\n    return {\n      format: format,\n      credential: signedVc,\n      c_nonce: nonce,\n      c_nonce_expires_in: expirationTime // TODO: This could be interesting to be configurable\n    }\n  }\n\n  /**\n   * Allows to exchange a deferred code for a VC\n   * @param acceptanceToken The deferred code sent by the issuer in a\n   * previous instance\n   * @param dataModel The W3C VC Data Model version\n   * @returns A credential response with the VC generated or a new\n   * (or the same) deferred code\n   */\n  async exchangeAcceptanceTokenForVc(\n    acceptanceToken: string,\n    dataModel: W3CDataModel,\n  ): Promise<CredentialResponse> {\n    const exchangeResult = await this.credentialDataManager.deferredExchange(\n      acceptanceToken\n    );\n    if (exchangeResult.isError()) {\n      throw new InvalidToken(`Invalid acceptance token: ${exchangeResult.unwrapError().message}`);\n    }\n    const credentialDataResponse = exchangeResult.unwrap();\n    return await match(credentialDataResponse)\n      .with({ type: \"InTime\" }, async (dataResponse) => this.generateW3CCredential(\n        dataResponse.types,\n        dataResponse.schema,\n        dataResponse.data.id!,\n        dataResponse,\n        dataResponse.format,\n        dataModel,\n      ))\n      .with({ type: \"Deferred\" }, (data) => {\n        return {\n          acceptance_token: data.deferredCode\n        }\n      })\n      .exhaustive();\n  }\n\n  private checkCredentialTypesAndFormat(\n    types: string[],\n    format: W3CVerifiableCredentialFormats\n  ) {\n    const typesSet = new Set(types);\n    for (const credentialSupported of this.metadata.credentials_supported) {\n      const supportedSet = new Set(credentialSupported.types);\n      if ([...typesSet].every((item) => supportedSet.has(item)) && credentialSupported.format === format) {\n        return;\n      }\n    }\n    throw new InvalidCredentialRequest(\n      \"Unsuported combination of credential types and format\"\n    );\n  }\n}\n"]}