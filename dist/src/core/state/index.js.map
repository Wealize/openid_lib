{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/core/state/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA;;;;GAIG;AACH,MAAM,OAAgB,YAAY;CAyBjC;AAED;;;GAGG;AACH,MAAM,OAAO,kBAAmB,SAAQ,YAAY;IAElD;QACE,KAAK,EAAE,CAAC;QAFF,WAAM,GAAwB,EAAE,CAAC;IAGzC,CAAC;IAAA,CAAC;IAEI,SAAS,CAAC,EAAU,EAAE,IAAS;;YACnC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QACzB,CAAC;KAAA;IAEK,WAAW,CAAC,EAAU,EAAE,IAAS;;YACrC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;QACzB,CAAC;KAAA;IAED,QAAQ,CAAC,EAAU;QACjB,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAA;IACxB,CAAC;IAEK,WAAW,CAAC,EAAU;;YAC1B,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC;KAAA;CACF","sourcesContent":["/**\n * A class that implements a key-value interface to handle states.\n * The user of the library must generate an implementation in order\n * for a RP and a VcIssuer to work.\n */\nexport abstract class StateManager {\n  /**\n   * Save a chunk of data in a space reserved with the indicated ID\n   * @param id The ID that identifies the chunk data\n   * @param data The data to store\n   */\n  abstract saveState(id: string, data: any): Promise<void>;\n\n  /**\n   * Update a chunk of data in a space reserved with the indicated ID\n   * @param id The ID that identifies the chunk data\n   * @param data The data to store\n   */\n  abstract updateState(id: string, data: any): Promise<void>;\n\n  /**\n   * Allows to get a previously saved data with the indicated ID\n   * @param id The ID that identifies the data to obtain\n   */\n  abstract getState(id: string): Promise<any | undefined>;\n  /**\n   * Allows to delete a previously saved data with the indicated ID\n   * @param id The ID that identifies the data to delete\n   */\n  abstract deleteState(id: string): Promise<void>;\n}\n\n/**\n * Basic In-Memory implementation of the StateManager interface.\n * Its use is inteded for tests and development\n */\nexport class MemoryStateManager extends StateManager {\n  private memory: Record<string, any> = {};\n  constructor() {\n    super();\n  };\n\n  async saveState(id: string, data: any): Promise<void> {\n    this.memory[id] = data;\n  }\n\n  async updateState(id: string, data: any): Promise<void> {\n    this.memory[id] = data;\n  }\n\n  getState(id: string): Promise<any | undefined> {\n    return this.memory[id]\n  }\n\n  async deleteState(id: string): Promise<void> {\n    delete this.memory[id];\n  }\n}\n"]}