{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/core/nonce/index.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,MAAM,EACP,MAAM,gCAAgC,CAAC;AACxC,OAAO,EACL,iBAAiB,EAEjB,aAAa,EACd,MAAM,uBAAuB,CAAC;AAc/B;;;GAGG;AACH,MAAM,OAAO,YAAY;IACvB,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAI,CAAC;IAEnD,mCAAmC;IACnC;;;;OAIG;IACG,SAAS,CAAC,EAAU,EAAE,IAAgB;;YAC1C,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC;KAAA;IAEK,WAAW,CAAC,EAAU,EAAE,IAAgB;;YAC5C,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;KAAA;IAED;;;OAGG;IACG,WAAW,CAAC,EAAU;;YAC1B,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;QAC1C,CAAC;KAAA;IAEa,QAAQ,CACpB,EAAU,EACV,aAAmE;;YAEnE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACnD,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;YAC3C,CAAC;YACD,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;gBACjC,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;QAC1B,CAAC;KAAA;IAED;;;;OAIG;IACG,qBAAqB,CACzB,EAAU;;YAEV,OAAO,MAAM,IAAI,CAAC,QAAQ,CACxB,EAAE,EACF,eAAe,CAC6C,CAAC;QACjE,CAAC;KAAA;IAED;;;;OAIG;IACG,qBAAqB,CACzB,EAAU;;YAEV,OAAO,MAAM,IAAI,CAAC,QAAQ,CACxB,EAAE,EACF,eAAe,CAC6C,CAAC;QACjE,CAAC;KAAA;IAED;;;;OAIG;IACG,YAAY,CAChB,EAAU;;YAEV,OAAO,MAAM,IAAI,CAAC,QAAQ,CACxB,EAAE,EACF,WAAW,CAC6C,CAAC;QAC7D,CAAC;KAAA;IAED;;;;OAIG;IACG,iBAAiB,CACrB,EAAU;;YAEV,OAAO,MAAM,IAAI,CAAC,QAAQ,CACxB,EAAE,EACF,gBAAgB,CACwC,CAAC;QAC7D,CAAC;KAAA;CACF;AAED,cAAc,YAAY,CAAC","sourcesContent":["import {\n  Result\n} from \"../../common/classes/result.js\";\nimport {\n  InvalidNonceStage,\n  NonceError,\n  NonceNotFound\n} from \"../../common/index.js\";\nimport {\n  StateManager\n} from \"../state/index.js\";\nimport {\n  ChallengeNonce,\n  GeneralNonceData,\n  NonceState,\n  NonceSpecificData,\n  PostAuthzNonce,\n  PostBaseAuthzNonce,\n  DirectRequestNonce\n} from \"./types.js\";\n\n/**\n * Class that allows the management of the nonces generated together\n * with their states using an interface that simulates a key-value database.\n */\nexport class NonceManager {\n  constructor(private stateManager: StateManager) { }\n\n  // TODO: Evaluate the use of result\n  /**\n   * Allows to save a nonce and its associated state\n   * @param id The nonce itself\n   * @param data The data associated to the nonce\n   */\n  async saveNonce(id: string, data: NonceState) {\n    await this.stateManager.saveState(id, data);\n  }\n\n  async updateNonce(id: string, data: NonceState) {\n    await this.stateManager.updateState(id, data);\n  }\n\n  /**\n   * Allows to erase a nonce and its data\n   * @param id The nonce to delete\n   */\n  async deleteNonce(id: string) {\n    await this.stateManager.deleteState(id);\n  }\n\n  private async getNonce(\n    id: string,\n    expectedStage: Extract<NonceSpecificData, { type: string }>[\"type\"]\n  ): Promise<Result<NonceState, NonceError>> {\n    const nonce = await this.stateManager.getState(id);\n    if (!nonce) {\n      return Result.Err(new NonceNotFound(id));\n    }\n    if (nonce.type !== expectedStage) {\n      return Result.Err(new InvalidNonceStage(id, expectedStage, nonce.type));\n    }\n    return Result.Ok(nonce);\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"PostBaseAuthz\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getPostBaseAuthzNonce(\n    id: string\n  ): Promise<Result<GeneralNonceData & PostBaseAuthzNonce, NonceError>> {\n    return await this.getNonce(\n      id,\n      \"PostBaseAuthz\"\n    ) as Result<GeneralNonceData & PostBaseAuthzNonce, NonceError>;\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"DirectRequest\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getDirectRequestNonce(\n    id: string\n  ): Promise<Result<GeneralNonceData & DirectRequestNonce, NonceError>> {\n    return await this.getNonce(\n      id,\n      \"DirectRequest\"\n    ) as Result<GeneralNonceData & DirectRequestNonce, NonceError>;\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"PostAuthz\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getPostAuthz(\n    id: string\n  ): Promise<Result<GeneralNonceData & PostAuthzNonce, NonceError>> {\n    return await this.getNonce(\n      id,\n      \"PostAuthz\"\n    ) as Result<GeneralNonceData & PostAuthzNonce, NonceError>;\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"ChallengeNonce\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getChallengeNonce(\n    id: string\n  ): Promise<Result<GeneralNonceData & ChallengeNonce, NonceError>> {\n    return await this.getNonce(\n      id,\n      \"ChallengeNonce\"\n    ) as Result<GeneralNonceData & ChallengeNonce, NonceError>;\n  }\n}\n\nexport * from \"./types.js\";\n"]}