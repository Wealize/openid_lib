{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/core/nonce/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,MAAM,EAAC,MAAM,gCAAgC,CAAC;AACtD,OAAO,EACL,iBAAiB,EAEjB,aAAa,GACd,MAAM,uBAAuB,CAAC;AAY/B;;;GAGG;AACH,MAAM,OAAO,YAAY;IACH;IAApB,YAAoB,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IAAG,CAAC;IAElD,mCAAmC;IACnC;;;;OAIG;IACH,KAAK,CAAC,SAAS,CAAC,EAAU,EAAE,IAAgB;QAC1C,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,EAAU,EAAE,IAAgB;QAC5C,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAChD,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,WAAW,CAAC,EAAU;QAC1B,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC1C,CAAC;IAEO,KAAK,CAAC,QAAQ,CACpB,EAAU,EACV,aAAiE;QAEjE,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACnD,IAAI,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,aAAa,EAAE,CAAC;YACjC,OAAO,MAAM,CAAC,GAAG,CAAC,IAAI,iBAAiB,CAAC,EAAE,EAAE,aAAa,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1E,CAAC;QACD,OAAO,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,qBAAqB,CACzB,EAAU;QAEV,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,eAAe,CAAC,CAG/C,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,qBAAqB,CACzB,EAAU;QAEV,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,eAAe,CAAC,CAG/C,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAChB,EAAU;QAEV,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,CAG3C,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CACrB,EAAU;QAEV,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,gBAAgB,CAAC,CAGhD,CAAC;IACJ,CAAC;CACF;AAED,cAAc,YAAY,CAAC","sourcesContent":["import {Result} from '../../common/classes/result.js';\nimport {\n  InvalidNonceStage,\n  NonceError,\n  NonceNotFound,\n} from '../../common/index.js';\nimport {StateManager} from '../state/index.js';\nimport {\n  ChallengeNonce,\n  GeneralNonceData,\n  NonceState,\n  NonceSpecificData,\n  PostAuthzNonce,\n  PostBaseAuthzNonce,\n  DirectRequestNonce,\n} from './types.js';\n\n/**\n * Class that allows the management of the nonces generated together\n * with their states using an interface that simulates a key-value database.\n */\nexport class NonceManager {\n  constructor(private stateManager: StateManager) {}\n\n  // TODO: Evaluate the use of result\n  /**\n   * Allows to save a nonce and its associated state\n   * @param id The nonce itself\n   * @param data The data associated to the nonce\n   */\n  async saveNonce(id: string, data: NonceState) {\n    await this.stateManager.saveState(id, data);\n  }\n\n  async updateNonce(id: string, data: NonceState) {\n    await this.stateManager.updateState(id, data);\n  }\n\n  /**\n   * Allows to erase a nonce and its data\n   * @param id The nonce to delete\n   */\n  async deleteNonce(id: string) {\n    await this.stateManager.deleteState(id);\n  }\n\n  private async getNonce(\n    id: string,\n    expectedStage: Extract<NonceSpecificData, {type: string}>['type'],\n  ): Promise<Result<NonceState, NonceError>> {\n    const nonce = await this.stateManager.getState(id);\n    if (!nonce) {\n      return Result.Err(new NonceNotFound(id));\n    }\n    if (nonce.type !== expectedStage) {\n      return Result.Err(new InvalidNonceStage(id, expectedStage, nonce.type));\n    }\n    return Result.Ok(nonce);\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"PostBaseAuthz\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getPostBaseAuthzNonce(\n    id: string,\n  ): Promise<Result<GeneralNonceData & PostBaseAuthzNonce, NonceError>> {\n    return (await this.getNonce(id, 'PostBaseAuthz')) as Result<\n      GeneralNonceData & PostBaseAuthzNonce,\n      NonceError\n    >;\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"DirectRequest\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getDirectRequestNonce(\n    id: string,\n  ): Promise<Result<GeneralNonceData & DirectRequestNonce, NonceError>> {\n    return (await this.getNonce(id, 'DirectRequest')) as Result<\n      GeneralNonceData & DirectRequestNonce,\n      NonceError\n    >;\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"PostAuthz\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getPostAuthz(\n    id: string,\n  ): Promise<Result<GeneralNonceData & PostAuthzNonce, NonceError>> {\n    return (await this.getNonce(id, 'PostAuthz')) as Result<\n      GeneralNonceData & PostAuthzNonce,\n      NonceError\n    >;\n  }\n\n  /**\n   * Get the nonce specified and checks if its state if of the type \"ChallengeNonce\"\n   * @param id The nonce itself to get its state\n   * @returns The state of the nonce\n   */\n  async getChallengeNonce(\n    id: string,\n  ): Promise<Result<GeneralNonceData & ChallengeNonce, NonceError>> {\n    return (await this.getNonce(id, 'ChallengeNonce')) as Result<\n      GeneralNonceData & ChallengeNonce,\n      NonceError\n    >;\n  }\n}\n\nexport * from './types.js';\n"]}