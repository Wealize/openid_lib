{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/core/nonce/types.ts"],"names":[],"mappings":"","sourcesContent":["import {JWK} from 'jose';\nimport {AuthzResponseType} from '@/types';\n\n/**\n * It sets the requested VC Types, if they are known\n */\nexport type RequestVcTypes =\n  | {type: 'Uknown'}\n  | {type: 'Know'; vcTypes: string[]};\n\n/**\n * It sets the Operation type, which be a VC issuance or a Verification\n */\nexport type OperationTypeEnum =\n  | {type: 'Issuance'; vcTypes: RequestVcTypes}\n  | {type: 'Verification'; scope: string};\n\n/**\n * It sets the client information associated with the nonce\n */\nexport type ClientTypeEnum =\n  | {\n      type: 'HolderWallet';\n      clientId: string;\n      codeChallenge?: string;\n      codeChallengeMethod?: string; // TODO: The method must be an algorithm\n    }\n  | {type: 'ServiceWallet'; clientJwk: JWK; clientId: string};\n\n/**\n * All possible states that can be associated with a nonce\n */\nexport type NonceSpecificData =\n  | PostBaseAuthzNonce\n  | DirectRequestNonce\n  | PostAuthzNonce\n  | ChallengeNonce;\n\n/**\n * The state for a nonce generated for a VP/ID Token Request after a base\n * authz request have been verified\n */\nexport interface PostBaseAuthzNonce {\n  type: 'PostBaseAuthz';\n  clientData: ClientTypeEnum;\n  redirectUri: string;\n  responseType: Extract<AuthzResponseType, 'id_token' | 'vp_token'>;\n  holderState?: string;\n  state?: string;\n}\n\n/**\n * The state for a nonce generated for a VP Token Request without\n * a previously verified authz request\n */\nexport interface DirectRequestNonce {\n  type: 'DirectRequest';\n  responseType: Extract<AuthzResponseType, 'id_token' | 'vp_token'>;\n}\n\n/**\n * The state for a nonce generated after a VP/ID Token response\n * have been verified\n */\nexport interface PostAuthzNonce {\n  type: 'PostAuthz';\n  clientData: ClientTypeEnum;\n  redirectUri: string;\n  responseType: Extract<AuthzResponseType, 'id_token' | 'vp_token'>;\n}\n\n/**\n * The state for a challenge nonce, which will be consumed in the\n * control proof of a credential request\n */\nexport interface ChallengeNonce {\n  type: 'ChallengeNonce';\n  expirationTime: number;\n}\n\n/**\n * An extension of every specific nonce states with general data\n */\nexport type NonceState = GeneralNonceData & NonceSpecificData;\n\n/**\n * General data for all nonce's states\n */\nexport interface GeneralNonceData {\n  timestamp: number;\n  sub: string;\n  operationType: OperationTypeEnum;\n}\n"]}