{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/core/rp/index.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,EAAE,EAAE,IAAI,MAAM,EAAE,MAAM,MAAM,CAAC;AACpC,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,OAAO,EAAE,eAAe,EAAE,MAAM,gBAAgB,CAAC;AACjD,OAAO,EAA2B,QAAQ,EAAE,MAAM,cAAc,CAAC;AAQjE,OAAO,EACL,WAAW,EACX,2BAA2B,EAC5B,MAAM,iCAAiC,CAAC;AAKzC,OAAO,EACL,2BAA2B,EAC3B,aAAa,EAEb,oCAAoC,GACrC,MAAM,iCAAiC,CAAC;AAKzC,OAAO,EACL,cAAc,EAEf,MAAM,0CAA0C,CAAC;AAQlD,OAAO,EAAE,0BAA0B,EAAE,MAAM,oCAAoC,CAAC;AAEhF,OAAO,EACL,YAAY,EACZ,uBAAuB,EACvB,kBAAkB,EAClB,YAAY,EACZ,cAAc,EACd,YAAY,EACZ,WAAW,EACX,kBAAkB,EAClB,oBAAoB,EACrB,MAAM,+BAA+B,CAAC;AACvC,OAAO,EACL,UAAU,EACX,MAAM,iCAAiC,CAAC;AAMzC,OAAO,EACL,cAAc,EAEf,MAAM,0CAA0C,CAAC;AAIlD,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,gCAAgC,CAAC;AAExD,OAAO,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AASjD;;;;;;;;GAQG;AACH,MAAM,OAAO,mBAAmB;IAE9B;;;;;;;;;;;;;;;;;;;;;;;;;KAyBC;IACD,YACU,qBAAqC,EACrC,QAA4B,EAC5B,WAAqB,EACrB,YAAuC,EACvC,qBAA8B,EACtC,YAA0B,EAClB,iBAAiE,EACjE,oBAA6C,EAC7C,uBACyC,EACzC,wBAC6D,EAC7D,gCAAmE,EACnE,eAI8B;QAjB9B,0BAAqB,GAArB,qBAAqB,CAAgB;QACrC,aAAQ,GAAR,QAAQ,CAAoB;QAC5B,gBAAW,GAAX,WAAW,CAAU;QACrB,iBAAY,GAAZ,YAAY,CAA2B;QACvC,0BAAqB,GAArB,qBAAqB,CAAS;QAE9B,sBAAiB,GAAjB,iBAAiB,CAAgD;QACjE,yBAAoB,GAApB,oBAAoB,CAAyB;QAC7C,4BAAuB,GAAvB,uBAAuB,CACkB;QACzC,6BAAwB,GAAxB,wBAAwB,CACqC;QAC7D,qCAAgC,GAAhC,gCAAgC,CAAmC;QACnE,oBAAe,GAAf,eAAe,CAIe;QAEtC,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,UAAkB,EAAE,QAAoB;QACnD,MAAM,GAAG,GAAG,EAAgC,CAAC;QAC7C,GAAG,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,QAAQ,iCAC1B,IAAI,CAAC,WAAW,GAChB,GAAG,EACN,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACG,oBAAoB,CACxB,2BAAmC,EACnC,QAAgB,EAChB,WAAmB,EACnB,cAAsC,EACtC,oBAA+D;;YAE/D,oBAAoB,iBACf;gBACD,YAAY,EAAE,aAAa;gBAC3B,KAAK,EAAE,MAAM,EAAE;gBACf,KAAK,EAAE,aAAa;gBACpB,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,qBAAqB;aAChE,EACE,oBAAoB,CACxB,CAAC;YACF,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,2BAA2B,CACvD,cAAc,EACd,UAAU,EACV,oBAAoB,CAAC,KAAK,CAC3B,CAAC;YACF,MAAM,aAAa,GAAyB;gBAC1C,aAAa,EAAE,UAAU;gBACzB,KAAK,EAAE,oBAAoB,CAAC,KAAM;gBAClC,YAAY,EAAE,WAAW;gBACzB,aAAa,EAAE,oBAAoB,CAAC,YAAY;gBAChD,KAAK,EAAE,KAAK;gBACZ,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;aAChC,CAAC;YACF,IAAI,oBAAoB,CAAC,KAAK,EAAE,CAAC;gBAC/B,aAAa,CAAC,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC;YACnD,CAAC;YACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,+BACrC,GAAG,EAAE,QAAQ,EACb,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EACzB,GAAG,EAAE,KAAK,CAAC,SAAS,GAAG,oBAAoB,CAAC,cAAe,IACxD,aAAa,GACb,oBAAoB,CAAC,iBAAiB,GAEzC,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAC1D,CAAC;YACF,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAChD,OAAO,IAAI,cAAc,CACvB,aAAa,EACb,OAAO,EACP,2BAA2B,CAC5B,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;OAQG;IACG,mCAAmC,CACvC,sBAA8D,EAC9D,WAAmB,EACnB,oBAA+D;;YAE/D,gFAAgF;YAChF,oBAAoB,iBACf;gBACD,YAAY,EAAE,aAAa;gBAC3B,KAAK,EAAE,aAAa;gBACpB,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,qBAAqB;aAChE,EACE,oBAAoB,CACxB,CAAC;YACF,MAAM,UAAU,GAAe;gBAC7B,IAAI,EAAE,eAAe;gBACrB,aAAa,EAAE;oBACb,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,oBAAoB,CAAC,KAAM;iBACnC;gBACD,YAAY,EAAE,UAAU;gBACxB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,GAAG,EAAE,2BAA2B;aACjC,CAAC;YACF,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC;YACvB,MAAM,aAAa,GAAyB;gBAC1C,aAAa,EAAE,UAAU;gBACzB,KAAK,EAAE,oBAAoB,CAAC,KAAM;gBAClC,YAAY,EAAE,WAAW;gBACzB,aAAa,EAAE,oBAAoB,CAAC,YAAY;gBAChD,KAAK,EAAE,KAAK;gBACZ,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;aAChC,CAAC;YACF,IAAI,oBAAoB,CAAC,KAAK,EAAE,CAAC;gBAC/B,aAAa,CAAC,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC;YACnD,CAAC;YACD,KAAK,CAAC,sBAAsB,CAAC;iBAC1B,IAAI,CACH,EAAE,IAAI,EAAE,KAAK,EAAE,EACf,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,uBAAuB,GAAG,IAAI,CAAC,sBAAsB,CAAC;iBAC/E,IAAI,CACH,EAAE,IAAI,EAAE,KAAK,EAAE,EACf,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,2BAA2B,GAAG,IAAI,CAAC,yBAAyB,CAAC;iBACtF,UAAU,EAAE,CAAA;YACf,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,+BACrC,GAAG,EAAE,2BAA2B,EAChC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EACzB,GAAG,EAAE,UAAU,CAAC,SAAS,GAAG,oBAAoB,CAAC,cAAe,IAC7D,aAAa,GACb,oBAAoB,CAAC,iBAAiB,GAEzC,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAC1D,CAAC;YACF,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACrD,OAAO,IAAI,cAAc,CACvB,aAAa,EACb,OAAO,EACP,EAAE,CACH,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;;;;;;;;;;;OAgBG;IACG,oBAAoB,CACxB,2BAAmC,EACnC,QAAgB,EAChB,WAAmB,EACnB,sBAA8D,EAC9D,cAAsC,EACtC,oBAA+D;;YAE/D,oBAAoB,iBACf;gBACD,YAAY,EAAE,aAAa;gBAC3B,KAAK,EAAE,aAAa;gBACpB,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,qBAAqB;aAChE,EACE,oBAAoB,CACxB,CAAC;YACF,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,2BAA2B,CACvD,cAAc,EACd,UAAU,EACV,oBAAoB,CAAC,KAAK,CAC3B,CAAC;YACF,MAAM,aAAa,GAAyB;gBAC1C,aAAa,EAAE,UAAU;gBACzB,KAAK,EAAE,oBAAoB,CAAC,KAAM;gBAClC,YAAY,EAAE,WAAW;gBACzB,aAAa,EAAE,oBAAoB,CAAC,YAAY;gBAChD,KAAK,EAAE,KAAK;gBACZ,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;aAChC,CAAC;YACF,IAAI,oBAAoB,CAAC,KAAK,EAAE,CAAC;gBAC/B,aAAa,CAAC,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC;YACnD,CAAC;YACD,KAAK,CAAC,sBAAsB,CAAC;iBAC1B,IAAI,CACH,EAAE,IAAI,EAAE,KAAK,EAAE,EACf,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,uBAAuB,GAAG,IAAI,CAAC,sBAAsB,CAAC;iBAC/E,IAAI,CACH,EAAE,IAAI,EAAE,KAAK,EAAE,EACf,CAAC,IAAI,EAAE,EAAE,CAAC,aAAa,CAAC,2BAA2B,GAAG,IAAI,CAAC,yBAAyB,CAAC;iBACtF,UAAU,EAAE,CAAA;YACf,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,+BACrC,GAAG,EAAE,QAAQ,EACb,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EACzB,GAAG,EAAE,KAAK,CAAC,SAAS,GAAG,oBAAoB,CAAC,cAAe,IACxD,aAAa,GACb,oBAAoB,CAAC,iBAAiB,GAEzC,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAC1D,CAAC;YACF,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAChD,OAAO,IAAI,cAAc,CACvB,aAAa,EACb,OAAO,EACP,2BAA2B,CAC5B,CAAC;QACJ,CAAC;KAAA;IAEO,2BAA2B,CACjC,OAA+B,EAC/B,YAAiE,EACjE,KAAc;QAEd,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC;aAC9B,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;YACnC,IAAI,OAAO,GAAmB;gBAC5B,IAAI,EAAE,QAAQ;aACf,CAAC;YACF,KAAK,MAAM,OAAO,IAAI,OAAO,CAAC,wBAAwB,CAAC,YAAY,CAAC,qBAAsB,EAAE,CAAC;gBAC3F,uDAAuD;gBACvD,IAAI,OAAO,CAAC,IAAI,KAAK,oCAAoC,EAAE,CAAC;oBAC1D,OAAO,GAAG;wBACR,IAAI,EAAE,MAAM;wBACZ,OAAO,EAAE,OAAO,CAAC,KAAM;qBACxB,CAAA;oBACD,MAAM;gBACR,CAAC;YACH,CAAC;YACD,IAAI,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,CAAC;gBACnD,OAAO;oBACL,IAAI,EAAE,eAAe;oBACrB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;oBACzD,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;oBACpE,YAAY,EAAE,YAAY;oBAC1B,KAAK;oBACL,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;oBAC7D,UAAU,EAAE;wBACV,IAAI,EAAE,eAAe;wBACrB,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;wBAC9D,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,gBAAgB;qBAC1D;oBACD,aAAa,EAAE;wBACb,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE,OAAO;qBACjB;iBACF,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,cAAc;mBACzD,CAAC,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,qBAAqB,EAAE,CAAC;gBACvE,MAAM,IAAI,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAC3D,CAAC;YACD,OAAO;gBACL,IAAI,EAAE,eAAe;gBACrB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;gBACzD,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;gBACpE,YAAY,EAAE,YAAY;gBAC1B,KAAK;gBACL,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;gBAC7D,UAAU,EAAE;oBACV,IAAI,EAAE,cAAc;oBACpB,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;oBAC9D,aAAa,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,cAAe,EAAE,kDAAkD;oBAC7H,mBAAmB,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,qBAAsB;iBACvF;gBACD,aAAa,EAAE;oBACb,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,OAAO;iBACjB;aACF,CAAC;QACJ,CAAC,CAAC;aACD,IAAI,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;YACvC,IAAI,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,CAAC;gBACnD,OAAO;oBACL,IAAI,EAAE,eAAe;oBACrB,aAAa,EAAE;wBACb,IAAI,EAAE,cAAc;wBACpB,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;qBACxD;oBACD,UAAU,EAAE;wBACV,IAAI,EAAE,cAAc;wBACpB,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;qBAC/D;oBACD,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;oBAC7D,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;oBACzD,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;oBACpE,YAAY,EAAE,YAAY;iBAC3B,CAAC;YACJ,CAAC;YACD,OAAO;gBACL,IAAI,EAAE,eAAe;gBACrB,aAAa,EAAE;oBACb,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;iBACxD;gBACD,UAAU,EAAE;oBACV,IAAI,EAAE,eAAe;oBACrB,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,gBAAiB;oBAC1D,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;iBAC/D;gBACD,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;gBAC7D,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;gBACzD,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;gBACpE,YAAY,EAAE,YAAY;aAC3B,CAAC;QACJ,CAAC,CAAC;aACD,UAAU,EAAgB,CAAC;QAC9B,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,CAAA;IAC/C,CAAC;IAED;;;;OAIG;IACG,sBAAsB,CAC1B,OAA4B;;YAE5B,wCAAwC;YACxC,IAAI,MAAoB,CAAC;YACzB,IAAI,GAAG,GAAoB,SAAS,CAAC;YACrC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACrB,MAAM,GAAG,OAAO,CAAC;YACnB,CAAC;iBAAM,CAAC;gBACN,kCAAkC;gBAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,2BAA2B,KAAK,KAAK,EAAE,CAAC;oBACxD,MAAM,IAAI,cAAc,CAAC,8BAA8B,CAAC,CAAC;gBAC3D,CAAC;gBACD,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;gBACzD,IAAI,IAAI,CAAC,QAAQ,CAAC,2CAA2C;oBAC3D,CAAC,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAAC,QAAQ,CACjE,MAAM,CAAC,GAAe,CACvB,EAAE,CAAC;oBACJ,MAAM,IAAI,cAAc,CAAC,gCAAgC,CAAC,CAAC;gBAC7D,CAAC;gBACD,MAAM,GAAG,OAAuB,CAAC;gBACjC,IACE,CAAC,MAAM,CAAC,eAAe;oBACvB,UAAU,IAAI,MAAM,CAAC,eAAe,KAAK,KAAK,EAC9C,CAAC;oBACD,MAAM,IAAI,cAAc,CAAC,wCAAwC,CAAC,CAAC;gBACrE,CAAC;gBACD,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;gBAC9D,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;oBAChB,MAAM,IAAI,cAAc,CAAC,8BAA8B,CAAC,CAAC;gBAC3D,CAAC;gBACD,GAAG,GAAG,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;gBACzC,IAAI,CAAC;oBACH,MAAM,2BAA2B,CAC/B,OAAO,CAAC,OAAO,EACf,GAAG,EACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;gBACJ,CAAC;gBAAC,OAAO,KAAU,EAAE,CAAC;oBACpB,MAAM,IAAI,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC;YACD,MAAM,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,CACvD,MAAM,CAAC,eAAe,CACvB,CAAC;YACF,MAAM,uBAAuB,GAAG,IAAI,CAAC,sBAAsB,CACzD,MAAM,CAAC,eAAe,CACvB,CAAC;YACF,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC/B,IAAI,IAAI,CAAC,QAAQ,CAAC,gBAAgB;oBAChC,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC;oBACzD,MAAM,IAAI,YAAY,CACpB,4BAA4B,MAAM,CAAC,KAAK,EAAE,CAC3C,CAAC;gBACJ,CAAC;YACH,CAAC;YACD,IAAI,MAAM,CAAC,qBAAqB,EAAE,CAAC;gBACjC,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,qBAAqB,EAAE,CAAC;oBACnD,IAAI,OAAO,CAAC,SAAS;2BAChB,OAAO,CAAC,SAAS,CAAC,MAAM;2BACxB,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC;wBACvD,MAAM,IAAI,cAAc,CACtB,+CAA+C,CAChD,CAAC;oBACJ,CAAC;oBACD,IAAI,IAAI,CAAC,wBAAwB,EAAE,CAAC;wBAClC,MAAM,6BAA6B,GACjC,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;wBAC/C,IAAI,6BAA6B,CAAC,OAAO,EAAE,EAAE,CAAC;4BAC5C,MAAM,IAAI,cAAc,CACtB,0CAA0C;gCAC1C,6BAA6B,CAAC,WAAW,EAAE,CAC5C,CAAC;wBACJ,CAAC;oBACH,CAAC;gBACH,CAAC;YACH,CAAC;YACD,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;gBACjC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;oBACzB,MAAM,IAAI,cAAc,CAAC,yCAAyC,CAAC,CAAC;gBACtE,CAAC;gBACD,MAAM,6BAA6B,GACjC,MAAM,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;gBAC1D,IAAI,6BAA6B,CAAC,OAAO,EAAE,EAAE,CAAC;oBAC5C,MAAM,IAAI,cAAc,CACtB,iCAAiC;wBACjC,6BAA6B,CAAC,WAAW,EAAE,CAC5C,CAAC;gBACJ,CAAC;YACH,CAAC;YACD,OAAO;gBACL,uBAAuB;gBACvB,YAAY,EAAE,MAAM;gBACpB,gBAAgB,EAAE,GAAG;aACtB,CAAA;QACH,CAAC;KAAA;IAEO,uBAAuB,CAC7B,UAAkB,EAClB,cAAqD,EACrD,OAAe;QAEf,OAAO;YACL,KAAK,EAAE,UAAU;YACjB,KAAK,kCACA,cAAc,KACjB,IAAI,EAAE,WAAW,EACjB,GAAG,EAAE,OAAO,GACb;SACF,CAAC;IACJ,CAAC;IAEa,+BAA+B,CAC3C,KAAa,EACb,OAAe,EACf,oBAA6C,EAC7C,KAAc;;YAMd,IAAI,UAAsB,CAAC;YAC3B,IAAI,WAAW,EAAE,WAA+B,CAAC;YACjD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;YACzE,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;gBACzE,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;oBAC1B,MAAM,IAAI,cAAc,CAAC,yBAAyB,CAAC,CAAC;gBACtD,CAAC;gBACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC3C,UAAU,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;gBAClC,WAAW,GAAG,SAAS,CAAC;gBACxB,WAAW,GAAG,SAAS,CAAC;YAC1B,CAAC;iBAAM,CAAC;gBACN,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;gBACvC,IAAI,SAAS,CAAC,YAAY,KAAK,oBAAoB,EAAE,CAAC;oBACpD,MAAM,IAAI,cAAc,CACtB,gCAAgC,oBAAoB,gBAAgB,CACrE,CAAA;gBACH,CAAC;gBACD,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;qBACxB,IAAI,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,CAAC,IAAI,EAAE,EAAE;oBACvC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC;wBACpD,MAAM,IAAI,cAAc,CACtB,0EAA0E,CAC3E,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC,CAAA;gBACJ,IAAI,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;oBACjD,MAAM,IAAI,cAAc,CAAC,yBAAyB,CAAC,CAAC;gBACtD,CAAC;gBACD,UAAU,GAAG,SAAS,CAAC;gBACvB,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;gBACpC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;YACtC,CAAC;YACD,OAAO;gBACL,UAAU,EAAE,UAAU;gBACtB,WAAW;gBACX,WAAW;aACZ,CAAC;QACJ,CAAC;KAAA;IAED;;;;;;OAMG;IACG,qBAAqB,CACzB,eAAgC,EAChC,sBAA+B,IAAI;;YAEnC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAClE,MAAM,UAAU,GAAG,OAAqB,CAAC;YACzC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;gBACpB,MAAM,IAAI,cAAc,CAAC,sCAAsC,CAAC,CAAC;YACnE,CAAC;YACD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;gBACtB,MAAM,IAAI,cAAc,CAAC,sCAAsC,CAAC,CAAC;YACnE,CAAC;YACD,MAAM,EACJ,UAAU,EACV,WAAW,EACX,WAAW,EACZ,GAAG,MAAM,IAAI,CAAC,+BAA+B,CAC5C,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,GAAI,EACf,UAAU,EACV,UAAU,CAAC,KAAK,CACjB,CAAC;YACF,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;gBACpB,MAAM,IAAI,cAAc,CACtB,sCAAsC,EAAE,WAAW,EAAE,WAAW,CACjE,CAAC;YACJ,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,MAAM,IAAI,cAAc,CACtB,oCAAoC,EAAE,WAAW,EAAE,WAAW,CAC/D,CAAC;YACJ,CAAC;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,qCAAqC;mBAClD,CAAC,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAe,CAAC,EAAE,CAAC;gBAC3F,MAAM,IAAI,cAAc,CACtB,qCAAqC,EAAE,WAAW,EAAE,WAAW,CAChE,CAAC;YACJ,CAAC;YACD,IAAI,WAAW,GAA4B,SAAS,CAAC;YACrD,IAAI,CAAC;gBACH,IAAI,mBAAmB,EAAE,CAAC;oBACxB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;oBACrE,IAAI,aAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;wBAC9C,MAAM,IAAI,kBAAkB,CAC1B,gCAAgC,aAAa,CAAC,qBAAqB,CAAC,KACpE,KAAK,aAAa,CAAC,qBAAqB,CAAC,OAAO,EAAE,EAClD,WAAW,EACX,WAAW,CACZ,CAAC;oBACJ,CAAC;oBACD,WAAW,GAAG,aAAa,CAAC,WAAY,CAAC;oBACzC,MAAM,YAAY,GAAG,0BAA0B,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;oBACzE,MAAM,2BAA2B,CAC/B,eAAe,CAAC,QAAQ,EACxB,YAAY,EACZ,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;gBACJ,CAAC;qBAAM,CAAC;oBACN,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;wBACtE,MAAM,IAAI,cAAc,CACtB,+CAA+C,EAAE,WAAW,EAAE,WAAW,CAC1E,CAAC;oBACJ,CAAC;oBACD,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;wBAC/D,MAAM,IAAI,cAAc,CACtB,2CAA2C,EAAE,WAAW,EAAE,WAAW,CACtE,CAAC;oBACJ,CAAC;gBACH,CAAC;YACH,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,YAAY,CACpB,KAAK,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,CACxC,CAAC;YACJ,CAAC;YACD,MAAM,EACJ,SAAS,GACV,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,UAAW,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,GAAI,CAAC,CAAC;YACxF,OAAO;gBACL,KAAK,EAAE,eAAe,CAAC,QAAQ;gBAC/B,WAAW;gBACX,OAAO,EAAE,UAAU,CAAC,GAAG;gBACvB,SAAS;gBACT,KAAK,EAAE,WAAW;gBAClB,WAAW,EAAE,WAAW;aACzB,CAAA;QACH,CAAC;KAAA;IAED;;;;;;;;;;OAUG;IACG,qBAAqB,CACzB,eAAgC,EAChC,sBAAiD,EAAE,mCAAmC;IACtF,0BAAmC,IAAI;;YAEvC,IAAI,CAAC,IAAI,CAAC,gCAAgC,EAAE,CAAC;gBAC3C,MAAM,IAAI,kBAAkB,CAC1B,gFAAgF,CACjF,CAAC;YACJ,CAAC;YACD,IAAI,UAAU,GAA2B,SAAS,CAAC;YACnD,IAAI,WAAW,EAAE,WAAW,GAAuB,SAAS,CAAC;YAC7D,IAAI,QAAgB,CAAC;YACrB,IAAI,UAAkB,CAAC;YACvB,IAAI,CAAC;gBACH,MAAM,UAAU,GAAG,IAAI,UAAU,CAC/B,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpB,IAAI,CAAC,gCAAgC,EACrC,CAAO,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;oBAC9B,UAAU,GAAG,KAAK,CAAC;oBACnB,oBAAoB;oBACpB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,+BAA+B,CACpD,KAAK,EACL,OAAO,EACP,UAAU,EACV,KAAK,CACN,CAAC;oBACF,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;oBAC5B,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;oBAC9B,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;oBAC9B,QAAQ,GAAG,OAAO,CAAC;oBACnB,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;gBACzB,CAAC,CAAA,EACD,uBAAuB,CACxB,CAAC;gBACF,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACnD,eAAe,CAAC,QAAQ,EACxB,sBAAsB,EACtB,eAAe,CAAC,uBAAuB,CACxC,CAAC;gBACF,MAAM,EACJ,SAAS,GACV,GAAG,MAAM,IAAI,CAAC,wBAAwB,CACrC,UAAW,EACX,UAAW,EACX,QAAS,CACV,CAAC;gBACF,OAAO;oBACL,KAAK,EAAE,eAAe,CAAC,QAAQ;oBAC/B,cAAc,EAAE,SAAS;oBACzB,SAAS;oBACT,KAAK,EAAE,WAAW;oBAClB,WAAW,EAAE,WAAW;iBACzB,CAAA;YACH,CAAC;YAAC,OAAO,CAAM,EAAE,CAAC;gBAChB,IAAI,CAAC,YAAY,WAAW,EAAE,CAAC;oBAC7B,IAAI,UAAU,EAAE,CAAC;wBACf,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC;wBAC5B,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC9B,CAAC;gBACH,CAAC;gBACD,MAAM,CAAC,CAAC;YACV,CAAC;QACH,CAAC;KAAA;IAEa,wBAAwB,CACpC,SAAqB,EACrB,UAAkB,EAClB,QAAgB;;YAEhB,OAAO,KAAK,CAAC,SAAS,CAAC;iBACpB,IAAI,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,CAAO,IAAI,EAAE,EAAE;gBAC9C,MAAM,EACJ,KAAK,EACL,KAAK,EACN,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAW,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;gBAC9D,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;oBAC3C,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;gBACpD,CAAC;gBACD,OAAO;oBACL,SAAS,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC;wBACjC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;wBACzB,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;wBACzB,GAAG,EAAE,QAAQ,EAAE,4DAA4D;wBAC3E,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,2BAA2B,GAAG,IAAI,EAAE,sCAAsC;wBAC5F,KAAK,EAAE,KAAK;qBACb,CAAC;oBACF,WAAW,EAAE,IAAI,CAAC,WAAW;oBAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;iBAC9B,CAAA;YACH,CAAC,CAAA,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE;gBAChB,OAAO;oBACL,SAAS,EAAE,SAAS;oBACpB,WAAW,EAAE,SAAS;oBACtB,WAAW,EAAE,SAAS;iBACvB,CAAA;YACH,CAAC,CAAC,CAAC;QACP,CAAC;KAAA;IAEO,cAAc,CACpB,GAAW,EACX,OAAe,EACf,GAAW,EACX,UAAmB,EACnB,SAAsB;QAEtB,IAAI,aAAgC,CAAC;QACrC,IAAI,SAAS,EAAE,CAAC;YACd,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;QAC1C,CAAC;aAAM,CAAC;YACN,aAAa,GAAG;gBACd,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE;oBACP,IAAI,EAAE,QAAQ;iBACf;aACF,CAAA;QACH,CAAC;QACD,MAAM,UAAU,GAAe;YAC7B,IAAI,EAAE,gBAAgB;YACtB,cAAc,EAAE,GAAG;YACnB,SAAS,EAAE,GAAG;YACd,GAAG,EAAE,OAAO;YACZ,aAAa,EAAE,aAAa;SAC7B,CAAA;QACD,OAAO,EAAE,KAAK,EAAE,UAAU,aAAV,UAAU,cAAV,UAAU,GAAI,MAAM,EAAE,EAAE,KAAK,EAAE,UAAU,EAAE,CAAA;IAC7D,CAAC;IAED;;;;;;;;;;;OAWG;IACG,mBAAmB,CACvB,YAA0B,EAC1B,eAAwB,EACxB,QAAgB,EAChB,sBAA2B;;YAE3B,IAAI,QAAgB,CAAC;YACrB,IAAI,SAAiC,CAAC;YACtC,IAAI,UAA8B,CAAC;YACnC,IAAI,gBAAgB,GAAwB,EAAE,CAAC;YAC/C,IAAI,IAAI,CAAC,QAAQ,CAAC,qBAAqB;mBAClC,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC5E,MAAM,IAAI,oBAAoB,CAC5B,eAAe,YAAY,CAAC,UAAU,iBAAiB,CACxD,CAAC;YACJ,CAAC;YACD,QAAQ,YAAY,CAAC,UAAU,EAAE,CAAC;gBAChC,KAAK,oBAAoB;oBACvB,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;wBACvB,MAAM,IAAI,YAAY,CACpB,eAAe,YAAY,CAAC,UAAU,sBAAsB,CAC7D,CAAC;oBACJ,CAAC;oBACD,MAAM,2BAA2B,CAC/B,YAAY,CAAC,IAAI,EACjB,sBAAsB,EACtB,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;oBACF,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;oBACnD,MAAM,UAAU,GAAG,OAAqB,CAAC;oBACzC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,UAAU,CAAC,KAAM,CAAC,CAAC;oBAC5E,UAAU,GAAG,UAAU,CAAC,KAAM,CAAC;oBAC/B,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;wBAC1B,MAAM,IAAI,YAAY,CAAC,qCAAqC,CAAC,CAAC;oBAChE,CAAC;oBACD,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;oBACjC,MAAM,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;yBAC9B,IAAI,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,CAAO,IAAI,EAAE,EAAE;wBAC7C,2DAA2D;wBAC3D,IAAI,CAAC,CAAA,MAAM,eAAe,CAAC,YAAY,CAAC,aAAc,EAAE,IAAI,CAAC,aAAc,CAAC,CAAA,EAAE,CAAC;4BAC7E,MAAM,IAAI,cAAc,CAAC,0DAA0D,CAAC,CAAC;wBACvF,CAAC;wBACD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAI,CAAC,EAAE,CAAC;4BAC5D,MAAM,IAAI,cAAc,CAAC,+CAA+C,CAAC,CAAC;wBAC5E,CAAC;wBACD,0CAA0C;wBAC1C,+EAA+E;wBAC/E,IAAI;oBACN,CAAC,CAAA,CAAC;yBACD,IAAI,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,EAAE,CAAO,IAAI,EAAE,EAAE;wBAC9C,IAAI,YAAY,CAAC,qBAAqB;4BACpC,YAAY,CAAC,qBAAqB;gCAClC,wDAAwD,EAAE,CAAC;4BAC3D,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;gCACnC,MAAM,IAAI,cAAc,CAAC,oCAAoC,CAAC,CAAA;4BAChE,CAAC;4BACD,IAAI,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC,SAAS,EAAE,CAAC;gCAC7C,MAAM,IAAI,cAAc,CACtB,wEAAwE,CACzE,CAAA;4BACH,CAAC;4BACD,MAAM,2BAA2B,CAC/B,YAAY,CAAC,gBAAgB,EAC7B,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;wBACJ,CAAC;oBACH,CAAC,CAAA,CAAC,CAAC,UAAU,EAAE,CAAC;oBAClB,MAAM,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC;yBACjC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE,CAAO,KAAK,EAAE,EAAE;wBAC1F,gBAAgB,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAA;oBACxC,CAAC,CAAA,CAAC;yBACD,IAAI,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,EAAE,CAAO,IAAI,EAAE,EAAE;wBAC7C,gBAAgB,GAAG,EAAE,kBAAkB,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC;oBACxD,CAAC,CAAA,CAAC,CAAC;oBACL,QAAQ,GAAG,UAAU,CAAC,GAAI,CAAA,CAAC,uBAAuB;oBAClD,MAAM;gBACR,KAAK,sDAAsD;oBACzD,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,EAAE,CAAC;wBACzC,MAAM,IAAI,YAAY,CAAC,eAAe,YAAY,CAAC,UAAU,sBAAsB,CAAC,CAAC;oBACvF,CAAC;oBACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;wBAC1B,MAAM,IAAI,uBAAuB,CAC/B,8CAA8C,YAAY,CAAC,UAAU,cAAc,CACpF,CAAC;oBACJ,CAAC;oBACD,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,eAAe,CACtD,YAAY,CAAC,SAAS,EAAE,YAAY,CAAC,qBAAqB,CAAE,EAAE,YAAY,CAAC,QAAQ,CACpF,CAAC;oBACF,IAAI,qBAAqB,CAAC,OAAO,EAAE,EAAE,CAAC;wBACpC,MAAM,IAAI,YAAY,CACpB,YAAY,YAAY,CAAC,UAAU,cAAc,qBAAqB,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,CAC/F,CAAC;oBACJ,CAAC;oBACD,QAAQ,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC;oBAC1C,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC;wBAC1B,gBAAgB,GAAG,EAAE,GAAG,EAAE,YAAY,CAAC,QAAQ,EAAE,CAAC;oBACpD,CAAC;oBACD,MAAM;gBACR,KAAK,UAAU;oBACb,gBAAgB;oBAChB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;wBAC3B,MAAM,IAAI,uBAAuB,CAC/B,yDAAyD,CAC1D,CAAC;oBACJ,CAAC;oBACD,MAAM,IAAI,kBAAkB,CAAC,eAAe,CAAC,CAAC;YAClD,CAAC;YACD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACvB,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,cAAc,CAC1C,GAAG,EACH,QAAQ,EACR,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,GAAG,IAAI,EACrD,UAAU,EACV,SAAS,CACV,CAAC;YACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,iBACnC,GAAG,EAAE,QAAQ,EACb,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,EACzB,GAAG,EAAE,QAAQ,EACb,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,GAAG,IAAI,EACrE,KAAK,EAAE,KAAK,IACT,gBAAgB,EACnB,CAAC;YACH,IAAI,SAAS,EAAE,CAAC;gBACd,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpD,CAAC;iBAAM,CAAC;gBACN,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAClD,CAAC;YACD,MAAM,MAAM,GAAkB;gBAC5B,YAAY,EAAE,KAAK;gBACnB,UAAU,EAAE,QAAQ;gBACpB,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC,yBAAyB;gBAC/D,OAAO,EAAE,KAAK;gBACd,kBAAkB,EAAE,IAAI,CAAC,oBAAoB,CAAC,oBAAoB;aACnE,CAAC;YACF,IAAI,eAAe,EAAE,CAAC;gBACpB,MAAM,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC;oBACxC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;oBACzB,GAAG,EAAE,QAAQ;oBACb,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,GAAG,IAAI;iBACtE,EACC,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CACpD,CAAC;YACJ,CAAC;YACD,OAAO,MAAM,CAAC;QAChB,CAAC;KAAA;IAEO,sBAAsB,CAC5B,cAA8B;;QAE9B,MAAM,UAAU,GAAe,EAAE,CAAC;QAClC,MAAM,SAAS,GAAuB,EAAE,CAAA;QACxC,IAAI,IAAI,CAAC,QAAQ,CAAC,qCAAqC;YACrD,cAAc,CAAC,qCAAqC,EAAE,CAAC;YACvD,KAAK,MAAM,GAAG,IAAI,cAAc,CAAC,qCAAqC,EAAE,CAAC;gBACvE,IAAI,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CAAC,QAAQ,CAAC,GAAe,CAAC,EAAE,CAAC;oBAClF,UAAU,CAAC,IAAI,CAAC,GAAe,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;YACvC,KAAK,MAAM,MAAM,IAAI,cAAe,CAAC,oBAAoB,EAAE,CAAC;gBAC1D,IAAI,IAAI,CAAC,QAAQ,CAAC,oBAAqB,CAAC,MAAkC,CAAC,EAAE,CAAC;oBAC5E,MAAM,cAAc,GAAe,EAAE,CAAC;oBACtC,KAAK,MAAM,GAAG,IAAI,MAAA,cAAe,CAAC,oBAAoB,CACpD,MAAkC,CAAC,0CAAE,oBAAqB,EAAE,CAAC;wBAC7D,IAAI,MAAA,IAAI,CAAC,QAAQ,CAAC,oBAAqB,CACrC,MAAkC,CAAC,0CAAE,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;4BAC1E,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC3B,CAAC;oBACH,CAAC;oBACD,SAAS,CAAC,MAAkC,CAAC,GAAG;wBAC9C,oBAAoB,EAAE,cAAc;qBACrC,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO;YACL,sBAAsB,EAAE,MAAA,cAAc,CAAC,wBAAwB,mCAAI,EAAE;YACrE,UAAU;YACV,SAAS;YACT,qBAAqB,EAAE,cAAc,CAAC,sBAAuB;SAC9D,CAAA;IACH,CAAC;IAEa,qBAAqB,CACjC,QAA8B;;YAE9B,OAAO,QAAQ,CAAC,CAAC,iCAAM,IAAI,CAAC,qBAAqB,GAAK,QAAQ,EAAG,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC;QAChG,CAAC;KAAA;CACF;AAED,SAAe,SAAS,CAAC,GAAW;;QAClC,IAAI,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;YAClC,MAAM,IAAI,GAAQ,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACxC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACf,MAAM,IAAI,cAAc,CAAC,2BAA2B,CAAC,CAAC;YACxD,CAAC;YACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;QACtB,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,MAAM,IAAI,kBAAkB,CAAC,yCAAyC,CAAC,EAAE,CAAC,CAAC;QAC7E,CAAC;IACH,CAAC;CAAA;AAED,SAAS,gBAAgB,CAAC,IAAW,EAAE,GAAW;IAChD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IAChD,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,MAAM,IAAI,cAAc,CAAC,yBAAyB,GAAG,EAAE,CAAC,CAAC;IAC3D,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,cAAc,YAAY,CAAC;AAC3B,cAAc,cAAc,CAAC","sourcesContent":["import { JWK } from \"jose\";\nimport { v4 as uuidv4 } from 'uuid';\nimport fetch from 'node-fetch';\nimport { JwtPayload } from \"jsonwebtoken\";\nimport { verifyChallenge } from \"pkce-challenge\";\nimport { DIDDocument, Resolvable, Resolver } from \"did-resolver\";\nimport {\n  AuthServerMetadata\n} from \"../../common/interfaces/auth_server_metadata.interface.js\";\nimport {\n  AuthzRequest,\n  AuthzRequestWithJWT\n} from \"../../common/interfaces/authz_request.interface.js\";\nimport {\n  decodeToken,\n  verifyJwtWithExpAndAudience\n} from \"../../common/utils/jwt.utils.js\";\nimport {\n  HolderMetadata,\n  ServiceMetadata\n} from \"../../common/interfaces/client_metadata.interface.js\";\nimport {\n  AUTHZ_TOKEN_EXPIRATION_TIME,\n  DEFAULT_SCOPE,\n  JWA_ALGS,\n  OPENID_CREDENTIAL_AUTHZ_DETAILS_TYPE,\n} from \"../../common/constants/index.js\";\nimport {\n  AuthzResponseType,\n  VpFormatsSupported\n} from \"../../common/types/index.js\";\nimport {\n  IdTokenRequest,\n  IdTokenRequestParams\n} from \"../../common/classes/id_token_request.js\";\nimport { IdTokenResponse } from \"../../common/interfaces/id_token_response.js\";\nimport {\n  TokenRequest\n} from \"../../common/interfaces/token_request.interface.js\";\nimport {\n  TokenResponse\n} from \"../../common/interfaces/token_response.interface.js\";\nimport { getAuthentificationJWKKeys } from \"../../common/utils/did_document.js\";\nimport * as RpTypes from \"./types.js\";\nimport {\n  AccessDenied,\n  InsufficienteParamaters,\n  InternalNonceError,\n  InvalidGrant,\n  InvalidRequest,\n  InvalidScope,\n  OpenIdError,\n  UnauthorizedClient,\n  UnsupportedGrantType\n} from \"../../common/classes/index.js\";\nimport {\n  VpResolver\n} from \"../presentations/vp-resolver.js\";\nimport {\n  AuthorizationDetails,\n  DIFPresentationDefinition,\n  VpTokenResponse,\n} from \"../../common/index.js\";\nimport {\n  VpTokenRequest,\n  VpTokenRequestParams\n} from \"../../common/classes/vp_token_request.js\";\nimport {\n  CredentialAdditionalVerification,\n} from \"../presentations/types.js\";\nimport { P, match } from \"ts-pattern\";\nimport { Result } from \"../../common/classes/result.js\";\nimport { StateManager } from \"../state/index.js\";\nimport { NonceManager } from \"../nonce/index.js\";\nimport {\n  GeneralNonceData,\n  NonceState,\n  OperationTypeEnum,\n  PostBaseAuthzNonce,\n  RequestVcTypes\n} from \"../nonce/types.js\";\n\n/**\n * Represents an entity acting as a Reliying Party. As such, it has the\n * capability to process authorisation requests and to send others.\n * It can also issue access tokens.\n *\n * The \"grant_type\" \"authorisation_code\" and \"pre-authorised_code\" are supported\n * for authentication. The first one is always active. In order to facilitate the\n * building of the objects from this class, a builder has been developed.\n */\nexport class OpenIDReliyingParty {\n  private nonceManager: NonceManager;\n  /**\n * @param defaultHolderMetadata Default metadata configuration for all Holder Wallets\n * that establish contact. This configuration is overwritten dynamically with the\n * data provided by these actors.\n * @param metadata Authorisation server metadata\n * @param didResolver Object responsible for obtaining the DID Documents\n * of the DIDs that are detected.\n * @param signCallback Callback used to sign any required data.\n * @param scopeVerificationFlag Flag that control if the scope parameter\n * should be checked against the \"scopes_supported\" params of the Auth server\n * metadata\n * @param stateManager: An implementation of a State Manager that will be used to\n * store and control the lifetime of the nonces\n * @param subjectComparison Function used to compare if two ID, most probably DIDs,\n * are the same\n * @param generalConfiguration Configuration about the different expiration times\n * of the involved tokens\n * @param issuerStateVerirication Optional callback that can be used to check the \"issuer state\"\n * parameter, but only is provided\n * @param authzDetailsVerification Optional callback that can be used to check\n * the authorization details of a Authz Request, but only if provided\n * @param vpCredentialVerificationCallback Optional callback that is used during\n * VP verification to check the credential data agains the use case logic.\n * @param preAuthCallback Optional callback that is used to check the validity\n * of a Pre-Authorization Code\n */\n  constructor(\n    private defaultHolderMetadata: HolderMetadata,\n    private metadata: AuthServerMetadata,\n    private didResolver: Resolver,\n    private signCallback: RpTypes.TokenSignCallback,\n    private scopeVerificationFlag: boolean,\n    stateManager: StateManager,\n    private subjectComparison: (firstId: string, secondId: string) => boolean,\n    private generalConfiguration: RpTypes.RpConfiguration,\n    private issuerStateVerirication?:\n      (state: string) => Promise<Result<null, Error>>,\n    private authzDetailsVerification?:\n      (authDetails: AuthorizationDetails) => Promise<Result<null, Error>>,\n    private vpCredentialVerificationCallback?: CredentialAdditionalVerification,\n    private preAuthCallback?: undefined\n      | ((clientId: string | undefined,\n        preCode: string,\n        pin?: string\n      ) => Promise<Result<string, Error>>)\n  ) {\n    this.nonceManager = new NonceManager(stateManager);\n  }\n\n  /**\n   * Allows to add support for a new DID Method\n   * @param methodName DID Method name\n   * @param resolver Object responsible for obtaining the DID Documents\n   * related to the DID specified\n   */\n  addDidMethod(methodName: string, resolver: Resolvable) {\n    const tmp = {} as Record<string, Resolvable>;\n    tmp[methodName] = resolver;\n    this.didResolver = new Resolver({\n      ...this.didResolver,\n      ...tmp\n    });\n  }\n\n  /**\n   * Allows to create a new Authorisation request in which an ID Token\n   * is requested\n   * @param clientAuthorizationEndpoint Endpoint of the authorisation\n   * server of the client\n   * @param audience \"aud\" parameter for the generated JWT.\n   * @param redirectUri URI to which the client should deliver the\n   * authorisation response to\n   * @param requestPurpose Allows to specify if the end purpose of the token\n   * is for a VC issuance or for a verification and also allows to set\n   * a verified authz request.\n   * @param additionalParameters Additional parameters that handle\n   * issues related to the content of the ID Token.\n   * @returns The ID Token Request\n   */\n  async createIdTokenRequest(\n    clientAuthorizationEndpoint: string,\n    audience: string,\n    redirectUri: string,\n    requestPurpose: RpTypes.RequestPurpose,\n    additionalParameters?: RpTypes.CreateTokenRequestOptionalParams\n  ): Promise<IdTokenRequest> {\n    additionalParameters = {\n      ...{\n        responseMode: \"direct_post\",\n        nonce: uuidv4(),\n        scope: DEFAULT_SCOPE,\n        expirationTime: this.generalConfiguration.idTokenExpirationTime\n      },\n      ...additionalParameters\n    };\n    const { nonce, state } = this.createNonceForPostBaseAuthz(\n      requestPurpose,\n      \"id_token\",\n      additionalParameters.state\n    );\n    const requestParams: IdTokenRequestParams = {\n      response_type: \"id_token\",\n      scope: additionalParameters.scope!,\n      redirect_uri: redirectUri,\n      response_mode: additionalParameters.responseMode,\n      nonce: nonce,\n      client_id: this.metadata.issuer\n    };\n    if (additionalParameters.state) {\n      requestParams.state = additionalParameters.state;\n    }\n    const idToken = await this.signCallback({\n      aud: audience,\n      iss: this.metadata.issuer,\n      exp: state.timestamp + additionalParameters.expirationTime!,\n      ...requestParams,\n      ...additionalParameters.additionalPayload\n    },\n      this.metadata.request_object_signing_alg_values_supported\n    );\n    await this.nonceManager.saveNonce(nonce, state);\n    return new IdTokenRequest(\n      requestParams,\n      idToken,\n      clientAuthorizationEndpoint\n    );\n  }\n\n  /**\n   * Method that allows to build an VP Token Request directly, without\n   * the need of a previous Base Authz Request\n   * @param presentationDefinition The presentation definition to indicate to\n   * the user\n   * @param additionalParameters Additional parameters that handle\n   * issues related to the content of the VP Token.\n   * @returns A VP Token Request\n   */\n  async directVpTokenRequestForVerification(\n    presentationDefinition: RpTypes.PresentationDefinitionLocation,\n    redirectUri: string,\n    additionalParameters?: RpTypes.CreateTokenRequestOptionalParams,\n  ) {\n    // TODO: Refactor this method in the future. Too similar to createVpTokenRequest\n    additionalParameters = {\n      ...{\n        responseMode: \"direct_post\",\n        scope: DEFAULT_SCOPE,\n        expirationTime: this.generalConfiguration.vpTokenExpirationTIme\n      },\n      ...additionalParameters\n    };\n    const nonceState: NonceState = {\n      type: \"DirectRequest\",\n      operationType: {\n        type: \"Verification\",\n        scope: additionalParameters.scope!\n      },\n      responseType: \"vp_token\",\n      timestamp: Date.now(),\n      sub: \"https://self-issued.me/v2\"\n    };\n    const nonce = uuidv4();\n    const requestParams: VpTokenRequestParams = {\n      response_type: \"vp_token\",\n      scope: additionalParameters.scope!,\n      redirect_uri: redirectUri,\n      response_mode: additionalParameters.responseMode,\n      nonce: nonce,\n      client_id: this.metadata.issuer\n    };\n    if (additionalParameters.state) {\n      requestParams.state = additionalParameters.state;\n    }\n    match(presentationDefinition)\n      .with(\n        { type: \"Raw\" },\n        (data) => requestParams.presentation_definition = data.presentationDefinition)\n      .with(\n        { type: \"Uri\" },\n        (data) => requestParams.presentation_definition_uri = data.presentationDefinitionUri)\n      .exhaustive()\n    const vpToken = await this.signCallback({\n      aud: \"https://self-issued.me/v2\",\n      iss: this.metadata.issuer,\n      exp: nonceState.timestamp + additionalParameters.expirationTime!,\n      ...requestParams,\n      ...additionalParameters.additionalPayload\n    },\n      this.metadata.request_object_signing_alg_values_supported\n    );\n    await this.nonceManager.saveNonce(nonce, nonceState);\n    return new VpTokenRequest(\n      requestParams,\n      vpToken,\n      \"\"\n    );\n  }\n\n  /**\n   * Allows to create a new Authorisation request in which an VP Token\n   * is requested\n   * @param clientAuthorizationEndpoint Endpoint of the authorisation\n   * server of the client\n   * @param audience \"aud\" parameter for the generated JWT.\n   * @param redirectUri URI to which the client should deliver the\n   * authorisation response to\n   * @param presentationDefinition Allows to define how the presentation\n   * definition is going to be specified for the user\n   * @param requestPurpose Allows to specify if the end purpose of the token\n   * is for a VC issuance or for a verification and also allows to set\n   * a verified authz request.\n   * @param additionalParameters Additional parameters that handle\n   * issues related to the content of the VP Token.\n   * @returns The VP Token Request\n   */\n  async createVpTokenRequest(\n    clientAuthorizationEndpoint: string,\n    audience: string,\n    redirectUri: string,\n    presentationDefinition: RpTypes.PresentationDefinitionLocation,\n    requestPurpose: RpTypes.RequestPurpose,\n    additionalParameters?: RpTypes.CreateTokenRequestOptionalParams,\n  ) {\n    additionalParameters = {\n      ...{\n        responseMode: \"direct_post\",\n        scope: DEFAULT_SCOPE,\n        expirationTime: this.generalConfiguration.vpTokenExpirationTIme\n      },\n      ...additionalParameters\n    };\n    const { nonce, state } = this.createNonceForPostBaseAuthz(\n      requestPurpose,\n      \"vp_token\",\n      additionalParameters.state\n    );\n    const requestParams: VpTokenRequestParams = {\n      response_type: \"vp_token\",\n      scope: additionalParameters.scope!,\n      redirect_uri: redirectUri,\n      response_mode: additionalParameters.responseMode,\n      nonce: nonce,\n      client_id: this.metadata.issuer\n    };\n    if (additionalParameters.state) {\n      requestParams.state = additionalParameters.state;\n    }\n    match(presentationDefinition)\n      .with(\n        { type: \"Raw\" },\n        (data) => requestParams.presentation_definition = data.presentationDefinition)\n      .with(\n        { type: \"Uri\" },\n        (data) => requestParams.presentation_definition_uri = data.presentationDefinitionUri)\n      .exhaustive()\n    const vpToken = await this.signCallback({\n      aud: audience,\n      iss: this.metadata.issuer,\n      exp: state.timestamp + additionalParameters.expirationTime!,\n      ...requestParams,\n      ...additionalParameters.additionalPayload\n    },\n      this.metadata.request_object_signing_alg_values_supported\n    );\n    await this.nonceManager.saveNonce(nonce, state);\n    return new VpTokenRequest(\n      requestParams,\n      vpToken,\n      clientAuthorizationEndpoint\n    );\n  }\n\n  private createNonceForPostBaseAuthz(\n    purpose: RpTypes.RequestPurpose,\n    responseType: Extract<AuthzResponseType, \"id_token\" | \"vp_token\">,\n    state?: string\n  ): { nonce: string, state: NonceState } {\n    const nonceState = match(purpose)\n      .with({ type: \"Issuance\" }, (data) => {\n        let vcTypes: RequestVcTypes = {\n          type: \"Uknown\"\n        };\n        for (const details of purpose.verifiedBaseAuthzRequest.authzRequest.authorization_details!) {\n          // TODO: Revise this. Search for a better way to do it.\n          if (details.type === OPENID_CREDENTIAL_AUTHZ_DETAILS_TYPE) {\n            vcTypes = {\n              type: \"Know\",\n              vcTypes: details.types!\n            }\n            break;\n          }\n        }\n        if (data.verifiedBaseAuthzRequest.serviceWalletJWK) {\n          return {\n            type: \"PostBaseAuthz\",\n            timestamp: Date.now(),\n            sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            redirectUri: data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n            responseType: responseType,\n            state,\n            holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n            clientData: {\n              type: \"ServiceWallet\",\n              clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n              clientJwk: data.verifiedBaseAuthzRequest.serviceWalletJWK\n            },\n            operationType: {\n              type: \"Issuance\",\n              vcTypes: vcTypes\n            }\n          };\n        }\n        if (!data.verifiedBaseAuthzRequest.authzRequest.code_challenge\n          || !data.verifiedBaseAuthzRequest.authzRequest.code_challenge_method) {\n          throw new InvalidRequest(\"A code_challenge is required\");\n        }\n        return {\n          type: \"PostBaseAuthz\",\n          timestamp: Date.now(),\n          sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n          redirectUri: data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n          responseType: responseType,\n          state,\n          holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n          clientData: {\n            type: \"HolderWallet\",\n            clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            codeChallenge: data.verifiedBaseAuthzRequest.authzRequest.code_challenge!, // TODO: CHECK CODE CHALLENGE AND ERASE FORM AUTHZ\n            codeChallengeMethod: data.verifiedBaseAuthzRequest.authzRequest.code_challenge_method!\n          },\n          operationType: {\n            type: \"Issuance\",\n            vcTypes: vcTypes\n          }\n        };\n      })\n      .with({ type: \"Verification\" }, (data) => {\n        if (data.verifiedBaseAuthzRequest.serviceWalletJWK) {\n          return {\n            type: \"PostBaseAuthz\",\n            operationType: {\n              type: \"Verification\",\n              scope: data.verifiedBaseAuthzRequest.authzRequest.scope,\n            },\n            clientData: {\n              type: \"HolderWallet\",\n              clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            },\n            timestamp: Date.now(),\n            holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n            sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            redirectUri: data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n            responseType: responseType,\n          };\n        }\n        return {\n          type: \"PostBaseAuthz\",\n          operationType: {\n            type: \"Verification\",\n            scope: data.verifiedBaseAuthzRequest.authzRequest.scope,\n          },\n          clientData: {\n            type: \"ServiceWallet\",\n            clientJwk: data.verifiedBaseAuthzRequest.serviceWalletJWK!,\n            clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n          },\n          timestamp: Date.now(),\n          holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n          sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n          redirectUri: data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n          responseType: responseType,\n        };\n      })\n      .exhaustive() as NonceState;\n    return { nonce: uuidv4(), state: nonceState }\n  }\n\n  /**\n   * Allows to verify an authorisation request sent by a client\n   * @param request The request sent by the client\n   * @returns Verified Authz Reques with some of the client metadata extracted\n   */\n  async verifyBaseAuthzRequest(\n    request: AuthzRequestWithJWT,\n  ): Promise<RpTypes.VerifiedBaseAuthzRequest> {\n    // TODO: RESPONSE MODE SHOULD BE CHECKED\n    let params: AuthzRequest;\n    let jwk: JWK | undefined = undefined;\n    if (!request.request) {\n      params = request;\n    } else {\n      // TODO: ADD REQUEST_URI PARAMETER\n      if (this.metadata.request_parameter_supported === false) {\n        throw new InvalidRequest(\"Unsuported request parameter\");\n      }\n      const { header, payload } = decodeToken(request.request);\n      if (this.metadata.request_object_signing_alg_values_supported &&\n        !this.metadata.request_object_signing_alg_values_supported.includes(\n          header.alg as JWA_ALGS\n        )) {\n        throw new InvalidRequest(\"Unsuported request signing alg\");\n      }\n      params = payload as AuthzRequest;\n      if (\n        !params.client_metadata ||\n        \"jwks_uri\" in params.client_metadata === false\n      ) {\n        throw new InvalidRequest(\"Expected client metadata with jwks_uri\");\n      }\n      const keys = await fetchJWKs(params.client_metadata.jwks_uri);\n      if (!header.kid) {\n        throw new InvalidRequest(\"No kid specify in JWT header\");\n      }\n      jwk = selectJwkFromSet(keys, header.kid);\n      try {\n        await verifyJwtWithExpAndAudience(\n          request.request,\n          jwk,\n          this.metadata.issuer\n        );\n      } catch (error: any) {\n        throw new InvalidRequest(error.message);\n      }\n    }\n    params.client_metadata = await this.resolveClientMetadata(\n      params.client_metadata\n    );\n    const validatedClientMetadata = this.validateClientMetadata(\n      params.client_metadata\n    );\n    if (this.scopeVerificationFlag) {\n      if (this.metadata.scopes_supported &&\n        !this.metadata.scopes_supported.includes(params.scope)) {\n        throw new InvalidScope(\n          `Invalid scope specified: ${params.scope}`\n        );\n      }\n    }\n    if (params.authorization_details) {\n      for (const details of params.authorization_details) {\n        if (details.locations\n          && details.locations.length\n          && !details.locations.includes(this.metadata.issuer)) {\n          throw new InvalidRequest(\n            \"Location must contains Issuer client id value\"\n          );\n        }\n        if (this.authzDetailsVerification) {\n          const authDetailsVerificationResult =\n            await this.authzDetailsVerification(details);\n          if (authDetailsVerificationResult.isError()) {\n            throw new InvalidRequest(\n              `Invalid authorization details specified ` +\n              authDetailsVerificationResult.unwrapError()\n            );\n          }\n        }\n      }\n    }\n    if (this.issuerStateVerirication) {\n      if (!params.issuer_state) {\n        throw new InvalidRequest(`An \"issuer_state\" parameter is required`);\n      }\n      const issuerStateVerificationResult =\n        await this.issuerStateVerirication(params.issuer_state);\n      if (issuerStateVerificationResult.isError()) {\n        throw new InvalidRequest(\n          `Invalid \"issuer_state\" provided` +\n          issuerStateVerificationResult.unwrapError()\n        );\n      }\n    }\n    return {\n      validatedClientMetadata,\n      authzRequest: params,\n      serviceWalletJWK: jwk\n    }\n  }\n\n  private createNonceForPostAuthz(\n    nonceValue: string,\n    baseAuthzNonce: GeneralNonceData & PostBaseAuthzNonce,\n    subject: string\n  ): { nonce: string, state: NonceState } {\n    return {\n      nonce: nonceValue,\n      state: {\n        ...baseAuthzNonce,\n        type: \"PostAuthz\",\n        sub: subject\n      }\n    };\n  }\n\n  private async checkNonceStateForPostBaseAuthz(\n    nonce: string,\n    subject: string,\n    expectedResponseType: \"id_token\" | \"vp_token\",\n    state?: string\n  ): Promise<{\n    nonceState: NonceState,\n    redirectUri?: string,\n    holderState?: string\n  }> {\n    let nonceState: NonceState;\n    let redirectUri, holderState: string | undefined;\n    const nonceResult = await this.nonceManager.getPostBaseAuthzNonce(nonce);\n    if (nonceResult.isError()) {\n      const nonceResult = await this.nonceManager.getDirectRequestNonce(nonce);\n      if (nonceResult.isError()) {\n        throw new InvalidRequest(\"Invalid nonce specified\");\n      }\n      await this.nonceManager.deleteNonce(nonce);\n      nonceState = nonceResult.unwrap();\n      redirectUri = undefined;\n      holderState = undefined;\n    } else {\n      const prevNonce = nonceResult.unwrap();\n      if (prevNonce.responseType !== expectedResponseType) {\n        throw new InvalidRequest(\n          `Unexpected response type. An ${expectedResponseType} was expected.`\n        )\n      }\n      match(prevNonce.clientData)\n        .with({ type: \"HolderWallet\" }, (data) => {\n          if (!this.subjectComparison(data.clientId, subject)) {\n            throw new InvalidRequest(\n              \"The iss parameter does not coincide with the previously stated client id\"\n            );\n          }\n        })\n      if (prevNonce.state && prevNonce.state !== state) {\n        throw new InvalidRequest(\"Invalid state parameter\");\n      }\n      nonceState = prevNonce;\n      redirectUri = prevNonce.redirectUri;\n      holderState = prevNonce.holderState;\n    }\n    return {\n      nonceState: nonceState,\n      redirectUri,\n      holderState\n    };\n  }\n\n  /**\n   * Allows to verify an ID Token Response sent by a client\n   * @param idTokenResponse The authorisation response to verify\n   * @returns The verified ID Token Response with the DID Document of the\n   * associated token issuer.\n   * @throws If data provided is incorrect\n   */\n  async verifyIdTokenResponse(\n    idTokenResponse: IdTokenResponse,\n    checkTokenSignature: boolean = true\n  ): Promise<RpTypes.VerifiedIdTokenResponse> {\n    const { header, payload } = decodeToken(idTokenResponse.id_token);\n    const jwtPayload = payload as JwtPayload;\n    if (!jwtPayload.iss) {\n      throw new InvalidRequest(\"Id Token must contain 'iss' atribute\");\n    }\n    if (!jwtPayload.nonce) {\n      throw new InvalidRequest(\"No nonce paramater found in ID Token\");\n    }\n    const {\n      nonceState,\n      redirectUri,\n      holderState\n    } = await this.checkNonceStateForPostBaseAuthz(\n      jwtPayload.nonce,\n      jwtPayload.iss!,\n      \"id_token\",\n      jwtPayload.state\n    );\n    if (!jwtPayload.sub) {\n      throw new InvalidRequest(\n        \"Id Token must contain 'sub' atribute\", redirectUri, holderState\n      );\n    }\n    if (!header.kid) {\n      throw new InvalidRequest(\n        \"No kid paramater found in ID Token\", redirectUri, holderState\n      );\n    }\n    if (this.metadata.id_token_signing_alg_values_supported\n      && !this.metadata.id_token_signing_alg_values_supported.includes(header.alg as JWA_ALGS)) {\n      throw new InvalidRequest(\n        \"Unsuported signing alg for ID Token\", redirectUri, holderState\n      );\n    }\n    let didDocument: DIDDocument | undefined = undefined;\n    try {\n      if (checkTokenSignature) {\n        const didResolution = await this.didResolver.resolve(jwtPayload.iss);\n        if (didResolution.didResolutionMetadata.error) {\n          throw new UnauthorizedClient(\n            `Did resolution failed. Error ${didResolution.didResolutionMetadata.error\n            }: ${didResolution.didResolutionMetadata.message}`,\n            redirectUri,\n            holderState\n          );\n        }\n        didDocument = didResolution.didDocument!;\n        const publicKeyJwk = getAuthentificationJWKKeys(didDocument, header.kid);\n        await verifyJwtWithExpAndAudience(\n          idTokenResponse.id_token,\n          publicKeyJwk,\n          this.metadata.issuer\n        );\n      } else {\n        if (!jwtPayload.exp || jwtPayload.exp < Math.floor(Date.now() / 1000)) {\n          throw new InvalidRequest(\n            \"JWT is expired or does not have exp parameter\", redirectUri, holderState\n          );\n        }\n        if (!jwtPayload.aud || jwtPayload.aud !== this.metadata.issuer) {\n          throw new InvalidRequest(\n            \"JWT audience is invalid or is not defined\", redirectUri, holderState\n          );\n        }\n      }\n    } catch (error: any) {\n      throw new AccessDenied(\n        error.message, redirectUri, holderState\n      );\n    }\n    const {\n      authzCode,\n    } = await this.processNonceForPostAuthz(nonceState!, jwtPayload.nonce, jwtPayload.iss!);\n    return {\n      token: idTokenResponse.id_token,\n      didDocument,\n      subject: jwtPayload.sub,\n      authzCode,\n      state: holderState,\n      redirectUri: redirectUri\n    }\n  }\n\n  /**\n   * Allows to verify an VP Token Response sent by a client\n   * @param vpTokenResponse The authorisation response to verify\n   * @param presentationDefinition The presentation definition to use to\n   * verify the VP\n   * @param vcSignatureVerification A flag that can be used to specify if the signature\n   * of the VC should be checked. True by default\n   * @returns The verified VP Token Response with holder DID and the data\n   * extracted from the VCs of the VP\n   * @throws If data provided is incorrect\n   */\n  async verifyVpTokenResponse(\n    vpTokenResponse: VpTokenResponse,\n    presentationDefinition: DIFPresentationDefinition, // TODO: Convert this to a callback\n    vcSignatureVerification: boolean = true\n  ): Promise<RpTypes.VerifiedVpTokenResponse> {\n    if (!this.vpCredentialVerificationCallback) {\n      throw new InternalNonceError(\n        \"An VP Credential Verification callback must be provided in order to verify VPs\"\n      );\n    }\n    let nonceState: NonceState | undefined = undefined;\n    let redirectUri, holderState: string | undefined = undefined;\n    let clientId: string;\n    let nonceValue: string;\n    try {\n      const vpResolver = new VpResolver(\n        this.didResolver,\n        this.metadata.issuer,\n        this.vpCredentialVerificationCallback,\n        async (subject, nonce, state) => {\n          nonceValue = nonce;\n          // TODO: Update this\n          const tmp = await this.checkNonceStateForPostBaseAuthz(\n            nonce,\n            subject,\n            \"vp_token\",\n            state\n          );\n          nonceState = tmp.nonceState;\n          redirectUri = tmp.redirectUri;\n          holderState = tmp.holderState;\n          clientId = subject;\n          return Result.Ok(null);\n        },\n        vcSignatureVerification\n      );\n      const claimData = await vpResolver.verifyPresentation(\n        vpTokenResponse.vp_token,\n        presentationDefinition,\n        vpTokenResponse.presentation_submission\n      );\n      const {\n        authzCode,\n      } = await this.processNonceForPostAuthz(\n        nonceState!,\n        nonceValue!,\n        clientId!\n      );\n      return {\n        token: vpTokenResponse.vp_token,\n        vpInternalData: claimData,\n        authzCode,\n        state: holderState,\n        redirectUri: redirectUri\n      }\n    } catch (e: any) {\n      if (e instanceof OpenIdError) {\n        if (nonceState) {\n          e.redirectUri = redirectUri;\n          e.holderState = holderState;\n        }\n      }\n      throw e;\n    }\n  }\n\n  private async processNonceForPostAuthz(\n    prevNonce: NonceState,\n    nonceValue: string,\n    clientId: string\n  ) {\n    return match(prevNonce)\n      .with({ type: \"PostBaseAuthz\" }, async (data) => {\n        const {\n          nonce,\n          state\n        } = this.createNonceForPostAuthz(nonceValue!, data, clientId);\n        if (data.operationType.type === \"Issuance\") {\n          await this.nonceManager.updateNonce(nonce, state);\n        }\n        return {\n          authzCode: await this.signCallback({\n            aud: this.metadata.issuer,\n            iss: this.metadata.issuer,\n            sub: clientId, // TODO: This maybe needs to be the URI of the ServiceWallet\n            exp: Date.now() + AUTHZ_TOKEN_EXPIRATION_TIME * 1000, // TODO: Set configurable the exp time\n            nonce: nonce,\n          }),\n          holderState: data.holderState,\n          redirectUri: data.redirectUri\n        }\n      }).otherwise(() => {\n        return {\n          authzCode: undefined,\n          holderState: undefined,\n          redirectUri: undefined\n        }\n      });\n  }\n\n  private generateCNonce(\n    now: number,\n    subject: string,\n    exp: number,\n    nonceValue?: string,\n    prevNonce?: NonceState\n  ) {\n    let operationType: OperationTypeEnum;\n    if (prevNonce) {\n      operationType = prevNonce.operationType;\n    } else {\n      operationType = {\n        type: \"Issuance\",\n        vcTypes: {\n          type: \"Uknown\"\n        }\n      }\n    }\n    const nonceState: NonceState = {\n      type: \"ChallengeNonce\",\n      expirationTime: exp,\n      timestamp: now,\n      sub: subject,\n      operationType: operationType,\n    }\n    return { nonce: nonceValue ?? uuidv4(), state: nonceState }\n  }\n\n  /**\n   * Allows to generate a token response from a token request\n   * @param tokenRequest The token request sent by the client\n   * @param generateIdToken Flag indicating whether, together with\n   * the access token, an ID Token should be generated.\n   * @param tokenSignCallback Callback that manages the signature of the token.\n   * @param audience JWT \"aud\" to include in the generated access token\n   * @param authServerPublicKeyJwk The JWK used by the authServer to verify\n   * the authz code\n   * @returns Token response with the generated access token\n   * @throws If data provided is incorrect\n   */\n  async generateAccessToken(\n    tokenRequest: TokenRequest,\n    generateIdToken: boolean,\n    audience: string,\n    authServerPublicKeyJwk: JWK,\n  ): Promise<TokenResponse> {\n    let clientId: string;\n    let prevNonce: NonceState | undefined;\n    let nonceValue: string | undefined;\n    let additionalParams: Record<string, any> = {};\n    if (this.metadata.grant_types_supported\n      && !this.metadata.grant_types_supported.includes(tokenRequest.grant_type)) {\n      throw new UnsupportedGrantType(\n        `Grant type \"${tokenRequest.grant_type}\" not supported`\n      );\n    }\n    switch (tokenRequest.grant_type) {\n      case \"authorization_code\":\n        if (!tokenRequest.code) {\n          throw new InvalidGrant(\n            `Grant type \"${tokenRequest.grant_type}\" invalid parameters`\n          );\n        }\n        await verifyJwtWithExpAndAudience(\n          tokenRequest.code,\n          authServerPublicKeyJwk,\n          this.metadata.issuer\n        );\n        const { payload } = decodeToken(tokenRequest.code);\n        const jwtPayload = payload as JwtPayload;\n        const nonceResult = await this.nonceManager.getPostAuthz(jwtPayload.nonce!);\n        nonceValue = jwtPayload.nonce!;\n        if (nonceResult.isError()) {\n          throw new InvalidGrant(\"Invalid authorization code provided\");\n        }\n        prevNonce = nonceResult.unwrap();\n        await match(prevNonce.clientData)\n          .with({ type: \"HolderWallet\" }, async (data) => {\n            // TODO: Give an use to the code_challenge_method parameter\n            if (!await verifyChallenge(tokenRequest.code_verifier!, data.codeChallenge!)) {\n              throw new InvalidRequest(\"The code_verifier does not verify the challenge provided\");\n            }\n            if (!this.subjectComparison(data.clientId, jwtPayload.sub!)) {\n              throw new InvalidRequest(\"The token was issued for a diferent client id\");\n            }\n            // if (data.clientId !== jwtPayload.sub) {\n            //   throw new InvalidRequest(\"The token was issued for a diferent client id\");\n            // }\n          })\n          .with({ type: \"ServiceWallet\" }, async (data) => {\n            if (tokenRequest.client_assertion_type &&\n              tokenRequest.client_assertion_type ===\n              \"urn:ietf:params:oauth:client-assertion-type:jwt-bearer\") {\n              if (!tokenRequest.client_assertion) {\n                throw new InvalidRequest(`No \"client_assertion\" was provided`)\n              }\n              if (data.clientId !== tokenRequest.client_id) {\n                throw new InvalidRequest(\n                  \"The client ID specified does not coincide with the previously provided\"\n                )\n              }\n              await verifyJwtWithExpAndAudience(\n                tokenRequest.client_assertion,\n                data.clientJwk,\n                this.metadata.issuer\n              );\n            }\n          }).exhaustive();\n        await match(prevNonce.operationType)\n          .with({ type: \"Issuance\", vcTypes: { type: \"Know\", vcTypes: P.select() } }, async (types) => {\n            additionalParams = { vc_types: types }\n          })\n          .with({ type: \"Verification\" }, async (data) => {\n            additionalParams = { verification_scope: data.scope };\n          });\n        clientId = jwtPayload.sub! // This should be a DID\n        break;\n      case \"urn:ietf:params:oauth:grant-type:pre-authorized_code\":\n        if (!tokenRequest[\"pre-authorized_code\"]) {\n          throw new InvalidGrant(`Grant type \"${tokenRequest.grant_type}\" invalid parameters`);\n        }\n        if (!this.preAuthCallback) {\n          throw new InsufficienteParamaters(\n            `No verification callback was provided for \"${tokenRequest.grant_type}\" grant type`\n          );\n        }\n        const verificationResultPre = await this.preAuthCallback(\n          tokenRequest.client_id, tokenRequest[\"pre-authorized_code\"]!, tokenRequest.user_pin\n        );\n        if (verificationResultPre.isError()) {\n          throw new InvalidGrant(\n            `Invalid \"${tokenRequest.grant_type}\" provided ${verificationResultPre.unwrapError().message}`\n          );\n        }\n        clientId = verificationResultPre.unwrap();\n        if (tokenRequest.user_pin) {\n          additionalParams = { pin: tokenRequest.user_pin };\n        }\n        break;\n      case \"vp_token\":\n        // TODO: PENDING\n        if (!tokenRequest.vp_token) {\n          throw new InsufficienteParamaters(\n            `Grant type \"vp_token\" requires the \"vp_token\" parameter`\n          );\n        }\n        throw new InternalNonceError(\"Uninplemented\");\n    }\n    const now = Date.now();\n    const { nonce, state } = this.generateCNonce(\n      now,\n      clientId,\n      this.generalConfiguration.cNonceExpirationTime * 1000,\n      nonceValue,\n      prevNonce\n    );\n    const token = await this.signCallback({\n      aud: audience,\n      iss: this.metadata.issuer,\n      sub: clientId,\n      exp: now + this.generalConfiguration.accessTokenExpirationTime * 1000,\n      nonce: nonce,\n      ...additionalParams\n    });\n    if (prevNonce) {\n      await this.nonceManager.updateNonce(nonce, state);\n    } else {\n      await this.nonceManager.saveNonce(nonce, state);\n    }\n    const result: TokenResponse = {\n      access_token: token,\n      token_type: \"bearer\",\n      expires_in: this.generalConfiguration.accessTokenExpirationTime,\n      c_nonce: nonce,\n      c_nonce_expires_in: this.generalConfiguration.cNonceExpirationTime\n    };\n    if (generateIdToken) {\n      result.id_token = await this.signCallback({\n        iss: this.metadata.issuer,\n        sub: clientId,\n        exp: now + this.generalConfiguration.accessTokenExpirationTime * 1000,\n      },\n        this.metadata.id_token_signing_alg_values_supported\n      );\n    }\n    return result;\n  }\n\n  private validateClientMetadata(\n    clientMetadata: HolderMetadata\n  ): RpTypes.ValidatedClientMetadata {\n    const idTokenAlg: JWA_ALGS[] = [];\n    const vpFormats: VpFormatsSupported = {}\n    if (this.metadata.id_token_signing_alg_values_supported &&\n      clientMetadata.id_token_signing_alg_values_supported) {\n      for (const alg of clientMetadata.id_token_signing_alg_values_supported) {\n        if (this.metadata.id_token_signing_alg_values_supported.includes(alg as JWA_ALGS)) {\n          idTokenAlg.push(alg as JWA_ALGS);\n        }\n      }\n    }\n    if (this.metadata.vp_formats_supported) {\n      for (const format in clientMetadata!.vp_formats_supported) {\n        if (this.metadata.vp_formats_supported![format as keyof VpFormatsSupported]) {\n          const intersectArray: JWA_ALGS[] = [];\n          for (const alg of clientMetadata!.vp_formats_supported[\n            format as keyof VpFormatsSupported]?.alg_values_supported!) {\n            if (this.metadata.vp_formats_supported![\n              format as keyof VpFormatsSupported]?.alg_values_supported.includes(alg)) {\n              intersectArray.push(alg);\n            }\n          }\n          vpFormats[format as keyof VpFormatsSupported] = {\n            alg_values_supported: intersectArray\n          };\n        }\n      }\n    }\n    return {\n      responseTypesSupported: clientMetadata.response_types_supported ?? [],\n      idTokenAlg,\n      vpFormats,\n      authorizationEndpoint: clientMetadata.authorization_endpoint!\n    }\n  }\n\n  private async resolveClientMetadata(\n    metadata?: Record<string, any>\n  ): Promise<HolderMetadata | ServiceMetadata> {\n    return metadata ? { ...this.defaultHolderMetadata, ...metadata } : this.defaultHolderMetadata;\n  }\n}\n\nasync function fetchJWKs(url: string): Promise<JWK[]> {\n  try {\n    const response = await fetch(url);\n    const jwks: any = await response.json();\n    if (!jwks.keys) {\n      throw new InvalidRequest(\"No 'keys' paramater found\");\n    }\n    return jwks['keys'];\n  } catch (e: any) {\n    throw new InternalNonceError(`Can't recover credential issuer JWKs: ${e}`);\n  }\n}\n\nfunction selectJwkFromSet(jwks: JWK[], kid: string): JWK {\n  const jwk = jwks.find((jwk) => jwk.kid === kid);\n  if (!jwk) {\n    throw new InvalidRequest(`No JWK found with kid ${kid}`);\n  }\n  return jwk;\n}\n\nexport * from \"./types.js\";\nexport * from \"./builder.js\";\n"]}