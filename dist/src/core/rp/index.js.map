{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/core/rp/index.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,EAAE,IAAI,MAAM,EAAC,MAAM,MAAM,CAAC;AAClC,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,OAAO,EAAC,eAAe,EAAC,MAAM,gBAAgB,CAAC;AAC/C,OAAO,EAA0B,QAAQ,EAAC,MAAM,cAAc,CAAC;AAM/D,OAAO,EACL,WAAW,EACX,2BAA2B,GAC5B,MAAM,iCAAiC,CAAC;AAKzC,OAAO,EACL,2BAA2B,EAC3B,aAAa,EAEb,oCAAoC,GACrC,MAAM,iCAAiC,CAAC;AAKzC,OAAO,EACL,cAAc,GAEf,MAAM,0CAA0C,CAAC;AAIlD,OAAO,EAAC,0BAA0B,EAAC,MAAM,oCAAoC,CAAC;AAE9E,OAAO,EACL,YAAY,EACZ,uBAAuB,EACvB,kBAAkB,EAClB,YAAY,EACZ,cAAc,EACd,YAAY,EACZ,WAAW,EACX,kBAAkB,EAClB,oBAAoB,GACrB,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAC,UAAU,EAAC,MAAM,iCAAiC,CAAC;AAM3D,OAAO,EACL,cAAc,GAEf,MAAM,0CAA0C,CAAC;AAElD,OAAO,EAAC,CAAC,EAAE,KAAK,EAAC,MAAM,YAAY,CAAC;AACpC,OAAO,EAAC,MAAM,EAAC,MAAM,gCAAgC,CAAC;AAEtD,OAAO,EAAC,YAAY,EAAC,MAAM,mBAAmB,CAAC;AAS/C;;;;;;;;GAQG;AACH,MAAM,OAAO,mBAAmB;IA6BpB;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAGA;IAGA;IACA;IA3CF,YAAY,CAAe;IACnC;;;;;;;;;;;;;;;;;;;;;;;;;OAyBG;IACH,YACU,qBAAqC,EACrC,QAA4B,EAC5B,WAAqB,EACrB,YAAuC,EACvC,qBAA8B,EACtC,YAA0B,EAClB,iBAAiE,EACjE,oBAA6C,EAC7C,uBAEyB,EACzB,wBAEyB,EACzB,gCAAmE,EACnE,eAMgC;QArBhC,0BAAqB,GAArB,qBAAqB,CAAgB;QACrC,aAAQ,GAAR,QAAQ,CAAoB;QAC5B,gBAAW,GAAX,WAAW,CAAU;QACrB,iBAAY,GAAZ,YAAY,CAA2B;QACvC,0BAAqB,GAArB,qBAAqB,CAAS;QAE9B,sBAAiB,GAAjB,iBAAiB,CAAgD;QACjE,yBAAoB,GAApB,oBAAoB,CAAyB;QAC7C,4BAAuB,GAAvB,uBAAuB,CAEE;QACzB,6BAAwB,GAAxB,wBAAwB,CAEC;QACzB,qCAAgC,GAAhC,gCAAgC,CAAmC;QACnE,oBAAe,GAAf,eAAe,CAMiB;QAExC,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC;IACrD,CAAC;IAED;;;;;OAKG;IACH,YAAY,CAAC,UAAkB,EAAE,QAAoB;QACnD,MAAM,GAAG,GAAG,EAAgC,CAAC;QAC7C,GAAG,CAAC,UAAU,CAAC,GAAG,QAAQ,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,QAAQ,CAAC;YAC9B,GAAG,IAAI,CAAC,WAAW;YACnB,GAAG,GAAG;SACP,CAAC,CAAC;IACL,CAAC;IAED;;;;;;;;;;;;;;OAcG;IACH,KAAK,CAAC,oBAAoB,CACxB,2BAAmC,EACnC,QAAgB,EAChB,WAAmB,EACnB,cAAsC,EACtC,oBAA+D;QAE/D,oBAAoB,GAAG;YACrB,GAAG;gBACD,YAAY,EAAE,aAAa;gBAC3B,KAAK,EAAE,MAAM,EAAE;gBACf,KAAK,EAAE,aAAa;gBACpB,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,qBAAqB;aAChE;YACD,GAAG,oBAAoB;SACxB,CAAC;QACF,MAAM,EAAC,KAAK,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,2BAA2B,CACrD,cAAc,EACd,UAAU,EACV,oBAAoB,CAAC,KAAK,CAC3B,CAAC;QACF,MAAM,aAAa,GAAyB;YAC1C,aAAa,EAAE,UAAU;YACzB,KAAK,EAAE,oBAAoB,CAAC,KAAM;YAClC,YAAY,EAAE,WAAW;YACzB,aAAa,EAAE,oBAAoB,CAAC,YAAY;YAChD,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;SAChC,CAAC;QACF,IAAI,oBAAoB,CAAC,KAAK,EAAE,CAAC;YAC/B,aAAa,CAAC,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC;QACnD,CAAC;QACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CACrC;YACE,GAAG,EAAE,QAAQ;YACb,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;YACzB,GAAG,EAAE,KAAK,CAAC,SAAS,GAAG,oBAAoB,CAAC,cAAe;YAC3D,GAAG,aAAa;YAChB,GAAG,oBAAoB,CAAC,iBAAiB;SAC1C,EACD,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAC1D,CAAC;QACF,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAChD,OAAO,IAAI,cAAc,CACvB,aAAa,EACb,OAAO,EACP,2BAA2B,CAC5B,CAAC;IACJ,CAAC;IAED;;;;;;;;OAQG;IACH,KAAK,CAAC,mCAAmC,CACvC,sBAA8D,EAC9D,WAAmB,EACnB,oBAA+D;QAE/D,gFAAgF;QAChF,oBAAoB,GAAG;YACrB,GAAG;gBACD,YAAY,EAAE,aAAa;gBAC3B,KAAK,EAAE,aAAa;gBACpB,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,qBAAqB;aAChE;YACD,GAAG,oBAAoB;SACxB,CAAC;QACF,MAAM,UAAU,GAAe;YAC7B,IAAI,EAAE,eAAe;YACrB,aAAa,EAAE;gBACb,IAAI,EAAE,cAAc;gBACpB,KAAK,EAAE,oBAAoB,CAAC,KAAM;aACnC;YACD,YAAY,EAAE,UAAU;YACxB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;YACrB,GAAG,EAAE,2BAA2B;SACjC,CAAC;QACF,MAAM,KAAK,GAAG,MAAM,EAAE,CAAC;QACvB,MAAM,aAAa,GAAyB;YAC1C,aAAa,EAAE,UAAU;YACzB,KAAK,EAAE,oBAAoB,CAAC,KAAM;YAClC,YAAY,EAAE,WAAW;YACzB,aAAa,EAAE,oBAAoB,CAAC,YAAY;YAChD,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;SAChC,CAAC;QACF,IAAI,oBAAoB,CAAC,KAAK,EAAE,CAAC;YAC/B,aAAa,CAAC,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC;QACnD,CAAC;QACD,KAAK,CAAC,sBAAsB,CAAC;aAC1B,IAAI,CACH,EAAC,IAAI,EAAE,KAAK,EAAC,EACb,IAAI,CAAC,EAAE,CACL,CAAC,aAAa,CAAC,uBAAuB,GAAG,IAAI,CAAC,sBAAsB,CAAC,CACxE;aACA,IAAI,CACH,EAAC,IAAI,EAAE,KAAK,EAAC,EACb,IAAI,CAAC,EAAE,CACL,CAAC,aAAa,CAAC,2BAA2B;YACxC,IAAI,CAAC,yBAAyB,CAAC,CACpC;aACA,UAAU,EAAE,CAAC;QAChB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CACrC;YACE,GAAG,EAAE,2BAA2B;YAChC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;YACzB,GAAG,EAAE,UAAU,CAAC,SAAS,GAAG,oBAAoB,CAAC,cAAe;YAChE,GAAG,aAAa;YAChB,GAAG,oBAAoB,CAAC,iBAAiB;SAC1C,EACD,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAC1D,CAAC;QACF,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACrD,OAAO,IAAI,cAAc,CAAC,aAAa,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC;IAED;;;;;;;;;;;;;;;;OAgBG;IACH,KAAK,CAAC,oBAAoB,CACxB,2BAAmC,EACnC,QAAgB,EAChB,WAAmB,EACnB,sBAA8D,EAC9D,cAAsC,EACtC,oBAA+D;QAE/D,oBAAoB,GAAG;YACrB,GAAG;gBACD,YAAY,EAAE,aAAa;gBAC3B,KAAK,EAAE,aAAa;gBACpB,cAAc,EAAE,IAAI,CAAC,oBAAoB,CAAC,qBAAqB;aAChE;YACD,GAAG,oBAAoB;SACxB,CAAC;QACF,MAAM,EAAC,KAAK,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,2BAA2B,CACrD,cAAc,EACd,UAAU,EACV,oBAAoB,CAAC,KAAK,CAC3B,CAAC;QACF,MAAM,aAAa,GAAyB;YAC1C,aAAa,EAAE,UAAU;YACzB,KAAK,EAAE,oBAAoB,CAAC,KAAM;YAClC,YAAY,EAAE,WAAW;YACzB,aAAa,EAAE,oBAAoB,CAAC,YAAY;YAChD,KAAK,EAAE,KAAK;YACZ,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;SAChC,CAAC;QACF,IAAI,oBAAoB,CAAC,KAAK,EAAE,CAAC;YAC/B,aAAa,CAAC,KAAK,GAAG,oBAAoB,CAAC,KAAK,CAAC;QACnD,CAAC;QACD,KAAK,CAAC,sBAAsB,CAAC;aAC1B,IAAI,CACH,EAAC,IAAI,EAAE,KAAK,EAAC,EACb,IAAI,CAAC,EAAE,CACL,CAAC,aAAa,CAAC,uBAAuB,GAAG,IAAI,CAAC,sBAAsB,CAAC,CACxE;aACA,IAAI,CACH,EAAC,IAAI,EAAE,KAAK,EAAC,EACb,IAAI,CAAC,EAAE,CACL,CAAC,aAAa,CAAC,2BAA2B;YACxC,IAAI,CAAC,yBAAyB,CAAC,CACpC;aACA,UAAU,EAAE,CAAC;QAChB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,YAAY,CACrC;YACE,GAAG,EAAE,QAAQ;YACb,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;YACzB,GAAG,EAAE,KAAK,CAAC,SAAS,GAAG,oBAAoB,CAAC,cAAe;YAC3D,GAAG,aAAa;YAChB,GAAG,oBAAoB,CAAC,iBAAiB;SAC1C,EACD,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAC1D,CAAC;QACF,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAChD,OAAO,IAAI,cAAc,CACvB,aAAa,EACb,OAAO,EACP,2BAA2B,CAC5B,CAAC;IACJ,CAAC;IAEO,2BAA2B,CACjC,OAA+B,EAC/B,YAAiE,EACjE,KAAc;QAEd,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC;aAC9B,IAAI,CAAC,EAAC,IAAI,EAAE,UAAU,EAAC,EAAE,IAAI,CAAC,EAAE;YAC/B,IAAI,OAAO,GAAmB;gBAC5B,IAAI,EAAE,QAAQ;aACf,CAAC;YACF,KAAK,MAAM,OAAO,IAAI,OAAO,CAAC,wBAAwB,CAAC,YAAY;iBAChE,qBAAsB,EAAE,CAAC;gBAC1B,uDAAuD;gBACvD,IAAI,OAAO,CAAC,IAAI,KAAK,oCAAoC,EAAE,CAAC;oBAC1D,OAAO,GAAG;wBACR,IAAI,EAAE,MAAM;wBACZ,OAAO,EAAE,OAAO,CAAC,KAAM;qBACxB,CAAC;oBACF,MAAM;gBACR,CAAC;YACH,CAAC;YACD,IAAI,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,CAAC;gBACnD,OAAO;oBACL,IAAI,EAAE,eAAe;oBACrB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;oBACzD,WAAW,EACT,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;oBACzD,YAAY,EAAE,YAAY;oBAC1B,KAAK;oBACL,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;oBAC7D,UAAU,EAAE;wBACV,IAAI,EAAE,eAAe;wBACrB,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;wBAC9D,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,gBAAgB;qBAC1D;oBACD,aAAa,EAAE;wBACb,IAAI,EAAE,UAAU;wBAChB,OAAO,EAAE,OAAO;qBACjB;iBACF,CAAC;YACJ,CAAC;YACD,IACE,CAAC,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,cAAc;gBAC1D,CAAC,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,qBAAqB,EACjE,CAAC;gBACD,MAAM,IAAI,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAC3D,CAAC;YACD,OAAO;gBACL,IAAI,EAAE,eAAe;gBACrB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;gBACzD,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;gBACpE,YAAY,EAAE,YAAY;gBAC1B,KAAK;gBACL,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;gBAC7D,UAAU,EAAE;oBACV,IAAI,EAAE,cAAc;oBACpB,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;oBAC9D,aAAa,EACX,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,cAAe,EAAE,kDAAkD;oBAChH,mBAAmB,EACjB,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,qBAAsB;iBACpE;gBACD,aAAa,EAAE;oBACb,IAAI,EAAE,UAAU;oBAChB,OAAO,EAAE,OAAO;iBACjB;aACF,CAAC;QACJ,CAAC,CAAC;aACD,IAAI,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,EAAE,IAAI,CAAC,EAAE;YACnC,IAAI,IAAI,CAAC,wBAAwB,CAAC,gBAAgB,EAAE,CAAC;gBACnD,OAAO;oBACL,IAAI,EAAE,eAAe;oBACrB,aAAa,EAAE;wBACb,IAAI,EAAE,cAAc;wBACpB,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;qBACxD;oBACD,UAAU,EAAE;wBACV,IAAI,EAAE,cAAc;wBACpB,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;qBAC/D;oBACD,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;oBAC7D,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;oBACzD,WAAW,EACT,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;oBACzD,YAAY,EAAE,YAAY;iBAC3B,CAAC;YACJ,CAAC;YACD,OAAO;gBACL,IAAI,EAAE,eAAe;gBACrB,aAAa,EAAE;oBACb,IAAI,EAAE,cAAc;oBACpB,KAAK,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;iBACxD;gBACD,UAAU,EAAE;oBACV,IAAI,EAAE,eAAe;oBACrB,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,gBAAiB;oBAC1D,QAAQ,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;iBAC/D;gBACD,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;gBACrB,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,KAAK;gBAC7D,GAAG,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,SAAS;gBACzD,WAAW,EAAE,IAAI,CAAC,wBAAwB,CAAC,YAAY,CAAC,YAAY;gBACpE,YAAY,EAAE,YAAY;aAC3B,CAAC;QACJ,CAAC,CAAC;aACD,UAAU,EAAgB,CAAC;QAC9B,OAAO,EAAC,KAAK,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,UAAU,EAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,sBAAsB,CAC1B,OAA4B;QAE5B,wCAAwC;QACxC,IAAI,MAAoB,CAAC;QACzB,IAAI,GAAG,GAAoB,SAAS,CAAC;QACrC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACrB,MAAM,GAAG,OAAO,CAAC;QACnB,CAAC;aAAM,CAAC;YACN,kCAAkC;YAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,2BAA2B,KAAK,KAAK,EAAE,CAAC;gBACxD,MAAM,IAAI,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAC3D,CAAC;YACD,MAAM,EAAC,MAAM,EAAE,OAAO,EAAC,GAAG,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACvD,IACE,IAAI,CAAC,QAAQ,CAAC,2CAA2C;gBACzD,CAAC,IAAI,CAAC,QAAQ,CAAC,2CAA2C,CAAC,QAAQ,CACjE,MAAM,CAAC,GAAe,CACvB,EACD,CAAC;gBACD,MAAM,IAAI,cAAc,CAAC,gCAAgC,CAAC,CAAC;YAC7D,CAAC;YACD,MAAM,GAAG,OAAuB,CAAC;YACjC,IACE,CAAC,MAAM,CAAC,eAAe;gBACvB,UAAU,IAAI,MAAM,CAAC,eAAe,KAAK,KAAK,EAC9C,CAAC;gBACD,MAAM,IAAI,cAAc,CAAC,wCAAwC,CAAC,CAAC;YACrE,CAAC;YACD,MAAM,IAAI,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,MAAM,IAAI,cAAc,CAAC,8BAA8B,CAAC,CAAC;YAC3D,CAAC;YACD,GAAG,GAAG,gBAAgB,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YACzC,IAAI,CAAC;gBACH,MAAM,2BAA2B,CAC/B,OAAO,CAAC,OAAO,EACf,GAAG,EACH,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;YACJ,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAC1C,CAAC;QACH,CAAC;QACD,MAAM,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,qBAAqB,CACvD,MAAM,CAAC,eAAe,CACvB,CAAC;QACF,MAAM,uBAAuB,GAAG,IAAI,CAAC,sBAAsB,CACzD,MAAM,CAAC,eAAe,CACvB,CAAC;QACF,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC/B,IACE,IAAI,CAAC,QAAQ,CAAC,gBAAgB;gBAC9B,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EACtD,CAAC;gBACD,MAAM,IAAI,YAAY,CAAC,4BAA4B,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;YACrE,CAAC;QACH,CAAC;QACD,IAAI,MAAM,CAAC,qBAAqB,EAAE,CAAC;YACjC,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,qBAAqB,EAAE,CAAC;gBACnD,IACE,OAAO,CAAC,SAAS;oBACjB,OAAO,CAAC,SAAS,CAAC,MAAM;oBACxB,CAAC,OAAO,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,EACjD,CAAC;oBACD,MAAM,IAAI,cAAc,CACtB,+CAA+C,CAChD,CAAC;gBACJ,CAAC;gBACD,IAAI,IAAI,CAAC,wBAAwB,EAAE,CAAC;oBAClC,MAAM,6BAA6B,GACjC,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;oBAC/C,IAAI,6BAA6B,CAAC,OAAO,EAAE,EAAE,CAAC;wBAC5C,MAAM,IAAI,cAAc,CACtB,0CAA0C;4BACxC,6BAA6B,CAAC,WAAW,EAAE,CAC9C,CAAC;oBACJ,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,IAAI,CAAC,uBAAuB,EAAE,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;gBACzB,MAAM,IAAI,cAAc,CAAC,yCAAyC,CAAC,CAAC;YACtE,CAAC;YACD,MAAM,6BAA6B,GAAG,MAAM,IAAI,CAAC,uBAAuB,CACtE,MAAM,CAAC,YAAY,CACpB,CAAC;YACF,IAAI,6BAA6B,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC5C,MAAM,IAAI,cAAc,CACtB,iCAAiC;oBAC/B,6BAA6B,CAAC,WAAW,EAAE,CAC9C,CAAC;YACJ,CAAC;QACH,CAAC;QACD,OAAO;YACL,uBAAuB;YACvB,YAAY,EAAE,MAAM;YACpB,gBAAgB,EAAE,GAAG;SACtB,CAAC;IACJ,CAAC;IAEO,uBAAuB,CAC7B,UAAkB,EAClB,cAAqD,EACrD,OAAe;QAEf,OAAO;YACL,KAAK,EAAE,UAAU;YACjB,KAAK,EAAE;gBACL,GAAG,cAAc;gBACjB,IAAI,EAAE,WAAW;gBACjB,GAAG,EAAE,OAAO;aACb;SACF,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,+BAA+B,CAC3C,KAAa,EACb,OAAe,EACf,oBAA6C,EAC7C,KAAc;QAMd,IAAI,UAAsB,CAAC;QAC3B,IAAI,WAAW,EAAE,WAA+B,CAAC;QACjD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QACzE,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;YAC1B,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;YACzE,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;gBAC1B,MAAM,IAAI,cAAc,CAAC,yBAAyB,CAAC,CAAC;YACtD,CAAC;YACD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC3C,UAAU,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;YAClC,WAAW,GAAG,SAAS,CAAC;YACxB,WAAW,GAAG,SAAS,CAAC;QAC1B,CAAC;aAAM,CAAC;YACN,MAAM,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;YACvC,IAAI,SAAS,CAAC,YAAY,KAAK,oBAAoB,EAAE,CAAC;gBACpD,MAAM,IAAI,cAAc,CACtB,gCAAgC,oBAAoB,gBAAgB,CACrE,CAAC;YACJ,CAAC;YACD,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,EAAE,IAAI,CAAC,EAAE;gBAC9D,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,EAAE,CAAC;oBACpD,MAAM,IAAI,cAAc,CACtB,0EAA0E,CAC3E,CAAC;gBACJ,CAAC;YACH,CAAC,CAAC,CAAC;YACH,IAAI,SAAS,CAAC,KAAK,IAAI,SAAS,CAAC,KAAK,KAAK,KAAK,EAAE,CAAC;gBACjD,MAAM,IAAI,cAAc,CAAC,yBAAyB,CAAC,CAAC;YACtD,CAAC;YACD,UAAU,GAAG,SAAS,CAAC;YACvB,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;YACpC,WAAW,GAAG,SAAS,CAAC,WAAW,CAAC;QACtC,CAAC;QACD,OAAO;YACL,UAAU,EAAE,UAAU;YACtB,WAAW;YACX,WAAW;SACZ,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,qBAAqB,CACzB,eAAgC,EAChC,sBAA+B,IAAI;QAEnC,MAAM,EAAC,MAAM,EAAE,OAAO,EAAC,GAAG,WAAW,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC;QAChE,MAAM,UAAU,GAAG,OAAqB,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;YACpB,MAAM,IAAI,cAAc,CAAC,sCAAsC,CAAC,CAAC;QACnE,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,IAAI,cAAc,CAAC,sCAAsC,CAAC,CAAC;QACnE,CAAC;QACD,MAAM,EAAC,UAAU,EAAE,WAAW,EAAE,WAAW,EAAC,GAC1C,MAAM,IAAI,CAAC,+BAA+B,CACxC,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,GAAI,EACf,UAAU,EACV,UAAU,CAAC,KAAK,CACjB,CAAC;QACJ,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;YACpB,MAAM,IAAI,cAAc,CACtB,sCAAsC,EACtC,WAAW,EACX,WAAW,CACZ,CAAC;QACJ,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;YAChB,MAAM,IAAI,cAAc,CACtB,oCAAoC,EACpC,WAAW,EACX,WAAW,CACZ,CAAC;QACJ,CAAC;QACD,IACE,IAAI,CAAC,QAAQ,CAAC,qCAAqC;YACnD,CAAC,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CAAC,QAAQ,CAC3D,MAAM,CAAC,GAAe,CACvB,EACD,CAAC;YACD,MAAM,IAAI,cAAc,CACtB,qCAAqC,EACrC,WAAW,EACX,WAAW,CACZ,CAAC;QACJ,CAAC;QACD,IAAI,WAAW,GAA4B,SAAS,CAAC;QACrD,IAAI,CAAC;YACH,IAAI,mBAAmB,EAAE,CAAC;gBACxB,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;gBACrE,IAAI,aAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;oBAC9C,MAAM,IAAI,kBAAkB,CAC1B,gCACE,aAAa,CAAC,qBAAqB,CAAC,KACtC,KAAK,aAAa,CAAC,qBAAqB,CAAC,OAAO,EAAE,EAClD,WAAW,EACX,WAAW,CACZ,CAAC;gBACJ,CAAC;gBACD,WAAW,GAAG,aAAa,CAAC,WAAY,CAAC;gBACzC,MAAM,YAAY,GAAG,0BAA0B,CAC7C,WAAW,EACX,MAAM,CAAC,GAAG,CACX,CAAC;gBACF,MAAM,2BAA2B,CAC/B,eAAe,CAAC,QAAQ,EACxB,YAAY,EACZ,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;YACJ,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC;oBACtE,MAAM,IAAI,cAAc,CACtB,+CAA+C,EAC/C,WAAW,EACX,WAAW,CACZ,CAAC;gBACJ,CAAC;gBACD,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;oBAC/D,MAAM,IAAI,cAAc,CACtB,2CAA2C,EAC3C,WAAW,EACX,WAAW,CACZ,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QAAC,OAAO,KAAU,EAAE,CAAC;YACpB,MAAM,IAAI,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC;QAClE,CAAC;QACD,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,IAAI,CAAC,wBAAwB,CACrD,UAAW,EACX,UAAU,CAAC,KAAK,EAChB,UAAU,CAAC,GAAI,CAChB,CAAC;QACF,OAAO;YACL,KAAK,EAAE,eAAe,CAAC,QAAQ;YAC/B,WAAW;YACX,OAAO,EAAE,UAAU,CAAC,GAAG;YACvB,SAAS;YACT,KAAK,EAAE,WAAW;YAClB,WAAW,EAAE,WAAW;SACzB,CAAC;IACJ,CAAC;IAED;;;;;;;;;;OAUG;IACH,KAAK,CAAC,qBAAqB,CACzB,eAAgC,EAChC,sBAAiD,EAAE,mCAAmC;IACtF,0BAAmC,IAAI;QAEvC,IAAI,CAAC,IAAI,CAAC,gCAAgC,EAAE,CAAC;YAC3C,MAAM,IAAI,kBAAkB,CAC1B,gFAAgF,CACjF,CAAC;QACJ,CAAC;QACD,IAAI,UAAU,GAA2B,SAAS,CAAC;QACnD,IAAI,WAAW,EACb,WAAW,GAAuB,SAAS,CAAC;QAC9C,IAAI,QAAgB,CAAC;QACrB,IAAI,UAAkB,CAAC;QACvB,IAAI,CAAC;YACH,MAAM,UAAU,GAAG,IAAI,UAAU,CAC/B,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,CAAC,MAAM,EACpB,IAAI,CAAC,gCAAgC,EACrC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;gBAC9B,UAAU,GAAG,KAAK,CAAC;gBACnB,oBAAoB;gBACpB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,+BAA+B,CACpD,KAAK,EACL,OAAO,EACP,UAAU,EACV,KAAK,CACN,CAAC;gBACF,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC;gBAC5B,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;gBAC9B,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC;gBAC9B,QAAQ,GAAG,OAAO,CAAC;gBACnB,OAAO,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YACzB,CAAC,EACD,uBAAuB,CACxB,CAAC;YACF,MAAM,SAAS,GAAG,MAAM,UAAU,CAAC,kBAAkB,CACnD,eAAe,CAAC,QAAQ,EACxB,sBAAsB,EACtB,eAAe,CAAC,uBAAuB,CACxC,CAAC;YACF,MAAM,EAAC,SAAS,EAAC,GAAG,MAAM,IAAI,CAAC,wBAAwB,CACrD,UAAW,EACX,UAAW,EACX,QAAS,CACV,CAAC;YACF,OAAO;gBACL,KAAK,EAAE,eAAe,CAAC,QAAQ;gBAC/B,cAAc,EAAE,SAAS;gBACzB,SAAS;gBACT,KAAK,EAAE,WAAW;gBAClB,WAAW,EAAE,WAAW;aACzB,CAAC;QACJ,CAAC;QAAC,OAAO,CAAM,EAAE,CAAC;YAChB,IAAI,CAAC,YAAY,WAAW,EAAE,CAAC;gBAC7B,IAAI,UAAU,EAAE,CAAC;oBACf,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC5B,CAAC,CAAC,WAAW,GAAG,WAAW,CAAC;gBAC9B,CAAC;YACH,CAAC;YACD,MAAM,CAAC,CAAC;QACV,CAAC;IACH,CAAC;IAEO,KAAK,CAAC,wBAAwB,CACpC,SAAqB,EACrB,UAAkB,EAClB,QAAgB;QAEhB,OAAO,KAAK,CAAC,SAAS,CAAC;aACpB,IAAI,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;YAC1C,MAAM,EAAC,KAAK,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,uBAAuB,CACjD,UAAW,EACX,IAAI,EACJ,QAAQ,CACT,CAAC;YACF,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,KAAK,UAAU,EAAE,CAAC;gBAC3C,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YACpD,CAAC;YACD,OAAO;gBACL,SAAS,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC;oBACjC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;oBACzB,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;oBACzB,GAAG,EAAE,QAAQ,EAAE,4DAA4D;oBAC3E,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,GAAG,2BAA2B,GAAG,IAAI,EAAE,sCAAsC;oBAC5F,KAAK,EAAE,KAAK;iBACb,CAAC;gBACF,WAAW,EAAE,IAAI,CAAC,WAAW;gBAC7B,WAAW,EAAE,IAAI,CAAC,WAAW;aAC9B,CAAC;QACJ,CAAC,CAAC;aACD,SAAS,CAAC,GAAG,EAAE;YACd,OAAO;gBACL,SAAS,EAAE,SAAS;gBACpB,WAAW,EAAE,SAAS;gBACtB,WAAW,EAAE,SAAS;aACvB,CAAC;QACJ,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,cAAc,CACpB,GAAW,EACX,OAAe,EACf,GAAW,EACX,UAAmB,EACnB,SAAsB;QAEtB,IAAI,aAAgC,CAAC;QACrC,IAAI,SAAS,EAAE,CAAC;YACd,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC;QAC1C,CAAC;aAAM,CAAC;YACN,aAAa,GAAG;gBACd,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE;oBACP,IAAI,EAAE,QAAQ;iBACf;aACF,CAAC;QACJ,CAAC;QACD,MAAM,UAAU,GAAe;YAC7B,IAAI,EAAE,gBAAgB;YACtB,cAAc,EAAE,GAAG;YACnB,SAAS,EAAE,GAAG;YACd,GAAG,EAAE,OAAO;YACZ,aAAa,EAAE,aAAa;SAC7B,CAAC;QACF,OAAO,EAAC,KAAK,EAAE,UAAU,IAAI,MAAM,EAAE,EAAE,KAAK,EAAE,UAAU,EAAC,CAAC;IAC5D,CAAC;IAED;;;;;;;;;;;OAWG;IACH,KAAK,CAAC,mBAAmB,CACvB,YAA0B,EAC1B,eAAwB,EACxB,QAAgB,EAChB,sBAA2B;QAE3B,IAAI,QAAgB,CAAC;QACrB,IAAI,SAAiC,CAAC;QACtC,IAAI,UAA8B,CAAC;QACnC,IAAI,gBAAgB,GAAwB,EAAE,CAAC;QAC/C,IACE,IAAI,CAAC,QAAQ,CAAC,qBAAqB;YACnC,CAAC,IAAI,CAAC,QAAQ,CAAC,qBAAqB,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,CAAC,EACtE,CAAC;YACD,MAAM,IAAI,oBAAoB,CAC5B,eAAe,YAAY,CAAC,UAAU,iBAAiB,CACxD,CAAC;QACJ,CAAC;QACD,QAAQ,YAAY,CAAC,UAAU,EAAE,CAAC;YAChC,KAAK,oBAAoB,CAAC,CAAC,CAAC;gBAC1B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;oBACvB,MAAM,IAAI,YAAY,CACpB,eAAe,YAAY,CAAC,UAAU,sBAAsB,CAC7D,CAAC;gBACJ,CAAC;gBACD,MAAM,2BAA2B,CAC/B,YAAY,CAAC,IAAI,EACjB,sBAAsB,EACtB,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;gBACF,MAAM,EAAC,OAAO,EAAC,GAAG,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;gBACjD,MAAM,UAAU,GAAG,OAAqB,CAAC;gBACzC,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CACtD,UAAU,CAAC,KAAM,CAClB,CAAC;gBACF,UAAU,GAAG,UAAU,CAAC,KAAM,CAAC;gBAC/B,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC;oBAC1B,MAAM,IAAI,YAAY,CAAC,qCAAqC,CAAC,CAAC;gBAChE,CAAC;gBACD,SAAS,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC;gBACjC,MAAM,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC;qBAC9B,IAAI,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;oBACzC,2DAA2D;oBAC3D,IACE,CAAC,CAAC,MAAM,eAAe,CACrB,YAAY,CAAC,aAAc,EAC3B,IAAI,CAAC,aAAc,CACpB,CAAC,EACF,CAAC;wBACD,MAAM,IAAI,cAAc,CACtB,0DAA0D,CAC3D,CAAC;oBACJ,CAAC;oBACD,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAU,CAAC,GAAI,CAAC,EAAE,CAAC;wBAC5D,MAAM,IAAI,cAAc,CACtB,+CAA+C,CAChD,CAAC;oBACJ,CAAC;oBACD,0CAA0C;oBAC1C,+EAA+E;oBAC/E,IAAI;gBACN,CAAC,CAAC;qBACD,IAAI,CAAC,EAAC,IAAI,EAAE,eAAe,EAAC,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;oBAC1C,IACE,YAAY,CAAC,qBAAqB;wBAClC,YAAY,CAAC,qBAAqB;4BAChC,wDAAwD,EAC1D,CAAC;wBACD,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,CAAC;4BACnC,MAAM,IAAI,cAAc,CAAC,oCAAoC,CAAC,CAAC;wBACjE,CAAC;wBACD,IAAI,IAAI,CAAC,QAAQ,KAAK,YAAY,CAAC,SAAS,EAAE,CAAC;4BAC7C,MAAM,IAAI,cAAc,CACtB,wEAAwE,CACzE,CAAC;wBACJ,CAAC;wBACD,MAAM,2BAA2B,CAC/B,YAAY,CAAC,gBAAgB,EAC7B,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,QAAQ,CAAC,MAAM,CACrB,CAAC;oBACJ,CAAC;gBACH,CAAC,CAAC;qBACD,UAAU,EAAE,CAAC;gBAChB,MAAM,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC;qBACjC,IAAI,CACH,EAAC,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,MAAM,EAAE,EAAC,EAAC,EAChE,KAAK,EAAC,KAAK,EAAC,EAAE;oBACZ,gBAAgB,GAAG,EAAC,QAAQ,EAAE,KAAK,EAAC,CAAC;gBACvC,CAAC,CACF;qBACA,IAAI,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;oBACzC,gBAAgB,GAAG,EAAC,kBAAkB,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;gBACtD,CAAC,CAAC,CAAC;gBACL,QAAQ,GAAG,UAAU,CAAC,GAAI,CAAC,CAAC,uBAAuB;gBACnD,MAAM;YACR,CAAC;YACD,KAAK,sDAAsD,CAAC,CAAC,CAAC;gBAC5D,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,EAAE,CAAC;oBACzC,MAAM,IAAI,YAAY,CACpB,eAAe,YAAY,CAAC,UAAU,sBAAsB,CAC7D,CAAC;gBACJ,CAAC;gBACD,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC;oBAC1B,MAAM,IAAI,uBAAuB,CAC/B,8CAA8C,YAAY,CAAC,UAAU,cAAc,CACpF,CAAC;gBACJ,CAAC;gBACD,MAAM,qBAAqB,GAAG,MAAM,IAAI,CAAC,eAAe,CACtD,YAAY,CAAC,SAAS,EACtB,YAAY,CAAC,qBAAqB,CAAE,EACpC,YAAY,CAAC,QAAQ,CACtB,CAAC;gBACF,IAAI,qBAAqB,CAAC,OAAO,EAAE,EAAE,CAAC;oBACpC,MAAM,IAAI,YAAY,CACpB,YAAY,YAAY,CAAC,UAAU,cAAc,qBAAqB,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,CAC/F,CAAC;gBACJ,CAAC;gBACD,QAAQ,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC;gBAC1C,IAAI,YAAY,CAAC,QAAQ,EAAE,CAAC;oBAC1B,gBAAgB,GAAG,EAAC,GAAG,EAAE,YAAY,CAAC,QAAQ,EAAC,CAAC;gBAClD,CAAC;gBACD,MAAM;YACR,CAAC;YACD,KAAK,UAAU,CAAC,CAAC,CAAC;gBAChB,gBAAgB;gBAChB,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;oBAC3B,MAAM,IAAI,uBAAuB,CAC/B,yDAAyD,CAC1D,CAAC;gBACJ,CAAC;gBACD,MAAM,IAAI,kBAAkB,CAAC,eAAe,CAAC,CAAC;YAChD,CAAC;QACH,CAAC;QACD,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACvB,MAAM,EAAC,KAAK,EAAE,KAAK,EAAC,GAAG,IAAI,CAAC,cAAc,CACxC,GAAG,EACH,QAAQ,EACR,IAAI,CAAC,oBAAoB,CAAC,oBAAoB,GAAG,IAAI,EACrD,UAAU,EACV,SAAS,CACV,CAAC;QACF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC;YACpC,GAAG,EAAE,QAAQ;YACb,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;YACzB,GAAG,EAAE,QAAQ;YACb,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,GAAG,IAAI;YACrE,KAAK,EAAE,KAAK;YACZ,GAAG,gBAAgB;SACpB,CAAC,CAAC;QACH,IAAI,SAAS,EAAE,CAAC;YACd,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC;QACD,MAAM,MAAM,GAAkB;YAC5B,YAAY,EAAE,KAAK;YACnB,UAAU,EAAE,QAAQ;YACpB,UAAU,EAAE,IAAI,CAAC,oBAAoB,CAAC,yBAAyB;YAC/D,OAAO,EAAE,KAAK;YACd,kBAAkB,EAAE,IAAI,CAAC,oBAAoB,CAAC,oBAAoB;SACnE,CAAC;QACF,IAAI,eAAe,EAAE,CAAC;YACpB,MAAM,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,YAAY,CACvC;gBACE,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM;gBACzB,GAAG,EAAE,QAAQ;gBACb,GAAG,EAAE,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,yBAAyB,GAAG,IAAI;aACtE,EACD,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CACpD,CAAC;QACJ,CAAC;QACD,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,sBAAsB,CAC5B,cAA8B;QAE9B,MAAM,UAAU,GAAe,EAAE,CAAC;QAClC,MAAM,SAAS,GAAuB,EAAE,CAAC;QACzC,IACE,IAAI,CAAC,QAAQ,CAAC,qCAAqC;YACnD,cAAc,CAAC,qCAAqC,EACpD,CAAC;YACD,KAAK,MAAM,GAAG,IAAI,cAAc,CAAC,qCAAqC,EAAE,CAAC;gBACvE,IACE,IAAI,CAAC,QAAQ,CAAC,qCAAqC,CAAC,QAAQ,CAC1D,GAAe,CAChB,EACD,CAAC;oBACD,UAAU,CAAC,IAAI,CAAC,GAAe,CAAC,CAAC;gBACnC,CAAC;YACH,CAAC;QACH,CAAC;QACD,IAAI,IAAI,CAAC,QAAQ,CAAC,oBAAoB,EAAE,CAAC;YACvC,KAAK,MAAM,MAAM,IAAI,cAAc,CAAC,oBAAoB,EAAE,CAAC;gBACzD,IACE,IAAI,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAkC,CAAC,EACtE,CAAC;oBACD,MAAM,cAAc,GAAe,EAAE,CAAC;oBACtC,KAAK,MAAM,GAAG,IAAI,cAAc,CAAC,oBAAoB,CACnD,MAAkC,CAClC,CAAC,oBAAqB,EAAE,CAAC;wBACzB,IACE,IAAI,CAAC,QAAQ,CAAC,oBAAqB,CACjC,MAAkC,CACnC,EAAE,oBAAoB,CAAC,QAAQ,CAAC,GAAG,CAAC,EACrC,CAAC;4BACD,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAC3B,CAAC;oBACH,CAAC;oBACD,SAAS,CAAC,MAAkC,CAAC,GAAG;wBAC9C,oBAAoB,EAAE,cAAc;qBACrC,CAAC;gBACJ,CAAC;YACH,CAAC;QACH,CAAC;QACD,OAAO;YACL,sBAAsB,EAAE,cAAc,CAAC,wBAAwB,IAAI,EAAE;YACrE,UAAU;YACV,SAAS;YACT,qBAAqB,EAAE,cAAc,CAAC,sBAAuB;SAC9D,CAAC;IACJ,CAAC;IAEO,KAAK,CAAC,qBAAqB,CACjC,QAA8B;QAE9B,OAAO,QAAQ;YACb,CAAC,CAAC,EAAC,GAAG,IAAI,CAAC,qBAAqB,EAAE,GAAG,QAAQ,EAAC;YAC9C,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC;IACjC,CAAC;CACF;AAED,KAAK,UAAU,SAAS,CAAC,GAAW;IAClC,IAAI,CAAC;QACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,MAAM,IAAI,GAAQ,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACxC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;YACf,MAAM,IAAI,cAAc,CAAC,2BAA2B,CAAC,CAAC;QACxD,CAAC;QACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;IACtB,CAAC;IAAC,OAAO,CAAM,EAAE,CAAC;QAChB,MAAM,IAAI,kBAAkB,CAAC,yCAAyC,CAAC,EAAE,CAAC,CAAC;IAC7E,CAAC;AACH,CAAC;AAED,SAAS,gBAAgB,CAAC,IAAW,EAAE,GAAW;IAChD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;IAC9C,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,MAAM,IAAI,cAAc,CAAC,yBAAyB,GAAG,EAAE,CAAC,CAAC;IAC3D,CAAC;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAED,cAAc,YAAY,CAAC;AAC3B,cAAc,cAAc,CAAC","sourcesContent":["import {JWK} from 'jose';\nimport {v4 as uuidv4} from 'uuid';\nimport fetch from 'node-fetch';\nimport {JwtPayload} from 'jsonwebtoken';\nimport {verifyChallenge} from 'pkce-challenge';\nimport {DIDDocument, Resolvable, Resolver} from 'did-resolver';\nimport {AuthServerMetadata} from '../../common/interfaces/auth_server_metadata.interface.js';\nimport {\n  AuthzRequest,\n  AuthzRequestWithJWT,\n} from '../../common/interfaces/authz_request.interface.js';\nimport {\n  decodeToken,\n  verifyJwtWithExpAndAudience,\n} from '../../common/utils/jwt.utils.js';\nimport {\n  HolderMetadata,\n  ServiceMetadata,\n} from '../../common/interfaces/client_metadata.interface.js';\nimport {\n  AUTHZ_TOKEN_EXPIRATION_TIME,\n  DEFAULT_SCOPE,\n  JWA_ALGS,\n  OPENID_CREDENTIAL_AUTHZ_DETAILS_TYPE,\n} from '../../common/constants/index.js';\nimport {\n  AuthzResponseType,\n  VpFormatsSupported,\n} from '../../common/types/index.js';\nimport {\n  IdTokenRequest,\n  IdTokenRequestParams,\n} from '../../common/classes/id_token_request.js';\nimport {IdTokenResponse} from '../../common/interfaces/id_token_response.js';\nimport {TokenRequest} from '../../common/interfaces/token_request.interface.js';\nimport {TokenResponse} from '../../common/interfaces/token_response.interface.js';\nimport {getAuthentificationJWKKeys} from '../../common/utils/did_document.js';\nimport * as RpTypes from './types.js';\nimport {\n  AccessDenied,\n  InsufficienteParamaters,\n  InternalNonceError,\n  InvalidGrant,\n  InvalidRequest,\n  InvalidScope,\n  OpenIdError,\n  UnauthorizedClient,\n  UnsupportedGrantType,\n} from '../../common/classes/index.js';\nimport {VpResolver} from '../presentations/vp-resolver.js';\nimport {\n  AuthorizationDetails,\n  DIFPresentationDefinition,\n  VpTokenResponse,\n} from '../../common/index.js';\nimport {\n  VpTokenRequest,\n  VpTokenRequestParams,\n} from '../../common/classes/vp_token_request.js';\nimport {CredentialAdditionalVerification} from '../presentations/types.js';\nimport {P, match} from 'ts-pattern';\nimport {Result} from '../../common/classes/result.js';\nimport {StateManager} from '../state/index.js';\nimport {NonceManager} from '../nonce/index.js';\nimport {\n  GeneralNonceData,\n  NonceState,\n  OperationTypeEnum,\n  PostBaseAuthzNonce,\n  RequestVcTypes,\n} from '../nonce/types.js';\n\n/**\n * Represents an entity acting as a Reliying Party. As such, it has the\n * capability to process authorisation requests and to send others.\n * It can also issue access tokens.\n *\n * The \"grant_type\" \"authorisation_code\" and \"pre-authorised_code\" are supported\n * for authentication. The first one is always active. In order to facilitate the\n * building of the objects from this class, a builder has been developed.\n */\nexport class OpenIDReliyingParty {\n  private nonceManager: NonceManager;\n  /**\n   * @param defaultHolderMetadata Default metadata configuration for all Holder Wallets\n   * that establish contact. This configuration is overwritten dynamically with the\n   * data provided by these actors.\n   * @param metadata Authorisation server metadata\n   * @param didResolver Object responsible for obtaining the DID Documents\n   * of the DIDs that are detected.\n   * @param signCallback Callback used to sign any required data.\n   * @param scopeVerificationFlag Flag that control if the scope parameter\n   * should be checked against the \"scopes_supported\" params of the Auth server\n   * metadata\n   * @param stateManager: An implementation of a State Manager that will be used to\n   * store and control the lifetime of the nonces\n   * @param subjectComparison Function used to compare if two ID, most probably DIDs,\n   * are the same\n   * @param generalConfiguration Configuration about the different expiration times\n   * of the involved tokens\n   * @param issuerStateVerirication Optional callback that can be used to check the \"issuer state\"\n   * parameter, but only is provided\n   * @param authzDetailsVerification Optional callback that can be used to check\n   * the authorization details of a Authz Request, but only if provided\n   * @param vpCredentialVerificationCallback Optional callback that is used during\n   * VP verification to check the credential data agains the use case logic.\n   * @param preAuthCallback Optional callback that is used to check the validity\n   * of a Pre-Authorization Code\n   */\n  constructor(\n    private defaultHolderMetadata: HolderMetadata,\n    private metadata: AuthServerMetadata,\n    private didResolver: Resolver,\n    private signCallback: RpTypes.TokenSignCallback,\n    private scopeVerificationFlag: boolean,\n    stateManager: StateManager,\n    private subjectComparison: (firstId: string, secondId: string) => boolean,\n    private generalConfiguration: RpTypes.RpConfiguration,\n    private issuerStateVerirication?: (\n      state: string,\n    ) => Promise<Result<null, Error>>,\n    private authzDetailsVerification?: (\n      authDetails: AuthorizationDetails,\n    ) => Promise<Result<null, Error>>,\n    private vpCredentialVerificationCallback?: CredentialAdditionalVerification,\n    private preAuthCallback?:\n      | undefined\n      | ((\n          clientId: string | undefined,\n          preCode: string,\n          pin?: string,\n        ) => Promise<Result<string, Error>>),\n  ) {\n    this.nonceManager = new NonceManager(stateManager);\n  }\n\n  /**\n   * Allows to add support for a new DID Method\n   * @param methodName DID Method name\n   * @param resolver Object responsible for obtaining the DID Documents\n   * related to the DID specified\n   */\n  addDidMethod(methodName: string, resolver: Resolvable) {\n    const tmp = {} as Record<string, Resolvable>;\n    tmp[methodName] = resolver;\n    this.didResolver = new Resolver({\n      ...this.didResolver,\n      ...tmp,\n    });\n  }\n\n  /**\n   * Allows to create a new Authorisation request in which an ID Token\n   * is requested\n   * @param clientAuthorizationEndpoint Endpoint of the authorisation\n   * server of the client\n   * @param audience \"aud\" parameter for the generated JWT.\n   * @param redirectUri URI to which the client should deliver the\n   * authorisation response to\n   * @param requestPurpose Allows to specify if the end purpose of the token\n   * is for a VC issuance or for a verification and also allows to set\n   * a verified authz request.\n   * @param additionalParameters Additional parameters that handle\n   * issues related to the content of the ID Token.\n   * @returns The ID Token Request\n   */\n  async createIdTokenRequest(\n    clientAuthorizationEndpoint: string,\n    audience: string,\n    redirectUri: string,\n    requestPurpose: RpTypes.RequestPurpose,\n    additionalParameters?: RpTypes.CreateTokenRequestOptionalParams,\n  ): Promise<IdTokenRequest> {\n    additionalParameters = {\n      ...{\n        responseMode: 'direct_post',\n        nonce: uuidv4(),\n        scope: DEFAULT_SCOPE,\n        expirationTime: this.generalConfiguration.idTokenExpirationTime,\n      },\n      ...additionalParameters,\n    };\n    const {nonce, state} = this.createNonceForPostBaseAuthz(\n      requestPurpose,\n      'id_token',\n      additionalParameters.state,\n    );\n    const requestParams: IdTokenRequestParams = {\n      response_type: 'id_token',\n      scope: additionalParameters.scope!,\n      redirect_uri: redirectUri,\n      response_mode: additionalParameters.responseMode,\n      nonce: nonce,\n      client_id: this.metadata.issuer,\n    };\n    if (additionalParameters.state) {\n      requestParams.state = additionalParameters.state;\n    }\n    const idToken = await this.signCallback(\n      {\n        aud: audience,\n        iss: this.metadata.issuer,\n        exp: state.timestamp + additionalParameters.expirationTime!,\n        ...requestParams,\n        ...additionalParameters.additionalPayload,\n      },\n      this.metadata.request_object_signing_alg_values_supported,\n    );\n    await this.nonceManager.saveNonce(nonce, state);\n    return new IdTokenRequest(\n      requestParams,\n      idToken,\n      clientAuthorizationEndpoint,\n    );\n  }\n\n  /**\n   * Method that allows to build an VP Token Request directly, without\n   * the need of a previous Base Authz Request\n   * @param presentationDefinition The presentation definition to indicate to\n   * the user\n   * @param additionalParameters Additional parameters that handle\n   * issues related to the content of the VP Token.\n   * @returns A VP Token Request\n   */\n  async directVpTokenRequestForVerification(\n    presentationDefinition: RpTypes.PresentationDefinitionLocation,\n    redirectUri: string,\n    additionalParameters?: RpTypes.CreateTokenRequestOptionalParams,\n  ) {\n    // TODO: Refactor this method in the future. Too similar to createVpTokenRequest\n    additionalParameters = {\n      ...{\n        responseMode: 'direct_post',\n        scope: DEFAULT_SCOPE,\n        expirationTime: this.generalConfiguration.vpTokenExpirationTIme,\n      },\n      ...additionalParameters,\n    };\n    const nonceState: NonceState = {\n      type: 'DirectRequest',\n      operationType: {\n        type: 'Verification',\n        scope: additionalParameters.scope!,\n      },\n      responseType: 'vp_token',\n      timestamp: Date.now(),\n      sub: 'https://self-issued.me/v2',\n    };\n    const nonce = uuidv4();\n    const requestParams: VpTokenRequestParams = {\n      response_type: 'vp_token',\n      scope: additionalParameters.scope!,\n      redirect_uri: redirectUri,\n      response_mode: additionalParameters.responseMode,\n      nonce: nonce,\n      client_id: this.metadata.issuer,\n    };\n    if (additionalParameters.state) {\n      requestParams.state = additionalParameters.state;\n    }\n    match(presentationDefinition)\n      .with(\n        {type: 'Raw'},\n        data =>\n          (requestParams.presentation_definition = data.presentationDefinition),\n      )\n      .with(\n        {type: 'Uri'},\n        data =>\n          (requestParams.presentation_definition_uri =\n            data.presentationDefinitionUri),\n      )\n      .exhaustive();\n    const vpToken = await this.signCallback(\n      {\n        aud: 'https://self-issued.me/v2',\n        iss: this.metadata.issuer,\n        exp: nonceState.timestamp + additionalParameters.expirationTime!,\n        ...requestParams,\n        ...additionalParameters.additionalPayload,\n      },\n      this.metadata.request_object_signing_alg_values_supported,\n    );\n    await this.nonceManager.saveNonce(nonce, nonceState);\n    return new VpTokenRequest(requestParams, vpToken, '');\n  }\n\n  /**\n   * Allows to create a new Authorisation request in which an VP Token\n   * is requested\n   * @param clientAuthorizationEndpoint Endpoint of the authorisation\n   * server of the client\n   * @param audience \"aud\" parameter for the generated JWT.\n   * @param redirectUri URI to which the client should deliver the\n   * authorisation response to\n   * @param presentationDefinition Allows to define how the presentation\n   * definition is going to be specified for the user\n   * @param requestPurpose Allows to specify if the end purpose of the token\n   * is for a VC issuance or for a verification and also allows to set\n   * a verified authz request.\n   * @param additionalParameters Additional parameters that handle\n   * issues related to the content of the VP Token.\n   * @returns The VP Token Request\n   */\n  async createVpTokenRequest(\n    clientAuthorizationEndpoint: string,\n    audience: string,\n    redirectUri: string,\n    presentationDefinition: RpTypes.PresentationDefinitionLocation,\n    requestPurpose: RpTypes.RequestPurpose,\n    additionalParameters?: RpTypes.CreateTokenRequestOptionalParams,\n  ) {\n    additionalParameters = {\n      ...{\n        responseMode: 'direct_post',\n        scope: DEFAULT_SCOPE,\n        expirationTime: this.generalConfiguration.vpTokenExpirationTIme,\n      },\n      ...additionalParameters,\n    };\n    const {nonce, state} = this.createNonceForPostBaseAuthz(\n      requestPurpose,\n      'vp_token',\n      additionalParameters.state,\n    );\n    const requestParams: VpTokenRequestParams = {\n      response_type: 'vp_token',\n      scope: additionalParameters.scope!,\n      redirect_uri: redirectUri,\n      response_mode: additionalParameters.responseMode,\n      nonce: nonce,\n      client_id: this.metadata.issuer,\n    };\n    if (additionalParameters.state) {\n      requestParams.state = additionalParameters.state;\n    }\n    match(presentationDefinition)\n      .with(\n        {type: 'Raw'},\n        data =>\n          (requestParams.presentation_definition = data.presentationDefinition),\n      )\n      .with(\n        {type: 'Uri'},\n        data =>\n          (requestParams.presentation_definition_uri =\n            data.presentationDefinitionUri),\n      )\n      .exhaustive();\n    const vpToken = await this.signCallback(\n      {\n        aud: audience,\n        iss: this.metadata.issuer,\n        exp: state.timestamp + additionalParameters.expirationTime!,\n        ...requestParams,\n        ...additionalParameters.additionalPayload,\n      },\n      this.metadata.request_object_signing_alg_values_supported,\n    );\n    await this.nonceManager.saveNonce(nonce, state);\n    return new VpTokenRequest(\n      requestParams,\n      vpToken,\n      clientAuthorizationEndpoint,\n    );\n  }\n\n  private createNonceForPostBaseAuthz(\n    purpose: RpTypes.RequestPurpose,\n    responseType: Extract<AuthzResponseType, 'id_token' | 'vp_token'>,\n    state?: string,\n  ): {nonce: string; state: NonceState} {\n    const nonceState = match(purpose)\n      .with({type: 'Issuance'}, data => {\n        let vcTypes: RequestVcTypes = {\n          type: 'Uknown',\n        };\n        for (const details of purpose.verifiedBaseAuthzRequest.authzRequest\n          .authorization_details!) {\n          // TODO: Revise this. Search for a better way to do it.\n          if (details.type === OPENID_CREDENTIAL_AUTHZ_DETAILS_TYPE) {\n            vcTypes = {\n              type: 'Know',\n              vcTypes: details.types!,\n            };\n            break;\n          }\n        }\n        if (data.verifiedBaseAuthzRequest.serviceWalletJWK) {\n          return {\n            type: 'PostBaseAuthz',\n            timestamp: Date.now(),\n            sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            redirectUri:\n              data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n            responseType: responseType,\n            state,\n            holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n            clientData: {\n              type: 'ServiceWallet',\n              clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n              clientJwk: data.verifiedBaseAuthzRequest.serviceWalletJWK,\n            },\n            operationType: {\n              type: 'Issuance',\n              vcTypes: vcTypes,\n            },\n          };\n        }\n        if (\n          !data.verifiedBaseAuthzRequest.authzRequest.code_challenge ||\n          !data.verifiedBaseAuthzRequest.authzRequest.code_challenge_method\n        ) {\n          throw new InvalidRequest('A code_challenge is required');\n        }\n        return {\n          type: 'PostBaseAuthz',\n          timestamp: Date.now(),\n          sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n          redirectUri: data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n          responseType: responseType,\n          state,\n          holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n          clientData: {\n            type: 'HolderWallet',\n            clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            codeChallenge:\n              data.verifiedBaseAuthzRequest.authzRequest.code_challenge!, // TODO: CHECK CODE CHALLENGE AND ERASE FORM AUTHZ\n            codeChallengeMethod:\n              data.verifiedBaseAuthzRequest.authzRequest.code_challenge_method!,\n          },\n          operationType: {\n            type: 'Issuance',\n            vcTypes: vcTypes,\n          },\n        };\n      })\n      .with({type: 'Verification'}, data => {\n        if (data.verifiedBaseAuthzRequest.serviceWalletJWK) {\n          return {\n            type: 'PostBaseAuthz',\n            operationType: {\n              type: 'Verification',\n              scope: data.verifiedBaseAuthzRequest.authzRequest.scope,\n            },\n            clientData: {\n              type: 'HolderWallet',\n              clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            },\n            timestamp: Date.now(),\n            holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n            sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n            redirectUri:\n              data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n            responseType: responseType,\n          };\n        }\n        return {\n          type: 'PostBaseAuthz',\n          operationType: {\n            type: 'Verification',\n            scope: data.verifiedBaseAuthzRequest.authzRequest.scope,\n          },\n          clientData: {\n            type: 'ServiceWallet',\n            clientJwk: data.verifiedBaseAuthzRequest.serviceWalletJWK!,\n            clientId: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n          },\n          timestamp: Date.now(),\n          holderState: data.verifiedBaseAuthzRequest.authzRequest.state,\n          sub: data.verifiedBaseAuthzRequest.authzRequest.client_id,\n          redirectUri: data.verifiedBaseAuthzRequest.authzRequest.redirect_uri,\n          responseType: responseType,\n        };\n      })\n      .exhaustive() as NonceState;\n    return {nonce: uuidv4(), state: nonceState};\n  }\n\n  /**\n   * Allows to verify an authorisation request sent by a client\n   * @param request The request sent by the client\n   * @returns Verified Authz Reques with some of the client metadata extracted\n   */\n  async verifyBaseAuthzRequest(\n    request: AuthzRequestWithJWT,\n  ): Promise<RpTypes.VerifiedBaseAuthzRequest> {\n    // TODO: RESPONSE MODE SHOULD BE CHECKED\n    let params: AuthzRequest;\n    let jwk: JWK | undefined = undefined;\n    if (!request.request) {\n      params = request;\n    } else {\n      // TODO: ADD REQUEST_URI PARAMETER\n      if (this.metadata.request_parameter_supported === false) {\n        throw new InvalidRequest('Unsuported request parameter');\n      }\n      const {header, payload} = decodeToken(request.request);\n      if (\n        this.metadata.request_object_signing_alg_values_supported &&\n        !this.metadata.request_object_signing_alg_values_supported.includes(\n          header.alg as JWA_ALGS,\n        )\n      ) {\n        throw new InvalidRequest('Unsuported request signing alg');\n      }\n      params = payload as AuthzRequest;\n      if (\n        !params.client_metadata ||\n        'jwks_uri' in params.client_metadata === false\n      ) {\n        throw new InvalidRequest('Expected client metadata with jwks_uri');\n      }\n      const keys = await fetchJWKs(params.client_metadata.jwks_uri);\n      if (!header.kid) {\n        throw new InvalidRequest('No kid specify in JWT header');\n      }\n      jwk = selectJwkFromSet(keys, header.kid);\n      try {\n        await verifyJwtWithExpAndAudience(\n          request.request,\n          jwk,\n          this.metadata.issuer,\n        );\n      } catch (error: any) {\n        throw new InvalidRequest(error.message);\n      }\n    }\n    params.client_metadata = await this.resolveClientMetadata(\n      params.client_metadata,\n    );\n    const validatedClientMetadata = this.validateClientMetadata(\n      params.client_metadata,\n    );\n    if (this.scopeVerificationFlag) {\n      if (\n        this.metadata.scopes_supported &&\n        !this.metadata.scopes_supported.includes(params.scope)\n      ) {\n        throw new InvalidScope(`Invalid scope specified: ${params.scope}`);\n      }\n    }\n    if (params.authorization_details) {\n      for (const details of params.authorization_details) {\n        if (\n          details.locations &&\n          details.locations.length &&\n          !details.locations.includes(this.metadata.issuer)\n        ) {\n          throw new InvalidRequest(\n            'Location must contains Issuer client id value',\n          );\n        }\n        if (this.authzDetailsVerification) {\n          const authDetailsVerificationResult =\n            await this.authzDetailsVerification(details);\n          if (authDetailsVerificationResult.isError()) {\n            throw new InvalidRequest(\n              'Invalid authorization details specified ' +\n                authDetailsVerificationResult.unwrapError(),\n            );\n          }\n        }\n      }\n    }\n    if (this.issuerStateVerirication) {\n      if (!params.issuer_state) {\n        throw new InvalidRequest('An \"issuer_state\" parameter is required');\n      }\n      const issuerStateVerificationResult = await this.issuerStateVerirication(\n        params.issuer_state,\n      );\n      if (issuerStateVerificationResult.isError()) {\n        throw new InvalidRequest(\n          'Invalid \"issuer_state\" provided' +\n            issuerStateVerificationResult.unwrapError(),\n        );\n      }\n    }\n    return {\n      validatedClientMetadata,\n      authzRequest: params,\n      serviceWalletJWK: jwk,\n    };\n  }\n\n  private createNonceForPostAuthz(\n    nonceValue: string,\n    baseAuthzNonce: GeneralNonceData & PostBaseAuthzNonce,\n    subject: string,\n  ): {nonce: string; state: NonceState} {\n    return {\n      nonce: nonceValue,\n      state: {\n        ...baseAuthzNonce,\n        type: 'PostAuthz',\n        sub: subject,\n      },\n    };\n  }\n\n  private async checkNonceStateForPostBaseAuthz(\n    nonce: string,\n    subject: string,\n    expectedResponseType: 'id_token' | 'vp_token',\n    state?: string,\n  ): Promise<{\n    nonceState: NonceState;\n    redirectUri?: string;\n    holderState?: string;\n  }> {\n    let nonceState: NonceState;\n    let redirectUri, holderState: string | undefined;\n    const nonceResult = await this.nonceManager.getPostBaseAuthzNonce(nonce);\n    if (nonceResult.isError()) {\n      const nonceResult = await this.nonceManager.getDirectRequestNonce(nonce);\n      if (nonceResult.isError()) {\n        throw new InvalidRequest('Invalid nonce specified');\n      }\n      await this.nonceManager.deleteNonce(nonce);\n      nonceState = nonceResult.unwrap();\n      redirectUri = undefined;\n      holderState = undefined;\n    } else {\n      const prevNonce = nonceResult.unwrap();\n      if (prevNonce.responseType !== expectedResponseType) {\n        throw new InvalidRequest(\n          `Unexpected response type. An ${expectedResponseType} was expected.`,\n        );\n      }\n      match(prevNonce.clientData).with({type: 'HolderWallet'}, data => {\n        if (!this.subjectComparison(data.clientId, subject)) {\n          throw new InvalidRequest(\n            'The iss parameter does not coincide with the previously stated client id',\n          );\n        }\n      });\n      if (prevNonce.state && prevNonce.state !== state) {\n        throw new InvalidRequest('Invalid state parameter');\n      }\n      nonceState = prevNonce;\n      redirectUri = prevNonce.redirectUri;\n      holderState = prevNonce.holderState;\n    }\n    return {\n      nonceState: nonceState,\n      redirectUri,\n      holderState,\n    };\n  }\n\n  /**\n   * Allows to verify an ID Token Response sent by a client\n   * @param idTokenResponse The authorisation response to verify\n   * @returns The verified ID Token Response with the DID Document of the\n   * associated token issuer.\n   * @throws If data provided is incorrect\n   */\n  async verifyIdTokenResponse(\n    idTokenResponse: IdTokenResponse,\n    checkTokenSignature: boolean = true,\n  ): Promise<RpTypes.VerifiedIdTokenResponse> {\n    const {header, payload} = decodeToken(idTokenResponse.id_token);\n    const jwtPayload = payload as JwtPayload;\n    if (!jwtPayload.iss) {\n      throw new InvalidRequest(\"Id Token must contain 'iss' atribute\");\n    }\n    if (!jwtPayload.nonce) {\n      throw new InvalidRequest('No nonce paramater found in ID Token');\n    }\n    const {nonceState, redirectUri, holderState} =\n      await this.checkNonceStateForPostBaseAuthz(\n        jwtPayload.nonce,\n        jwtPayload.iss!,\n        'id_token',\n        jwtPayload.state,\n      );\n    if (!jwtPayload.sub) {\n      throw new InvalidRequest(\n        \"Id Token must contain 'sub' atribute\",\n        redirectUri,\n        holderState,\n      );\n    }\n    if (!header.kid) {\n      throw new InvalidRequest(\n        'No kid paramater found in ID Token',\n        redirectUri,\n        holderState,\n      );\n    }\n    if (\n      this.metadata.id_token_signing_alg_values_supported &&\n      !this.metadata.id_token_signing_alg_values_supported.includes(\n        header.alg as JWA_ALGS,\n      )\n    ) {\n      throw new InvalidRequest(\n        'Unsuported signing alg for ID Token',\n        redirectUri,\n        holderState,\n      );\n    }\n    let didDocument: DIDDocument | undefined = undefined;\n    try {\n      if (checkTokenSignature) {\n        const didResolution = await this.didResolver.resolve(jwtPayload.iss);\n        if (didResolution.didResolutionMetadata.error) {\n          throw new UnauthorizedClient(\n            `Did resolution failed. Error ${\n              didResolution.didResolutionMetadata.error\n            }: ${didResolution.didResolutionMetadata.message}`,\n            redirectUri,\n            holderState,\n          );\n        }\n        didDocument = didResolution.didDocument!;\n        const publicKeyJwk = getAuthentificationJWKKeys(\n          didDocument,\n          header.kid,\n        );\n        await verifyJwtWithExpAndAudience(\n          idTokenResponse.id_token,\n          publicKeyJwk,\n          this.metadata.issuer,\n        );\n      } else {\n        if (!jwtPayload.exp || jwtPayload.exp < Math.floor(Date.now() / 1000)) {\n          throw new InvalidRequest(\n            'JWT is expired or does not have exp parameter',\n            redirectUri,\n            holderState,\n          );\n        }\n        if (!jwtPayload.aud || jwtPayload.aud !== this.metadata.issuer) {\n          throw new InvalidRequest(\n            'JWT audience is invalid or is not defined',\n            redirectUri,\n            holderState,\n          );\n        }\n      }\n    } catch (error: any) {\n      throw new AccessDenied(error.message, redirectUri, holderState);\n    }\n    const {authzCode} = await this.processNonceForPostAuthz(\n      nonceState!,\n      jwtPayload.nonce,\n      jwtPayload.iss!,\n    );\n    return {\n      token: idTokenResponse.id_token,\n      didDocument,\n      subject: jwtPayload.sub,\n      authzCode,\n      state: holderState,\n      redirectUri: redirectUri,\n    };\n  }\n\n  /**\n   * Allows to verify an VP Token Response sent by a client\n   * @param vpTokenResponse The authorisation response to verify\n   * @param presentationDefinition The presentation definition to use to\n   * verify the VP\n   * @param vcSignatureVerification A flag that can be used to specify if the signature\n   * of the VC should be checked. True by default\n   * @returns The verified VP Token Response with holder DID and the data\n   * extracted from the VCs of the VP\n   * @throws If data provided is incorrect\n   */\n  async verifyVpTokenResponse(\n    vpTokenResponse: VpTokenResponse,\n    presentationDefinition: DIFPresentationDefinition, // TODO: Convert this to a callback\n    vcSignatureVerification: boolean = true,\n  ): Promise<RpTypes.VerifiedVpTokenResponse> {\n    if (!this.vpCredentialVerificationCallback) {\n      throw new InternalNonceError(\n        'An VP Credential Verification callback must be provided in order to verify VPs',\n      );\n    }\n    let nonceState: NonceState | undefined = undefined;\n    let redirectUri,\n      holderState: string | undefined = undefined;\n    let clientId: string;\n    let nonceValue: string;\n    try {\n      const vpResolver = new VpResolver(\n        this.didResolver,\n        this.metadata.issuer,\n        this.vpCredentialVerificationCallback,\n        async (subject, nonce, state) => {\n          nonceValue = nonce;\n          // TODO: Update this\n          const tmp = await this.checkNonceStateForPostBaseAuthz(\n            nonce,\n            subject,\n            'vp_token',\n            state,\n          );\n          nonceState = tmp.nonceState;\n          redirectUri = tmp.redirectUri;\n          holderState = tmp.holderState;\n          clientId = subject;\n          return Result.Ok(null);\n        },\n        vcSignatureVerification,\n      );\n      const claimData = await vpResolver.verifyPresentation(\n        vpTokenResponse.vp_token,\n        presentationDefinition,\n        vpTokenResponse.presentation_submission,\n      );\n      const {authzCode} = await this.processNonceForPostAuthz(\n        nonceState!,\n        nonceValue!,\n        clientId!,\n      );\n      return {\n        token: vpTokenResponse.vp_token,\n        vpInternalData: claimData,\n        authzCode,\n        state: holderState,\n        redirectUri: redirectUri,\n      };\n    } catch (e: any) {\n      if (e instanceof OpenIdError) {\n        if (nonceState) {\n          e.redirectUri = redirectUri;\n          e.holderState = holderState;\n        }\n      }\n      throw e;\n    }\n  }\n\n  private async processNonceForPostAuthz(\n    prevNonce: NonceState,\n    nonceValue: string,\n    clientId: string,\n  ) {\n    return match(prevNonce)\n      .with({type: 'PostBaseAuthz'}, async data => {\n        const {nonce, state} = this.createNonceForPostAuthz(\n          nonceValue!,\n          data,\n          clientId,\n        );\n        if (data.operationType.type === 'Issuance') {\n          await this.nonceManager.updateNonce(nonce, state);\n        }\n        return {\n          authzCode: await this.signCallback({\n            aud: this.metadata.issuer,\n            iss: this.metadata.issuer,\n            sub: clientId, // TODO: This maybe needs to be the URI of the ServiceWallet\n            exp: Date.now() + AUTHZ_TOKEN_EXPIRATION_TIME * 1000, // TODO: Set configurable the exp time\n            nonce: nonce,\n          }),\n          holderState: data.holderState,\n          redirectUri: data.redirectUri,\n        };\n      })\n      .otherwise(() => {\n        return {\n          authzCode: undefined,\n          holderState: undefined,\n          redirectUri: undefined,\n        };\n      });\n  }\n\n  private generateCNonce(\n    now: number,\n    subject: string,\n    exp: number,\n    nonceValue?: string,\n    prevNonce?: NonceState,\n  ) {\n    let operationType: OperationTypeEnum;\n    if (prevNonce) {\n      operationType = prevNonce.operationType;\n    } else {\n      operationType = {\n        type: 'Issuance',\n        vcTypes: {\n          type: 'Uknown',\n        },\n      };\n    }\n    const nonceState: NonceState = {\n      type: 'ChallengeNonce',\n      expirationTime: exp,\n      timestamp: now,\n      sub: subject,\n      operationType: operationType,\n    };\n    return {nonce: nonceValue ?? uuidv4(), state: nonceState};\n  }\n\n  /**\n   * Allows to generate a token response from a token request\n   * @param tokenRequest The token request sent by the client\n   * @param generateIdToken Flag indicating whether, together with\n   * the access token, an ID Token should be generated.\n   * @param tokenSignCallback Callback that manages the signature of the token.\n   * @param audience JWT \"aud\" to include in the generated access token\n   * @param authServerPublicKeyJwk The JWK used by the authServer to verify\n   * the authz code\n   * @returns Token response with the generated access token\n   * @throws If data provided is incorrect\n   */\n  async generateAccessToken(\n    tokenRequest: TokenRequest,\n    generateIdToken: boolean,\n    audience: string,\n    authServerPublicKeyJwk: JWK,\n  ): Promise<TokenResponse> {\n    let clientId: string;\n    let prevNonce: NonceState | undefined;\n    let nonceValue: string | undefined;\n    let additionalParams: Record<string, any> = {};\n    if (\n      this.metadata.grant_types_supported &&\n      !this.metadata.grant_types_supported.includes(tokenRequest.grant_type)\n    ) {\n      throw new UnsupportedGrantType(\n        `Grant type \"${tokenRequest.grant_type}\" not supported`,\n      );\n    }\n    switch (tokenRequest.grant_type) {\n      case 'authorization_code': {\n        if (!tokenRequest.code) {\n          throw new InvalidGrant(\n            `Grant type \"${tokenRequest.grant_type}\" invalid parameters`,\n          );\n        }\n        await verifyJwtWithExpAndAudience(\n          tokenRequest.code,\n          authServerPublicKeyJwk,\n          this.metadata.issuer,\n        );\n        const {payload} = decodeToken(tokenRequest.code);\n        const jwtPayload = payload as JwtPayload;\n        const nonceResult = await this.nonceManager.getPostAuthz(\n          jwtPayload.nonce!,\n        );\n        nonceValue = jwtPayload.nonce!;\n        if (nonceResult.isError()) {\n          throw new InvalidGrant('Invalid authorization code provided');\n        }\n        prevNonce = nonceResult.unwrap();\n        await match(prevNonce.clientData)\n          .with({type: 'HolderWallet'}, async data => {\n            // TODO: Give an use to the code_challenge_method parameter\n            if (\n              !(await verifyChallenge(\n                tokenRequest.code_verifier!,\n                data.codeChallenge!,\n              ))\n            ) {\n              throw new InvalidRequest(\n                'The code_verifier does not verify the challenge provided',\n              );\n            }\n            if (!this.subjectComparison(data.clientId, jwtPayload.sub!)) {\n              throw new InvalidRequest(\n                'The token was issued for a diferent client id',\n              );\n            }\n            // if (data.clientId !== jwtPayload.sub) {\n            //   throw new InvalidRequest(\"The token was issued for a diferent client id\");\n            // }\n          })\n          .with({type: 'ServiceWallet'}, async data => {\n            if (\n              tokenRequest.client_assertion_type &&\n              tokenRequest.client_assertion_type ===\n                'urn:ietf:params:oauth:client-assertion-type:jwt-bearer'\n            ) {\n              if (!tokenRequest.client_assertion) {\n                throw new InvalidRequest('No \"client_assertion\" was provided');\n              }\n              if (data.clientId !== tokenRequest.client_id) {\n                throw new InvalidRequest(\n                  'The client ID specified does not coincide with the previously provided',\n                );\n              }\n              await verifyJwtWithExpAndAudience(\n                tokenRequest.client_assertion,\n                data.clientJwk,\n                this.metadata.issuer,\n              );\n            }\n          })\n          .exhaustive();\n        await match(prevNonce.operationType)\n          .with(\n            {type: 'Issuance', vcTypes: {type: 'Know', vcTypes: P.select()}},\n            async types => {\n              additionalParams = {vc_types: types};\n            },\n          )\n          .with({type: 'Verification'}, async data => {\n            additionalParams = {verification_scope: data.scope};\n          });\n        clientId = jwtPayload.sub!; // This should be a DID\n        break;\n      }\n      case 'urn:ietf:params:oauth:grant-type:pre-authorized_code': {\n        if (!tokenRequest['pre-authorized_code']) {\n          throw new InvalidGrant(\n            `Grant type \"${tokenRequest.grant_type}\" invalid parameters`,\n          );\n        }\n        if (!this.preAuthCallback) {\n          throw new InsufficienteParamaters(\n            `No verification callback was provided for \"${tokenRequest.grant_type}\" grant type`,\n          );\n        }\n        const verificationResultPre = await this.preAuthCallback(\n          tokenRequest.client_id,\n          tokenRequest['pre-authorized_code']!,\n          tokenRequest.user_pin,\n        );\n        if (verificationResultPre.isError()) {\n          throw new InvalidGrant(\n            `Invalid \"${tokenRequest.grant_type}\" provided ${verificationResultPre.unwrapError().message}`,\n          );\n        }\n        clientId = verificationResultPre.unwrap();\n        if (tokenRequest.user_pin) {\n          additionalParams = {pin: tokenRequest.user_pin};\n        }\n        break;\n      }\n      case 'vp_token': {\n        // TODO: PENDING\n        if (!tokenRequest.vp_token) {\n          throw new InsufficienteParamaters(\n            'Grant type \"vp_token\" requires the \"vp_token\" parameter',\n          );\n        }\n        throw new InternalNonceError('Uninplemented');\n      }\n    }\n    const now = Date.now();\n    const {nonce, state} = this.generateCNonce(\n      now,\n      clientId,\n      this.generalConfiguration.cNonceExpirationTime * 1000,\n      nonceValue,\n      prevNonce,\n    );\n    const token = await this.signCallback({\n      aud: audience,\n      iss: this.metadata.issuer,\n      sub: clientId,\n      exp: now + this.generalConfiguration.accessTokenExpirationTime * 1000,\n      nonce: nonce,\n      ...additionalParams,\n    });\n    if (prevNonce) {\n      await this.nonceManager.updateNonce(nonce, state);\n    } else {\n      await this.nonceManager.saveNonce(nonce, state);\n    }\n    const result: TokenResponse = {\n      access_token: token,\n      token_type: 'bearer',\n      expires_in: this.generalConfiguration.accessTokenExpirationTime,\n      c_nonce: nonce,\n      c_nonce_expires_in: this.generalConfiguration.cNonceExpirationTime,\n    };\n    if (generateIdToken) {\n      result.id_token = await this.signCallback(\n        {\n          iss: this.metadata.issuer,\n          sub: clientId,\n          exp: now + this.generalConfiguration.accessTokenExpirationTime * 1000,\n        },\n        this.metadata.id_token_signing_alg_values_supported,\n      );\n    }\n    return result;\n  }\n\n  private validateClientMetadata(\n    clientMetadata: HolderMetadata,\n  ): RpTypes.ValidatedClientMetadata {\n    const idTokenAlg: JWA_ALGS[] = [];\n    const vpFormats: VpFormatsSupported = {};\n    if (\n      this.metadata.id_token_signing_alg_values_supported &&\n      clientMetadata.id_token_signing_alg_values_supported\n    ) {\n      for (const alg of clientMetadata.id_token_signing_alg_values_supported) {\n        if (\n          this.metadata.id_token_signing_alg_values_supported.includes(\n            alg as JWA_ALGS,\n          )\n        ) {\n          idTokenAlg.push(alg as JWA_ALGS);\n        }\n      }\n    }\n    if (this.metadata.vp_formats_supported) {\n      for (const format in clientMetadata.vp_formats_supported) {\n        if (\n          this.metadata.vp_formats_supported[format as keyof VpFormatsSupported]\n        ) {\n          const intersectArray: JWA_ALGS[] = [];\n          for (const alg of clientMetadata.vp_formats_supported[\n            format as keyof VpFormatsSupported\n          ]!.alg_values_supported!) {\n            if (\n              this.metadata.vp_formats_supported![\n                format as keyof VpFormatsSupported\n              ]?.alg_values_supported.includes(alg)\n            ) {\n              intersectArray.push(alg);\n            }\n          }\n          vpFormats[format as keyof VpFormatsSupported] = {\n            alg_values_supported: intersectArray,\n          };\n        }\n      }\n    }\n    return {\n      responseTypesSupported: clientMetadata.response_types_supported ?? [],\n      idTokenAlg,\n      vpFormats,\n      authorizationEndpoint: clientMetadata.authorization_endpoint!,\n    };\n  }\n\n  private async resolveClientMetadata(\n    metadata?: Record<string, any>,\n  ): Promise<HolderMetadata | ServiceMetadata> {\n    return metadata\n      ? {...this.defaultHolderMetadata, ...metadata}\n      : this.defaultHolderMetadata;\n  }\n}\n\nasync function fetchJWKs(url: string): Promise<JWK[]> {\n  try {\n    const response = await fetch(url);\n    const jwks: any = await response.json();\n    if (!jwks.keys) {\n      throw new InvalidRequest(\"No 'keys' paramater found\");\n    }\n    return jwks['keys'];\n  } catch (e: any) {\n    throw new InternalNonceError(`Can't recover credential issuer JWKs: ${e}`);\n  }\n}\n\nfunction selectJwkFromSet(jwks: JWK[], kid: string): JWK {\n  const jwk = jwks.find(jwk => jwk.kid === kid);\n  if (!jwk) {\n    throw new InvalidRequest(`No JWK found with kid ${kid}`);\n  }\n  return jwk;\n}\n\nexport * from './types.js';\nexport * from './builder.js';\n"]}