{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../../src/core/rp/types.ts"],"names":[],"mappings":"","sourcesContent":["import {JWK} from 'jose';\nimport {JWA_ALGS} from '../../common/constants/index.js';\nimport {AuthzResponseMode} from '../../common/formats/index.js';\nimport {AuthzRequest, DIFPresentationDefinition} from '../../common/index.js';\nimport {VpFormatsSupported} from '../../common/types/index.js';\nimport {DIDDocument} from 'did-resolver';\nimport {VpExtractedData} from '../presentations/types.js';\nimport {JwtPayload} from 'jsonwebtoken';\n\nexport interface RpConfiguration {\n  /**\n   * Expiration time(ms) for ID Tokens. @default 10 minutes\n   */\n  idTokenExpirationTime: number;\n  /**\n   * Expiration time(ms) for VP Tokens. @default 10 minutes\n   */\n  vpTokenExpirationTIme: number;\n  /**\n   * Expiration time(s) for Challenge Nonce. @default 1 hour\n   */\n  cNonceExpirationTime: number;\n  /**\n   * Expiration time(s) for access tokens. @default 1 hour\n   */\n  accessTokenExpirationTime: number;\n}\n\n/**\n * Defines a function type that allows signing a JWT Payload\n * @param payload JWT payload to sign\n * @param supportedSignAlg List of supported signature algorithms,\n *  of which one should be used.\n * @returns The signed object in a string format.\n */\nexport type TokenSignCallback = (\n  payload: JwtPayload,\n  supportedSignAlg?: JWA_ALGS[],\n) => Promise<string>;\n\n/**\n * Defines an object type that allows to specify the optional parameters of\n * \"createIdTokenRequest\" OpenIDReliyingParty method\n */\nexport type CreateTokenRequestOptionalParams = {\n  /**\n   * Response mode to specify in the ID Token\n   * @defaultValue \"direct_post\"\n   */\n  responseMode?: AuthzResponseMode;\n  /**\n   * Additional payload to include in the JWT\n   */\n  additionalPayload?: Record<string, any>;\n  /**\n   * The state to indicate in the JWT\n   */\n  state?: string;\n  /**\n   * The expiration time of the JWT. Must be in seconds\n   * @defaultValue 1 hour\n   */\n  expirationTime?: number;\n  /**\n   * The scope to include in the JWT\n   */\n  scope?: string;\n};\n\n/**\n * Allows to define how to specify the presentation definition in a VP Token Request\n */\nexport type PresentationDefinitionLocation =\n  | {type: 'Raw'; presentationDefinition: DIFPresentationDefinition}\n  | {type: 'Uri'; presentationDefinitionUri: string};\n\n/**\n * Allows to define the purpose behid a specific Authz Request\n */\nexport type RequestPurpose =\n  | {type: 'Issuance'; verifiedBaseAuthzRequest: VerifiedBaseAuthzRequest}\n  | {type: 'Verification'; verifiedBaseAuthzRequest: VerifiedBaseAuthzRequest};\n\nexport interface VerifiedBaseAuthzRequest {\n  /**\n   * Client metadata related to supported formats and algorithms that are checked against the PR.\n   */\n  validatedClientMetadata: ValidatedClientMetadata;\n  /**\n   * Verified authz request\n   */\n  authzRequest: AuthzRequest;\n  /**\n   * JWK used by the service Wallet\n   */\n  serviceWalletJWK?: JWK;\n}\n\nexport interface VerifiedIdTokenResponse {\n  /**\n   * The DID Document of the entity that sign the token\n   */\n  didDocument?: DIDDocument;\n  /**\n   * The subject identifier. In most cases coincide with the ID of the DID Document\n   */\n  subject: string;\n  /**\n   * The verified token\n   */\n  token: string;\n  /**\n   * The authorization code generated\n   */\n  authzCode?: string;\n  /**\n   * The expected state by the holder\n   */\n  state?: string;\n  /**\n   * The URI in which the holder expects to received the Authz code\n   */\n  redirectUri?: string;\n}\n\nexport interface VerifiedVpTokenResponse {\n  /**\n   * The verified token\n   */\n  token: string;\n  /**\n   * The data extracted from the VCs of the VP\n   */\n  vpInternalData: VpExtractedData;\n  /**\n   * The authorization code generated\n   */\n  authzCode?: string;\n  /**\n   * The expected state by the holder\n   */\n  state?: string;\n  /**\n   * The URI in which the holder expects to received the Authz code\n   */\n  redirectUri?: string;\n}\n\n/**\n * Client metadata that has been processed to indicate which formats, signature\n * algorithms and response types are supported.\n */\nexport interface ValidatedClientMetadata {\n  /**\n   * Response types supported by the client\n   */\n  responseTypesSupported: string[];\n  /**\n   * Signature algorithms supported by both the client and an RP\n   */\n  idTokenAlg: JWA_ALGS[];\n  /**\n   * VP formats supported both by the client and by an RP\n   */\n  vpFormats: VpFormatsSupported;\n  /**\n   * Authorization endpoint of the client\n   */\n  authorizationEndpoint: string;\n}\n"]}