{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../../../src/core/rp/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import {Resolver} from 'did-resolver';\nimport {Result} from '../../common/classes/result.js';\nimport {\n  ACCESS_TOKEN_EXPIRATION_TIME,\n  AuthServerMetadata,\n  AuthorizationDetails,\n  C_NONCE_EXPIRATION_TIME,\n  HolderMetadata,\n  ID_TOKEN_REQUEST_DEFAULT_EXPIRATION_TIME,\n  VP_TOKEN_REQUEST_DEFAULT_EXPIRATION_TIME,\n} from '../../common/index.js';\nimport {CredentialAdditionalVerification} from '../presentations/types.js';\nimport {RpConfiguration, TokenSignCallback} from './types.js';\nimport {StateManager} from '../state/index.js';\nimport {OpenIDReliyingParty} from './index.js';\n\n/**\n * Step builder that can be used to create an instance of a Reliying Party\n */\nexport class OpenIdRPStepBuilder {\n  private issuerStateCallback:\n    | undefined\n    | ((state: string) => Promise<Result<null, Error>>) = undefined;\n  private authzDetailsVerificationCallback:\n    | undefined\n    | ((authDetails: AuthorizationDetails) => Promise<Result<null, Error>>) =\n    undefined;\n  private credentialExternalVerification:\n    | undefined\n    | CredentialAdditionalVerification = undefined;\n  private scopeVerificationFlag = false;\n  private subjectComparison: (firstId: string, secondId: string) => boolean = (\n    firstId,\n    secondId,\n  ) => {\n    return firstId === secondId;\n  };\n  private preAuthCallback:\n    | undefined\n    | ((\n        clientId: string | undefined,\n        preCode: string,\n        pin?: string,\n      ) => Promise<Result<string, Error>>) = undefined;\n  private generalConfiguration: RpConfiguration = {\n    idTokenExpirationTime: ID_TOKEN_REQUEST_DEFAULT_EXPIRATION_TIME,\n    vpTokenExpirationTIme: VP_TOKEN_REQUEST_DEFAULT_EXPIRATION_TIME,\n    cNonceExpirationTime: C_NONCE_EXPIRATION_TIME,\n    accessTokenExpirationTime: ACCESS_TOKEN_EXPIRATION_TIME,\n  };\n\n  constructor(private metadata: AuthServerMetadata) {}\n\n  /**\n   * Allows to overwrite the default expiration time for ID Token Request\n   * @param time The new expieration time in ms\n   * @returns The same instance of the step builder\n   */\n  setIdTokenExpirationTime(time: number) {\n    this.generalConfiguration.idTokenExpirationTime = time;\n    return this;\n  }\n\n  /**\n   * Allows to overwrite the default expiration time for VP Token Request\n   * @param time The new expieration time in ms\n   * @returns The same instance of the step builder\n   */\n  setVpTokenExpirationTime(time: number) {\n    this.generalConfiguration.vpTokenExpirationTIme = time;\n    return this;\n  }\n\n  /**\n   * Allows to overwrite the default expiration time for Challenge nonces\n   * @param time The new expieration time in seconds\n   * @returns The same instance of the step builder\n   */\n  setCNonceExpirationTime(time: number) {\n    this.generalConfiguration.cNonceExpirationTime = time;\n    return this;\n  }\n\n  /**\n   * Allows to overwrite the default expiration time for Access token\n   * @param time The new expieration time in ms\n   * @returns The same instance of the step builder\n   */\n  setAccessTokenExpirationTime(time: number) {\n    this.generalConfiguration.accessTokenExpirationTime = time;\n    return this;\n  }\n\n  /**\n   * Allows to establish a callback to handle token request that use the pre-auth\n   * grant type. If not defined, all requests of this type will be rejected\n   * @param callback The callback to handle the Pre-Auth Code. A \"result\" objet with the\n   * real clientId of the user is expected\n   * @returns The same instance of the step builder\n   */\n  withPreAuthCallback(\n    callback: (\n      clientId: string | undefined,\n      preCode: string,\n      pin?: string,\n    ) => Promise<Result<string, Error>>,\n  ) {\n    this.preAuthCallback = callback;\n    return this;\n  }\n\n  /**\n   * Allows to establish a callback to handle the \"issuer state\" parameter of auth request.\n   * If not defined, all issuer state will be ignored.\n   * @param callback The callback to handle the issuer_state parameter\n   * @returns The same instance of the step builder\n   */\n  withIssuerStateVerification(\n    callback: (state: string) => Promise<Result<null, Error>>,\n  ) {\n    this.issuerStateCallback = callback;\n    return this;\n  }\n\n  /**\n   * Allows to establish a callback to perfom a specific verification of the Authz details\n   * of Authz Request. If not defined, only a basic verification will be perfomed, in which the\n   * validity of the contentes of the details are not analyzed.\n   * @param callback The callback to handle the authz details\n   * @returns The same instance of the step builder\n   */\n  withAuthzDetailsVerification(\n    callback: (\n      authDetails: AuthorizationDetails,\n    ) => Promise<Result<null, Error>>,\n  ) {\n    this.authzDetailsVerificationCallback = callback;\n    return this;\n  }\n\n  /**\n   * Allows to set a flag to perfome scope verification against authz server metadata\n   * @returns The same instance of the step builder\n   */\n  withScopeVerification() {\n    this.scopeVerificationFlag = true;\n    return this;\n  }\n\n  /**\n   * Allows to set a callback to vefify the extracted data of the VCs in a VP\n   * according to the presentation definition\n   * @param callback The callback that handle the verification\n   * @returns The same instance of the step builder\n   */\n  withVpCredentialExternalVerification(\n    callback: CredentialAdditionalVerification,\n  ) {\n    this.credentialExternalVerification = callback;\n    return this;\n  }\n\n  /**\n   * Allows to overwrite the comparison function used to compared clientID in\n   * different stages of the OpenID protocol. For example, if a holder ask for AuthzCode\n   * throught a Base Authz Request, then its clientID would be saved among other data.\n   * When the holder delivers an VP Token or ID Token, or ask for a Access Token, the\n   * clientID would be compared to that used in the previous stages. The default behaviour\n   * is a straight comparison using the \"===\" operator. In general, there is no need to modify\n   * the default behaviour, unless the DID that is been used requires it, for example, by using\n   * DID URL syntax.\n   * @param resolutor The comparison callback\n   * @returns The same instance of the step builder\n   */\n  withCustomSubjectComparison(\n    resolutor: (firstId: string, secondId: string) => boolean,\n  ) {\n    this.subjectComparison = resolutor;\n    return this;\n  }\n\n  /**\n   * Allows to specify the default metadata for all holder that establish contact with the\n   * authz server. The specified emtadata will repace any omitted parameter by the holder.\n   * This method also ends the first stage of the step builder.\n   * @param metadata The metadata to use\n   * @returns The next stage of the step builder, focused on the DID Resolvers\n   */\n  setDefaultHolderMetadata(\n    metadata: HolderMetadata,\n  ): OpenIdStepBuilderHolderMetadataStage {\n    return new OpenIdStepBuilderHolderMetadataStage(\n      this.generalConfiguration,\n      this.metadata,\n      this.issuerStateCallback,\n      this.authzDetailsVerificationCallback,\n      this.credentialExternalVerification,\n      this.scopeVerificationFlag,\n      metadata,\n      this.subjectComparison,\n      this.preAuthCallback,\n    );\n  }\n}\n\nclass OpenIdStepBuilderHolderMetadataStage {\n  constructor(\n    private generalConfiguration: RpConfiguration,\n    private metadata: AuthServerMetadata,\n    private issuerStateCallback:\n      | undefined\n      | ((state: string) => Promise<Result<null, Error>>) = undefined,\n    private authzDetailsVerificationCallback:\n      | undefined\n      | ((\n          authDetails: AuthorizationDetails,\n        ) => Promise<Result<null, Error>>) = undefined,\n    private credentialExternalVerification:\n      | undefined\n      | CredentialAdditionalVerification = undefined,\n    private scopeVerificationFlag: boolean,\n    private holderMetadata: HolderMetadata,\n    private subjectComparison: (firstId: string, secondId: string) => boolean,\n    private preAuthCallback:\n      | undefined\n      | ((\n          clientId: string | undefined,\n          preCode: string,\n          pin?: string,\n        ) => Promise<Result<string, Error>>) = undefined,\n  ) {}\n\n  /**\n   * Allows to set the DID Resolver to use by the RP\n   * @param didResolver The DID Resolver to use\n   * @returns The next stage of the step builder\n   */\n  withDidResolver(didResolver: Resolver): OpenIdStepBuilderResolverStage {\n    return new OpenIdStepBuilderResolverStage(\n      this.generalConfiguration,\n      this.metadata,\n      this.issuerStateCallback,\n      this.authzDetailsVerificationCallback,\n      this.credentialExternalVerification,\n      this.scopeVerificationFlag,\n      this.holderMetadata,\n      didResolver,\n      this.subjectComparison,\n      this.preAuthCallback,\n    );\n  }\n}\n\nclass OpenIdStepBuilderResolverStage {\n  constructor(\n    private generalConfiguration: RpConfiguration,\n    private metadata: AuthServerMetadata,\n    private issuerStateCallback:\n      | undefined\n      | ((state: string) => Promise<Result<null, Error>>) = undefined,\n    private authzDetailsVerificationCallback:\n      | undefined\n      | ((\n          authDetails: AuthorizationDetails,\n        ) => Promise<Result<null, Error>>) = undefined,\n    private credentialExternalVerification:\n      | undefined\n      | CredentialAdditionalVerification = undefined,\n    private scopeVerificationFlag: boolean,\n    private holderMetadata: HolderMetadata,\n    private didResolver: Resolver,\n    private subjectComparison: (firstId: string, secondId: string) => boolean,\n    private preAuthCallback:\n      | undefined\n      | ((\n          clientId: string | undefined,\n          preCode: string,\n          pin?: string,\n        ) => Promise<Result<string, Error>>) = undefined,\n  ) {}\n\n  /**\n   * Allows to set the sign callback for all tokens and request that\n   * the RP will generate\n   * @param jwtSignCallback The callback to use\n   * @returns The next stage of the step builder\n   */\n  withTokenSignCallback(\n    jwtSignCallback: TokenSignCallback,\n  ): OpenIdStepBuilderSignStage {\n    return new OpenIdStepBuilderSignStage(\n      this.generalConfiguration,\n      this.metadata,\n      jwtSignCallback,\n      this.issuerStateCallback,\n      this.authzDetailsVerificationCallback,\n      this.credentialExternalVerification,\n      this.scopeVerificationFlag,\n      this.holderMetadata,\n      this.didResolver,\n      this.subjectComparison,\n      this.preAuthCallback,\n    );\n  }\n}\n\nclass OpenIdStepBuilderSignStage {\n  constructor(\n    private generalConfiguration: RpConfiguration,\n    private metadata: AuthServerMetadata,\n    private jwtSignCallback: TokenSignCallback,\n    private issuerStateCallback:\n      | undefined\n      | ((state: string) => Promise<Result<null, Error>>) = undefined,\n    private authzDetailsVerificationCallback:\n      | undefined\n      | ((\n          authDetails: AuthorizationDetails,\n        ) => Promise<Result<null, Error>>) = undefined,\n    private credentialExternalVerification:\n      | undefined\n      | CredentialAdditionalVerification = undefined,\n    private scopeVerificationFlag: boolean,\n    private holderMetadata: HolderMetadata,\n    private didResolver: Resolver,\n    private subjectComparison: (firstId: string, secondId: string) => boolean,\n    private preAuthCallback:\n      | undefined\n      | ((\n          clientId: string | undefined,\n          preCode: string,\n          pin?: string,\n        ) => Promise<Result<string, Error>>) = undefined,\n  ) {}\n\n  /**\n   * Allows to set the state manager that will be used by the RP\n   * to handle the nonces among the states related to them\n   * @param manager A StateManager implementation\n   * @returns The next stage of the step builder\n   */\n  withStateManager(manager: StateManager): OpenIdStepBuilderEndStage {\n    return new OpenIdStepBuilderEndStage(\n      this.generalConfiguration,\n      this.metadata,\n      this.jwtSignCallback,\n      this.issuerStateCallback,\n      this.authzDetailsVerificationCallback,\n      this.credentialExternalVerification,\n      this.scopeVerificationFlag,\n      this.holderMetadata,\n      this.didResolver,\n      manager,\n      this.subjectComparison,\n      this.preAuthCallback,\n    );\n  }\n}\n\nclass OpenIdStepBuilderEndStage {\n  constructor(\n    private generalConfiguration: RpConfiguration,\n    private metadata: AuthServerMetadata,\n    private jwtSignCallback: TokenSignCallback,\n    private issuerStateCallback:\n      | undefined\n      | ((state: string) => Promise<Result<null, Error>>) = undefined,\n    private authzDetailsVerificationCallback:\n      | undefined\n      | ((\n          authDetails: AuthorizationDetails,\n        ) => Promise<Result<null, Error>>) = undefined,\n    private credentialExternalVerification:\n      | undefined\n      | CredentialAdditionalVerification = undefined,\n    private scopeVerificationFlag: boolean,\n    private holderMetadata: HolderMetadata,\n    private didResolver: Resolver,\n    private manager: StateManager,\n    private subjectComparison: (firstId: string, secondId: string) => boolean,\n    private preAuthCallback:\n      | undefined\n      | ((\n          clientId: string | undefined,\n          preCode: string,\n          pin?: string,\n        ) => Promise<Result<string, Error>>) = undefined,\n  ) {}\n\n  /**\n   * Builds an instance of the RP\n   * @returns An instance of OpenIDReliyingParty\n   */\n  build(): OpenIDReliyingParty {\n    return new OpenIDReliyingParty(\n      this.holderMetadata,\n      this.metadata,\n      this.didResolver,\n      this.jwtSignCallback,\n      this.scopeVerificationFlag,\n      this.manager,\n      this.subjectComparison,\n      this.generalConfiguration,\n      this.issuerStateCallback,\n      this.authzDetailsVerificationCallback,\n      this.credentialExternalVerification,\n      this.preAuthCallback,\n    );\n  }\n}\n"]}