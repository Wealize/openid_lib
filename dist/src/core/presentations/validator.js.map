{"version":3,"file":"validator.js","sourceRoot":"","sources":["../../../../src/core/presentations/validator.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,OAA4B,MAAM,kBAAkB,CAAA;AAC3D,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,SAAe,UAAU,CAAC,GAAW;;QACnC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;YACjB,MAAM,IAAI,KAAK,CAAC;0DACsC,QAAQ,CAAC,UAAU,EAAE,CAC1E,CAAC;QACJ,CAAC;QACD,OAAO,MAAM,QAAQ,CAAC,IAAI,EAAqB,CAAC;IAClD,CAAC;CAAA;AAED,MAAM,CAAC,MAAM,GAAG,GAAG,IAAI,OAAO,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAC;AAC3D,UAAU,CAAC,GAAG,CAAC,CAAC","sourcesContent":["import Ajv2020, { AnySchemaObject } from \"ajv/dist/2020.js\"\nimport addFormats from \"ajv-formats\";\nimport fetch from 'node-fetch';\n\nasync function loadSchema(uri: string): Promise<AnySchemaObject> {\n  const response = await fetch(uri);\n  if (!response.ok) {\n    throw new Error(`\n      An error was received when fetchin remote schema: ${response.statusText}`\n    );\n  }\n  return await response.json() as AnySchemaObject;\n}\n\nexport const ajv = new Ajv2020({ loadSchema: loadSchema });\naddFormats(ajv);\n"]}