{"version":3,"file":"validator.js","sourceRoot":"","sources":["../../../../src/core/presentations/validator.ts"],"names":[],"mappings":"AAAA,OAAO,OAA0B,MAAM,kBAAkB,CAAC;AAC1D,OAAO,UAAU,MAAM,aAAa,CAAC;AACrC,OAAO,KAAK,MAAM,YAAY,CAAC;AAE/B,KAAK,UAAU,UAAU,CAAC,GAAW;IACnC,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACjB,MAAM,IAAI,KAAK,CAAC;0DACsC,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;IAC/E,CAAC;IACD,OAAO,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAoB,CAAC;AACpD,CAAC;AAED,MAAM,CAAC,MAAM,GAAG,GAAG,IAAK,OAAe,CAAC,EAAC,UAAU,EAAE,UAAU,EAAC,CAAC,CAAC;AACjE,UAAkB,CAAC,GAAG,CAAC,CAAC","sourcesContent":["import Ajv2020, {AnySchemaObject} from 'ajv/dist/2020.js';\nimport addFormats from 'ajv-formats';\nimport fetch from 'node-fetch';\n\nasync function loadSchema(uri: string): Promise<AnySchemaObject> {\n  const response = await fetch(uri);\n  if (!response.ok) {\n    throw new Error(`\n      An error was received when fetchin remote schema: ${response.statusText}`);\n  }\n  return (await response.json()) as AnySchemaObject;\n}\n\nexport const ajv = new (Ajv2020 as any)({loadSchema: loadSchema});\n(addFormats as any)(ajv);\n"]}