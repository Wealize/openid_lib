{"version":3,"file":"authz_request.interface.js","sourceRoot":"","sources":["../../../../src/common/interfaces/authz_request.interface.ts"],"names":[],"mappings":"AA+BA;;;;;GAKG;AACH,MAAM,CAAN,IAAY,oBAGX;AAHD,WAAY,oBAAoB;IAC9B,iFAAa,CAAA;IACb,2EAAU,CAAA;AACZ,CAAC,EAHW,oBAAoB,KAApB,oBAAoB,QAG/B","sourcesContent":["import {AuthzResponseType} from '../types/index.js';\nimport {AuthorizationDetails} from './authz_details.interface.js';\nimport {HolderMetadata, ServiceMetadata} from './client_metadata.interface.js';\n\n/**\n * Defines an Authorization Request in accordance to\n * RFC 6749 \"The OAuth 2.0 Authorization Framework\" and\n * RFC 9396 \"OAuth 2.0 Rich Authorization Requests\"\n */\nexport interface AuthzRequest {\n  response_type: AuthzResponseType;\n  client_id: string;\n  redirect_uri: string;\n  scope: string;\n  issuer_state?: string;\n  state?: string;\n  authorization_details?: AuthorizationDetails[];\n  nonce?: string;\n  code_challenge?: string;\n  code_challenge_method?: string;\n  client_metadata?: HolderMetadata | ServiceMetadata;\n}\n\n/**\n * Defines an Authorization Request with its own data encapsulated in a JWT.\n * This is the case when the request must be signed.\n */\nexport interface AuthzRequestWithJWT extends AuthzRequest {\n  request?: string;\n}\n\n/**\n * Defines in which location the request for authorisation should be included:\n * - PLAIN_REQUEST: The request is not signed and travels in the same HTTP\n * request as in the form of parameters.\n * - JWT_OBJECT: The request is signed and represented as a JWT\n */\nexport enum AuthzRequestLocation {\n  PLAIN_REQUEST,\n  JWT_OBJECT,\n}\n"]}