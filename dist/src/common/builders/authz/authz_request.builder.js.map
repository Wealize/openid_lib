{"version":3,"file":"authz_request.builder.js","sourceRoot":"","sources":["../../../../../src/common/builders/authz/authz_request.builder.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvalidDataProvided } from \"../../classes/index.js\";\nimport { DEFAULT_SCOPE } from \"../../constants/index.js\";\nimport { AuthorizationDetails } from \"../../interfaces/authz_details.interface.js\";\nimport { AuthzRequest } from \"../../interfaces/authz_request.interface.js\";\nimport {\n  HolderMetadata,\n  ServiceMetadata\n} from \"../../interfaces/client_metadata.interface.js\";\nimport { AuthzResponseType } from \"../../types/index.js\";\n\n/**\n * Builder class for AuthzRequest\n */\nexport class AuthzRequestBuilder {\n  private scope: string = DEFAULT_SCOPE;\n  private issuer_state?: string;\n  private state?: string;\n  private authorization_details?: AuthorizationDetails[];\n  private nonce?: string;\n  private code_challenge?: string;\n  private code_challenge_method?: string;\n  private client_metadata?: HolderMetadata | ServiceMetadata;\n\n  /**\n   * Constructor for AuthzRequestBuilder\n   * @param response_type The \"reponse_type\" attribute of an authorization request\n   * @param client_id  The client identifier\n   * @param redirect_uri  The \"redirect_uri\" attribute of an authorization request\n   * @param imposeOpenIdScope Flag that manages whether \"scope\" should \n   * be checked for the string \"openid\".\n   */\n  constructor(\n    private response_type: AuthzResponseType,\n    private client_id: string,\n    private redirect_uri: string,\n    private imposeOpenIdScope = true\n  ) { }\n\n  /**\n   * Generates a build with the required data for a AuthzRequest sent \n   * by a Holder Wallet\n   * @param response_type The \"reponse_type\" attribute of an authorization request\n   * @param client_id The client identifier\n   * @param redirect_uri The \"redirect_uri\" attribute of an authorization request\n   * @param metadata The metadata of the Holder\n   * @param code_challenge The \"code_challenge\" attribute of authorization request\n   * @param code_challenge_method The \"code_challenge_method\" attribute of \n   * authorization request\n   * @param issuer_state The \"issuer_state\" attribute of authorization request\n   * @returns Instance of AuthzRequestBuilder\n   */\n  static holderAuthzRequestBuilder(\n    response_type: AuthzResponseType,\n    client_id: string,\n    redirect_uri: string,\n    metadata: HolderMetadata,\n    code_challenge: string,\n    code_challenge_method: string, // TODO: Define new type\n    issuer_state?: string,\n  ) {\n    const builder = new AuthzRequestBuilder(\n      response_type,\n      client_id,\n      redirect_uri\n    )\n      .withMetadata(metadata)\n      .withCodeChallenge(code_challenge, code_challenge_method);\n    if (issuer_state) {\n      builder.withIssuerState(issuer_state);\n    }\n    return builder;\n  }\n\n  /**\n   * Generates a build with the required data for a AuthzRequest sent \n   * by a Service Wallet\n   * @param response_type The \"reponse_type\" attribute of an authorization request\n   * @param client_id The client identifier\n   * @param redirect_uri The \"redirect_uri\" attribute of an authorization request\n   * @param metadata The metadata of the Holder\n   * @param issuer_state The \"issuer_state\" attribute of authorization request\n   * @returns Instance of AuthzRequestBuilder\n   */\n  static serviceAuthzRequestBuilder(\n    response_type: AuthzResponseType,\n    client_id: string,\n    redirect_uri: string,\n    metadata: ServiceMetadata,\n    issuer_state?: string,\n  ) {\n    const builder = new AuthzRequestBuilder(\n      response_type,\n      client_id,\n      redirect_uri\n    )\n      .withMetadata(metadata);\n    if (issuer_state) {\n      builder.withIssuerState(issuer_state);\n    }\n    return builder;\n  }\n\n  /**\n   * Set the attribute \"client_metadata\" of an autorization request\n   * @param metadata The metadata to include\n   * @returns This object\n   */\n  withMetadata(metadata: HolderMetadata | ServiceMetadata): AuthzRequestBuilder {\n    this.client_metadata = metadata;\n    return this;\n  }\n\n  /**\n   * Set the attribute \"code_challenge\" of an autorization request\n   * @param code_challenge The challenge to include\n   * @param method The method that have to be used to verify the challenge\n   * @returns This object\n   */\n  withCodeChallenge(code_challenge: string, method: string): AuthzRequestBuilder {\n    this.code_challenge = code_challenge;\n    this.code_challenge_method = method;\n    return this;\n  }\n\n  /**\n   * Set the attribute \"scope\" of an autorization request\n   * @param scope The scope to include\n   * @returns This object\n   */\n  withScope(scope: string): AuthzRequestBuilder {\n    if (this.imposeOpenIdScope && !scope.includes(DEFAULT_SCOPE)) {\n      throw new InvalidDataProvided(`Scope must contain ${DEFAULT_SCOPE}`);\n    }\n    this.scope = scope;\n    return this;\n  }\n\n  /**\n   * Set the attribute \"issuer_state\" of an autorization request\n   * @param issuerState The state to include\n   * @returns This object\n   */\n  withIssuerState(issuerState: string): AuthzRequestBuilder {\n    this.issuer_state = issuerState;\n    return this;\n  }\n\n  /**\n   * Set the attribute \"state\" of an autorization request\n   * @param state The state to include\n   * @returns This object\n   */\n  withState(state: string): AuthzRequestBuilder {\n    this.state = state;\n    return this;\n  }\n\n  /**\n   * Set the attribute \"nonce\" of an autorization request\n   * @param nonce The nonce to include\n   * @returns This object\n   */\n  withNonce(nonce: string): AuthzRequestBuilder {\n    this.nonce = nonce;\n    return this;\n  }\n\n  /**\n   * Add authorization details to an autorization request\n   * @param authorizationDetails The details to include \n   * @returns This object\n   */\n  addAuthzDetails(authorizationDetails: AuthorizationDetails): AuthzRequestBuilder {\n    if (!this.authorization_details) {\n      this.authorization_details = [];\n    }\n    this.authorization_details.push(authorizationDetails);\n    return this;\n  }\n\n  /**\n   * Generate AuthzRequest from the data contained in the builder\n   * @returns AuthzRequest instance\n   */\n  build(): AuthzRequest {\n    return {\n      response_type: this.response_type,\n      client_id: this.client_id,\n      redirect_uri: this.redirect_uri,\n      scope: this.scope,\n      issuer_state: this.issuer_state,\n      state: this.state,\n      authorization_details: this.authorization_details,\n      nonce: this.nonce,\n      code_challenge: this.code_challenge,\n      code_challenge_method: this.code_challenge_method,\n      client_metadata: this.client_metadata\n    }\n  }\n}\n"]}