{"version":3,"file":"credential_offer.build.js","sourceRoot":"","sources":["../../../../src/common/builders/credential_offer.build.ts"],"names":[],"mappings":"AAKA,OAAO,EAAC,EAAE,IAAI,MAAM,EAAC,MAAM,MAAM,CAAC;AAElC;;GAEG;AACH,MAAM,OAAO,sBAAsB;IAQb;IAPZ,WAAW,GAA2B,EAAE,CAAC;IACzC,MAAM,CAAyB;IAEvC;;;OAGG;IACH,YAAoB,iBAAyB;QAAzB,sBAAiB,GAAjB,iBAAiB,CAAQ;IAAG,CAAC;IAEjD;;;;;;OAMG;IACH,MAAM,CAAC,wBAAwB,CAC7B,iBAAyB,EACzB,YAAqB;QAErB,OAAO,IAAI,sBAAsB,CAAC,iBAAiB,CAAC,CAAC,aAAa,CAChE,YAAY,CACb,CAAC;IACJ,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,2BAA2B,CAChC,iBAAyB,EACzB,WAAoB,EACpB,OAAgB;QAEhB,OAAO,IAAI,sBAAsB,CAAC,iBAAiB,CAAC,CAAC,gBAAgB,CACnE,WAAW,EACX,OAAO,CACR,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,aAAa,CAAC,cAAoC;QAChD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACH,aAAa,CAAC,YAAqB;QACjC,IAAI,CAAC,YAAY,EAAE,CAAC;YAClB,YAAY,GAAG,MAAM,EAAE,CAAC;QAC1B,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,GAAG,EAAC,kBAAkB,EAAE,EAAC,YAAY,EAAC,EAAC,CAAC;QACrD,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,kBAAkB,GAAG,EAAC,YAAY,EAAC,CAAC;QAClD,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACH,gBAAgB,CACd,WAAoB,EACpB,OAAgB;QAEhB,IAAI,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,GAAG,MAAM,EAAE,CAAC;QACrB,CAAC;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;YACjB,IAAI,CAAC,MAAM,GAAG;gBACZ,sDAAsD,EAAE;oBACtD,qBAAqB,EAAE,OAAO;oBAC9B,iBAAiB,EAAE,WAAW;iBAC/B;aACF,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,sDAAsD,CAAC,GAAG;gBACpE,qBAAqB,EAAE,OAAO;gBAC9B,iBAAiB,EAAE,WAAW;aAC/B,CAAC;QACJ,CAAC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;OAGG;IACH,KAAK;QACH,OAAO;YACL,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,WAAW,EAAE,IAAI,CAAC,WAAW;YAC7B,MAAM,EAAE,IAAI,CAAC,MAAM;SACpB,CAAC;IACJ,CAAC;CACF","sourcesContent":["import {\n  CredentialOffer,\n  CredentialOfferGrants,\n  CredentialsOfferData,\n} from '../interfaces/credential_offer.interface.js';\nimport {v4 as uuidv4} from 'uuid';\n\n/**\n * Builder class for CredentialOffer\n */\nexport class CredentialOfferBuilder {\n  private credentials: CredentialsOfferData[] = [];\n  private grants?: CredentialOfferGrants;\n\n  /**\n   * Constructor for CredentialOfferBuilder\n   * @param credential_issuer The URI of the credential issuer\n   */\n  constructor(private credential_issuer: string) {}\n\n  /**\n   * Generates a builder with the required data for an\n   * authorizeRequest for the In-Time flow\n   * @param credential_issuer The value of \"credential_issuer\" attribute\n   * @param issuer_state The state of the issuer to include in the grant specification\n   * @returns This object\n   */\n  static authorizeCredentialOffer(\n    credential_issuer: string,\n    issuer_state?: string,\n  ): CredentialOfferBuilder {\n    return new CredentialOfferBuilder(credential_issuer).withAuthGrant(\n      issuer_state,\n    );\n  }\n\n  /**\n   * Generates a builder with the required data for an\n   * authorizeRequest for the Pre-Authorize flow\n   * @param credential_issuer The value of \"credential_issuer\" attribute\n   * @param pinRequired Flag that indicates if a PIN should be required\n   * @param preCode The pre-authorize_code to include in the offer\n   * @returns This object\n   */\n  static preAuthorizeCredentialOffer(\n    credential_issuer: string,\n    pinRequired: boolean,\n    preCode?: string,\n  ): CredentialOfferBuilder {\n    return new CredentialOfferBuilder(credential_issuer).withPreAuthGrant(\n      pinRequired,\n      preCode,\n    );\n  }\n\n  /**\n   * Add credential information to include in the Offer\n   * @param credentialData The credential information to include in the offer\n   * @returns This object\n   */\n  addCredential(credentialData: CredentialsOfferData): CredentialOfferBuilder {\n    this.credentials.push(credentialData);\n    return this;\n  }\n\n  /**\n   * Add data related to the \"authorization_code\" grant in the offer\n   * @param issuer_state The state of the issuer to include in the offer\n   * @returns This object\n   */\n  withAuthGrant(issuer_state?: string): CredentialOfferBuilder {\n    if (!issuer_state) {\n      issuer_state = uuidv4();\n    }\n    if (!this.grants) {\n      this.grants = {authorization_code: {issuer_state}};\n    } else {\n      this.grants.authorization_code = {issuer_state};\n    }\n    return this;\n  }\n\n  /**\n   * Add data related to the \"pre-authorization_code\" grant in the offer\n   * @param pinRequired Specify if a PIN would be required\n   * @param preCode The \"pre-authorization_code\" to include in the offer\n   * @returns This object\n   */\n  withPreAuthGrant(\n    pinRequired: boolean,\n    preCode?: string,\n  ): CredentialOfferBuilder {\n    if (!preCode) {\n      preCode = uuidv4();\n    }\n    if (!this.grants) {\n      this.grants = {\n        'urn:ietf:params:oauth:grant-type:pre-authorized_code': {\n          'pre-authorized_code': preCode,\n          user_pin_required: pinRequired,\n        },\n      };\n    } else {\n      this.grants['urn:ietf:params:oauth:grant-type:pre-authorized_code'] = {\n        'pre-authorized_code': preCode,\n        user_pin_required: pinRequired,\n      };\n    }\n    return this;\n  }\n\n  /**\n   * Generate CredentialOffer from the data contained in the builder\n   * @returns CredentialOffer instance\n   */\n  build(): CredentialOffer {\n    return {\n      credential_issuer: this.credential_issuer,\n      credentials: this.credentials,\n      grants: this.grants,\n    };\n  }\n}\n"]}