{"version":3,"file":"issuer_metadata.builder.js","sourceRoot":"","sources":["../../../../src/common/builders/issuer_metadata.builder.ts"],"names":[],"mappings":"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","sourcesContent":["import {v4 as uuidv4} from 'uuid';\nimport {W3CVerifiableCredentialFormats} from '../formats/index.js';\nimport {\n  CredentialSupported,\n  IssuerMetadata,\n  VerifiableCredentialDisplay,\n} from '../interfaces/issuer_metadata.interface.js';\nimport {isHttps} from '../utils/index.js';\nimport {InternalNonceError} from '../classes/index.js';\n\n/**\n * Builder class for Credential Issuer Metadata\n */\nexport class IssuerMetadataBuilder {\n  private authorization_server?: string;\n  private deferred_credential_endpoint?: string;\n  private batch_credential_endpoint?: string;\n  private credentials_supported: Map<string, CredentialSupported> = new Map();\n  /**\n   * Constructor of IssuerMetadataBuilder\n   * @param credential_issuer URI of the credential issuer\n   * @param credential_endpoint Credential issuer endpoint in which credential\n   * request should be sended\n   * @param imposeHttps Flag that indicates if the builder should check if\n   * the provided URL are HTTPS\n   * @throws if imposeHttps is true an a not HTTPS URI is provided\n   */\n  constructor(\n    private credential_issuer: string,\n    private credential_endpoint: string,\n    private imposeHttps = true,\n  ) {\n    if (imposeHttps) {\n      if (!isHttps(credential_issuer)) {\n        // TODO: Define error enum\n        throw new InternalNonceError('Is not https');\n      }\n      if (!isHttps(credential_endpoint)) {\n        // TODO: Define error enum\n        throw new InternalNonceError('Is not https');\n      }\n    }\n  }\n\n  private assertUrlIsHttps(url: string, assertedParameter: string) {\n    if (this.imposeHttps) {\n      if (!isHttps(url)) {\n        // TODO: Define error enum\n        throw new InternalNonceError(`${assertedParameter} is not https`);\n      }\n    }\n  }\n\n  /**\n   * Set authorization server paramater for issuer metadata\n   * @param url URI of the authorization server\n   * @returns This object\n   */\n  withAuthorizationServer(url: string): IssuerMetadataBuilder {\n    this.assertUrlIsHttps(url, 'authorization_server');\n    this.authorization_server = url;\n    return this;\n  }\n\n  /**\n   * Set deferred credential endpoint paramater for issuer metadata\n   * @param url Endpoint for deferred credentials\n   * @returns This object\n   */\n  withDeferredCredentialEndpoint(url: string): IssuerMetadataBuilder {\n    this.assertUrlIsHttps(url, 'deferred_credential_endpoint');\n    this.deferred_credential_endpoint = url;\n    return this;\n  }\n\n  /**\n   * Set batch credential endpoint paramater for issuer metadata\n   * @param url Endpoint fot batch credentials issuance\n   * @returns This object\n   */\n  withBatchCredentialEndpoint(url: string): IssuerMetadataBuilder {\n    this.assertUrlIsHttps(url, 'batch_credential_endpoint');\n    this.batch_credential_endpoint = url;\n    return this;\n  }\n\n  /**\n   * Add a new credential supported for issuer metadata\n   * @param supportedCredential Credential specification\n   * @returns This object\n   * @throws If the credential already exists\n   */\n  addCredentialSupported(\n    supportedCredential: CredentialSupported,\n  ): IssuerMetadataBuilder {\n    let id: string;\n    if (!supportedCredential.id) {\n      id = uuidv4();\n    } else {\n      if (this.credentials_supported.get(supportedCredential.id)) {\n        // TODO: Define error enum\n        throw new InternalNonceError('Credential supported already defined');\n      }\n      id = supportedCredential.id;\n    }\n    this.credentials_supported.set(id, supportedCredential);\n    return this;\n  }\n\n  /**\n   * Generate IssuerMetadata from the data contained in the builder\n   * @returns IssuerMetadata instance\n   */\n  build(): IssuerMetadata {\n    return {\n      credential_issuer: this.credential_issuer,\n      authorization_server: this.authorization_server,\n      credential_endpoint: this.credential_endpoint,\n      deferred_credential_endpoint: this.deferred_credential_endpoint,\n      batch_credential_endpoint: this.batch_credential_endpoint,\n      credentials_supported: Array.from(this.credentials_supported.values()),\n    };\n  }\n}\n\n/**\n * Builder class for Credential Supported objects in Credential Issuer Metadata\n */\nexport class CredentialSupportedBuilder {\n  private format: W3CVerifiableCredentialFormats = 'jwt_vc_json';\n  private id?: string;\n  private types: string[] = [];\n  private display?: VerifiableCredentialDisplay[];\n\n  /**\n   * Set the format of the credential. By default \"jwt_vc_json\".\n   * @param format The W3C VC format\n   * @returns This object\n   */\n  withFormat(\n    format: W3CVerifiableCredentialFormats,\n  ): CredentialSupportedBuilder {\n    this.format = format;\n    return this;\n  }\n\n  /**\n   * Set the ID of the credential\n   * @param id The id of the credential\n   * @returns This object\n   */\n  withId(id: string): CredentialSupportedBuilder {\n    this.id = id;\n    return this;\n  }\n\n  /**\n   * Set the types of the credential\n   * @param types The types of the credentials\n   * @returns This object\n   */\n  withTypes(types: string[]): CredentialSupportedBuilder {\n    this.types = types;\n    return this;\n  }\n\n  /**\n   * Add display information for the credential\n   * @param display Information of how to display the credential\n   * @returns This object\n   */\n  addDisplay(display: VerifiableCredentialDisplay): CredentialSupportedBuilder {\n    if (!this.display) {\n      this.display = [];\n    }\n    this.display.push(display);\n    return this;\n  }\n\n  /**\n   * Generate CredentialSupported from the data contained in this builder\n   * @returns CredentialSupported instance\n   */\n  build(): CredentialSupported {\n    return {\n      format: this.format,\n      id: this.id,\n      types: this.types,\n      display: this.display,\n    };\n  }\n}\n\n/**\n * Builder for VC display information in CredentialSupported objects\n */\nexport class VerifiableCredentialDisplayBuilder {\n  /**\n   * Constructor of VerifiableCredentialDisplayBuilder\n   * @param name String value of a display name for the Credential Issuer.\n   */\n  constructor(private name: string) {}\n  private locale?: string;\n  private logo?: JSON;\n  private url?: string;\n  private alt_text?: string;\n  private description?: string;\n  private background_color?: string;\n  private text_color?: string;\n\n  /**\n   * Set the locale information of the display information\n   * @param locale String value that identifies the language of this object\n   * represented as a language tag taken from values defined in BCP47\n   * @returns This object\n   */\n  withLocale(locale: string): VerifiableCredentialDisplayBuilder {\n    this.locale = locale;\n    return this;\n  }\n\n  /**\n   * Set the logo information of the display information\n   * @param logo Logo information\n   * @returns This object\n   */\n  withLogo(logo: JSON): VerifiableCredentialDisplayBuilder {\n    this.logo = logo;\n    return this;\n  }\n\n  /**\n   * Set the \"url\" attribute of the display information\n   * @param url The URL itself\n   * @returns This object\n   */\n  withUrl(url: string): VerifiableCredentialDisplayBuilder {\n    this.url = url;\n    return this;\n  }\n\n  /**\n   * Set the \"alt_text\" attribute of the display information\n   * @param text The text for the attribute\n   * @returns This object\n   */\n  withAltText(text: string): VerifiableCredentialDisplayBuilder {\n    this.alt_text = text;\n    return this;\n  }\n\n  /**\n   * Set the \"description\" attribute of the display information\n   * @param description The description to include\n   * @returns This object\n   */\n  withDescription(description: string): VerifiableCredentialDisplayBuilder {\n    this.description = description;\n    return this;\n  }\n\n  /**\n   * Set the \"background_color\" attribute of the display information\n   * @param color The color to include\n   * @returns This object\n   */\n  withBackgroundColor(color: string): VerifiableCredentialDisplayBuilder {\n    this.background_color = color;\n    return this;\n  }\n\n  /**\n   * Set the \"text_color\" attribute of the display information\n   * @param textColor The color to include\n   * @returns This object\n   */\n  withTextColor(textColor: string): VerifiableCredentialDisplayBuilder {\n    this.text_color = textColor;\n    return this;\n  }\n\n  /**\n   * Generate VerifiableCredentialDisplay object from the data contained in the builder\n   * @returns VerifiableCredentialDisplay instance\n   */\n  build(): VerifiableCredentialDisplay {\n    return {\n      name: this.name,\n      locale: this.locale,\n      logo: this.logo,\n      url: this.url,\n      alt_text: this.alt_text,\n      description: this.description,\n      background_color: this.background_color,\n      text_color: this.text_color,\n    };\n  }\n}\n"]}