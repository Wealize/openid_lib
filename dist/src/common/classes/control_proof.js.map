{"version":3,"file":"control_proof.js","sourceRoot":"","sources":["../../../../src/common/classes/control_proof.ts"],"names":[],"mappings":"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","sourcesContent":["import {JWA_ALGS} from '../constants/index.js';\nimport {ControlProofType} from '../types/index.js';\nimport {getAuthentificationJWKKeys} from '../utils/did_document.js';\nimport {decodeToken, obtainDid} from '../utils/jwt.utils.js';\nimport {Resolvable} from 'did-resolver';\nimport {importJWK, jwtVerify} from 'jose';\nimport {JwtPayload} from 'jsonwebtoken';\nimport {InvalidProof} from './error/index.js';\n\n/**\n * Class defining the proof of possession of a key material.\n */\nexport abstract class ControlProof {\n  protected constructor(public format: ControlProofType) {}\n\n  /**\n   * Allows to obtain the DID of the user that generated the proof\n   */\n  abstract getAssociatedIdentifier(): string;\n\n  /**\n   * Allows to obtain the nonce included in the proof\n   */\n  abstract getInnerNonce(): string;\n\n  /**\n   * Express the proof as a object that contains only the attributes\n   */\n  abstract toJSON(): Record<string, string>;\n  /**\n   * Allows to verify a proof\n   * @param cNonce Challenge nonce that should contain the proof\n   * @param audience Expected audicente of the proof\n   * @param didResolver Object that allows to resolve the DIDs found in the proof\n   * @throws if the proof is invalid for any reason\n   */\n  abstract verifyProof(\n    cNonce: string,\n    audience: string,\n    didResolver: Resolvable,\n  ): Promise<void>;\n\n  /**\n   * Allows to generate an instance of this class from a generic object\n   * @param data The object from which generate the proof\n   * @returns An object of this class\n   * @throws if the object provided is not a valid proof\n   */\n  static fromJSON(data: Record<string, any>): ControlProof {\n    if (!data.proof_type) {\n      throw new InvalidProof(\n        'The \"format\" parameter is required in a control proof',\n      );\n    }\n    if (data.proof_type === 'jwt') {\n      if (!data.jwt) {\n        throw new InvalidProof('Proof of format \"jwt\" needs a \"jwt\" paramater');\n      }\n      return ControlProof.jwtProof(data.jwt);\n    } else {\n      throw new InvalidProof('Invalid format specified');\n    }\n  }\n\n  /**\n   * Allows to generate a proof in JWT format\n   * @param jwt The JWT proof\n   * @returns A JWT control proof\n   */\n  static jwtProof(jwt: string): JwtControlProof {\n    return new JwtControlProof('jwt', jwt);\n  }\n}\n\nclass JwtControlProof extends ControlProof {\n  private clientIdentifier?: string;\n\n  constructor(\n    format: ControlProofType,\n    private jwt: string,\n  ) {\n    super(format);\n  }\n\n  toJSON(): Record<string, string> {\n    return {\n      format: this.format,\n      jwt: this.jwt,\n    };\n  }\n\n  getAssociatedIdentifier(): string {\n    if (!this.clientIdentifier) {\n      const {header, payload} = decodeToken(this.jwt);\n      if (!header.kid) {\n        throw new InvalidProof('\"kid\" parameter must be specified');\n      }\n      this.clientIdentifier = obtainDid(\n        header.kid,\n        (payload as JwtPayload).iss,\n      );\n    }\n    return this.clientIdentifier;\n  }\n\n  getInnerNonce(): string {\n    const {payload} = decodeToken(this.jwt);\n    const jwtPayload = payload as JwtPayload;\n    if (!jwtPayload.nonce) {\n      throw new InvalidProof('\"nonce\" parameter is not specified');\n    }\n    return jwtPayload.nonce;\n  }\n\n  async verifyProof(\n    cNonce: string,\n    audience: string,\n    didResolver: Resolvable,\n  ): Promise<void> {\n    const {header, payload} = decodeToken(this.jwt);\n    const jwtPayload = payload as JwtPayload;\n    if (!header.typ || header.typ !== 'openid4vci-proof+jwt') {\n      throw new InvalidProof('Invalid \"typ\" paramater in proof header');\n    }\n    if ((header.alg as JWA_ALGS) === 'none') {\n      throw new InvalidProof('The value of \"alg\" parameter can\\'t be none');\n    }\n    if (!header.kid) {\n      throw new InvalidProof('\"kid\" parameter must be specified');\n    }\n    if (!jwtPayload.aud || jwtPayload.aud !== audience) {\n      throw new InvalidProof('\"aud\" parameter is not specified or is invalid');\n    }\n    if (!jwtPayload.iat) {\n      throw new InvalidProof('\"iat\" parameter must be specified');\n    }\n    if (!jwtPayload.nonce || jwtPayload.nonce !== cNonce) {\n      throw new InvalidProof(\n        '\"nonce\" parameter is not specified or is invalid',\n      );\n    }\n    const did = this.clientIdentifier ?? obtainDid(header.kid, jwtPayload.iss);\n    const didResolution = await didResolver.resolve(did);\n    if (didResolution.didResolutionMetadata.error) {\n      throw new InvalidProof(\n        `Did resolution failed. Error ${\n          didResolution.didResolutionMetadata.error\n        }: ${didResolution.didResolutionMetadata.message}`,\n      );\n    }\n    const didDocument = didResolution.didDocument!;\n    let publicKeyJwk;\n    try {\n      publicKeyJwk = getAuthentificationJWKKeys(didDocument, header.kid);\n    } catch (error: any) {\n      throw new InvalidProof(error.message);\n    }\n    const publicKey = await importJWK(publicKeyJwk);\n    await jwtVerify(this.jwt, publicKey, {clockTolerance: 5});\n  }\n}\n"]}