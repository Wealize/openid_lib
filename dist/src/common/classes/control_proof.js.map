{"version":3,"file":"control_proof.js","sourceRoot":"","sources":["../../../../src/common/classes/control_proof.ts"],"names":[],"mappings":";;;;;;;;;AAEA,OAAO,EAAE,0BAA0B,EAAE,MAAM,0BAA0B,CAAC;AACtE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAE/D,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,MAAM,CAAC;AAE5C,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAEhD;;GAEG;AACH,MAAM,OAAgB,YAAY;IAEhC,YAA6B,MAAwB;QAAxB,WAAM,GAAN,MAAM,CAAkB;IAAI,CAAC;IA6B1D;;;;;OAKG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAyB;QACvC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;YACrB,MAAM,IAAI,YAAY,CAAC,uDAAuD,CAAC,CAAC;QAClF,CAAC;QACD,IAAI,IAAI,CAAC,UAAU,KAAK,KAAK,EAAE,CAAC;YAC9B,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;gBACd,MAAM,IAAI,YAAY,CAAC,+CAA+C,CAAC,CAAC;YAC1E,CAAC;YACD,OAAO,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACzC,CAAC;aAAM,CAAC;YACN,MAAM,IAAI,YAAY,CAAC,0BAA0B,CAAC,CAAC;QACrD,CAAC;IACH,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,QAAQ,CAAC,GAAW;QACzB,OAAO,IAAI,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;IACzC,CAAC;CACF;AAED,MAAM,eAAgB,SAAQ,YAAY;IAGxC,YAAY,MAAwB,EAAU,GAAW;QACvD,KAAK,CAAC,MAAM,CAAC,CAAC;QAD8B,QAAG,GAAH,GAAG,CAAQ;IAEzD,CAAC;IAED,MAAM;QACJ,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,MAAM;YACnB,GAAG,EAAE,IAAI,CAAC,GAAG;SACd,CAAA;IACH,CAAC;IAED,uBAAuB;QACrB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC3B,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,MAAM,IAAI,YAAY,CAAC,mCAAmC,CAAC,CAAC;YAC9D,CAAC;YACD,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,EAAG,OAAsB,CAAC,GAAG,CAAC,CAAC;QAC7E,CAAC;QACD,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAED,aAAa;QACX,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC1C,MAAM,UAAU,GAAG,OAAqB,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;YACtB,MAAM,IAAI,YAAY,CAAC,oCAAoC,CAAC,CAAC;QAC/D,CAAC;QACD,OAAO,UAAU,CAAC,KAAK,CAAA;IACzB,CAAC;IAEK,WAAW,CACf,MAAc,EACd,QAAgB,EAChB,WAAuB;;;YAEvB,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClD,MAAM,UAAU,GAAG,OAAqB,CAAC;YACzC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,KAAK,sBAAsB,EAAE,CAAC;gBACzD,MAAM,IAAI,YAAY,CAAC,yCAAyC,CAAC,CAAC;YACpE,CAAC;YACD,IAAI,MAAM,CAAC,GAAe,KAAK,MAAM,EAAE,CAAC;gBACtC,MAAM,IAAI,YAAY,CAAC,4CAA4C,CAAC,CAAC;YACvE,CAAC;YACD,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;gBAChB,MAAM,IAAI,YAAY,CAAC,mCAAmC,CAAC,CAAC;YAC9D,CAAC;YACD,IAAI,CAAC,UAAU,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,KAAK,QAAQ,EAAE,CAAC;gBACnD,MAAM,IAAI,YAAY,CAAC,gDAAgD,CAAC,CAAC;YAC3E,CAAC;YACD,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;gBACpB,MAAM,IAAI,YAAY,CAAC,mCAAmC,CAAC,CAAC;YAC9D,CAAC;YACD,IAAI,CAAC,UAAU,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,KAAK,MAAM,EAAE,CAAC;gBACrD,MAAM,IAAI,YAAY,CAAC,kDAAkD,CAAC,CAAC;YAC7E,CAAC;YACD,MAAM,GAAG,GAAG,MAAA,IAAI,CAAC,gBAAgB,mCAAI,SAAS,CAAC,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;YAC3E,MAAM,aAAa,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACrD,IAAI,aAAa,CAAC,qBAAqB,CAAC,KAAK,EAAE,CAAC;gBAC9C,MAAM,IAAI,YAAY,CAAC,gCAAgC,aAAa,CAAC,qBAAqB,CAAC,KACzF,KAAK,aAAa,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC,CAAC;YACxD,CAAC;YACD,MAAM,WAAW,GAAG,aAAa,CAAC,WAAY,CAAC;YAC/C,IAAI,YAAY,CAAC;YACjB,IAAI,CAAC;gBACH,YAAY,GAAG,0BAA0B,CAAC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC;YACrE,CAAC;YAAC,OAAO,KAAU,EAAE,CAAC;gBACpB,MAAM,IAAI,YAAY,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACxC,CAAC;YACD,MAAM,SAAS,GAAG,MAAM,SAAS,CAAC,YAAY,CAAC,CAAC;YAChD,MAAM,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC,CAAC;;KAC7D;CAEF","sourcesContent":["import { JWA_ALGS } from \"../constants/index.js\";\nimport { ControlProofType } from \"../types/index.js\";\nimport { getAuthentificationJWKKeys } from \"../utils/did_document.js\";\nimport { decodeToken, obtainDid } from \"../utils/jwt.utils.js\";\nimport { Resolvable } from \"did-resolver\";\nimport { importJWK, jwtVerify } from \"jose\";\nimport { JwtPayload } from \"jsonwebtoken\";\nimport { InvalidProof } from \"./error/index.js\";\n\n/**\n * Class defining the proof of possession of a key material.\n */\nexport abstract class ControlProof {\n\n  protected constructor(public format: ControlProofType) { }\n\n  /**\n   * Allows to obtain the DID of the user that generated the proof\n   */\n  abstract getAssociatedIdentifier(): string;\n\n  /**\n   * Allows to obtain the nonce included in the proof\n   */\n  abstract getInnerNonce(): string;\n\n  /**\n   * Express the proof as a object that contains only the attributes\n   */\n  abstract toJSON(): Record<string, string>;\n  /**\n   * Allows to verify a proof\n   * @param cNonce Challenge nonce that should contain the proof\n   * @param audience Expected audicente of the proof\n   * @param didResolver Object that allows to resolve the DIDs found in the proof\n   * @throws if the proof is invalid for any reason\n   */\n  abstract verifyProof(\n    cNonce: string,\n    audience: string,\n    didResolver: Resolvable\n  ): Promise<void>;\n\n  /**\n   * Allows to generate an instance of this class from a generic object\n   * @param data The object from which generate the proof\n   * @returns An object of this class\n   * @throws if the object provided is not a valid proof\n   */\n  static fromJSON(data: Record<string, any>): ControlProof {\n    if (!data.proof_type) {\n      throw new InvalidProof(`The \"format\" parameter is required in a control proof`);\n    }\n    if (data.proof_type === \"jwt\") {\n      if (!data.jwt) {\n        throw new InvalidProof(`Proof of format \"jwt\" needs a \"jwt\" paramater`);\n      }\n      return ControlProof.jwtProof(data.jwt);\n    } else {\n      throw new InvalidProof(\"Invalid format specified\");\n    }\n  }\n\n  /**\n   * Allows to generate a proof in JWT format\n   * @param jwt The JWT proof\n   * @returns A JWT control proof\n   */\n  static jwtProof(jwt: string): JwtControlProof {\n    return new JwtControlProof(\"jwt\", jwt);\n  }\n}\n\nclass JwtControlProof extends ControlProof {\n  private clientIdentifier?: string;\n\n  constructor(format: ControlProofType, private jwt: string) {\n    super(format);\n  }\n\n  toJSON(): Record<string, string> {\n    return {\n      format: this.format,\n      jwt: this.jwt\n    }\n  }\n\n  getAssociatedIdentifier(): string {\n    if (!this.clientIdentifier) {\n      const { header, payload } = decodeToken(this.jwt);\n      if (!header.kid) {\n        throw new InvalidProof(`\"kid\" parameter must be specified`);\n      }\n      this.clientIdentifier = obtainDid(header.kid, (payload as JwtPayload).iss);\n    }\n    return this.clientIdentifier;\n  }\n\n  getInnerNonce(): string {\n    const { payload } = decodeToken(this.jwt);\n    const jwtPayload = payload as JwtPayload;\n    if (!jwtPayload.nonce) {\n      throw new InvalidProof(`\"nonce\" parameter is not specified`);\n    }\n    return jwtPayload.nonce\n  }\n\n  async verifyProof(\n    cNonce: string,\n    audience: string,\n    didResolver: Resolvable\n  ): Promise<void> {\n    const { header, payload } = decodeToken(this.jwt);\n    const jwtPayload = payload as JwtPayload;\n    if (!header.typ || header.typ !== \"openid4vci-proof+jwt\") {\n      throw new InvalidProof(`Invalid \"typ\" paramater in proof header`);\n    }\n    if (header.alg as JWA_ALGS === \"none\") {\n      throw new InvalidProof(`The value of \"alg\" parameter can't be none`);\n    }\n    if (!header.kid) {\n      throw new InvalidProof(`\"kid\" parameter must be specified`);\n    }\n    if (!jwtPayload.aud || jwtPayload.aud !== audience) {\n      throw new InvalidProof(`\"aud\" parameter is not specified or is invalid`);\n    }\n    if (!jwtPayload.iat) {\n      throw new InvalidProof(`\"iat\" parameter must be specified`);\n    }\n    if (!jwtPayload.nonce || jwtPayload.nonce !== cNonce) {\n      throw new InvalidProof(`\"nonce\" parameter is not specified or is invalid`);\n    }\n    const did = this.clientIdentifier ?? obtainDid(header.kid, jwtPayload.iss);\n    const didResolution = await didResolver.resolve(did);\n    if (didResolution.didResolutionMetadata.error) {\n      throw new InvalidProof(`Did resolution failed. Error ${didResolution.didResolutionMetadata.error\n        }: ${didResolution.didResolutionMetadata.message}`);\n    }\n    const didDocument = didResolution.didDocument!;\n    let publicKeyJwk;\n    try {\n      publicKeyJwk = getAuthentificationJWKKeys(didDocument, header.kid);\n    } catch (error: any) {\n      throw new InvalidProof(error.message);\n    }\n    const publicKey = await importJWK(publicKeyJwk);\n    await jwtVerify(this.jwt, publicKey, { clockTolerance: 5 });\n  }\n\n}\n"]}