{"version":3,"file":"id_token_request.js","sourceRoot":"","sources":["../../../../src/common/classes/id_token_request.ts"],"names":[],"mappings":"AAEA;;GAEG;AACH,MAAM,OAAO,cAAc;IAQhB;IACA;IACC;IATV;;;;;OAKG;IACH,YACS,aAAmC,EACnC,OAAe,EACd,2BAAmC;QAFpC,kBAAa,GAAb,aAAa,CAAsB;QACnC,YAAO,GAAP,OAAO,CAAQ;QACd,gCAA2B,GAA3B,2BAA2B,CAAQ;IAC1C,CAAC;IAEJ;;;OAGG;IACH,KAAK;QACH,OAAO,GAAG,IAAI,CAAC,2BAA2B,IAAI,IAAI,eAAe,CAC/D,MAAM,CAAC,OAAO,CAAC;YACb,GAAG,IAAI,CAAC,aAAa;YACrB,OAAO,EAAE,IAAI,CAAC,OAAO;SACtB,CAAC,CACH,CAAC,QAAQ,EAAE,EAAE,CAAC;IACjB,CAAC;CACF","sourcesContent":["import {AuthzResponseMode} from '../formats/index.js';\n\n/**\n * Define an authorisation request that expects an ID token as \"response_type\"\n */\nexport class IdTokenRequest {\n  /**\n   * Constructor of the class\n   * @param requestParams ID Token request parameters\n   * @param request The request as a JWT\n   * @param clientAuthorizationEndpoint\n   */\n  constructor(\n    public requestParams: IdTokenRequestParams,\n    public request: string,\n    private clientAuthorizationEndpoint: string,\n  ) {}\n\n  /**\n   * Encode the request in URL format\n   * @returns The request in URL format\n   */\n  toUri(): string {\n    return `${this.clientAuthorizationEndpoint}?${new URLSearchParams(\n      Object.entries({\n        ...this.requestParams,\n        request: this.request,\n      }),\n    ).toString()}`;\n  }\n}\n\n/**\n * Parameters of a ID Token Request\n */\nexport interface IdTokenRequestParams {\n  response_type: 'id_token';\n  client_id: string;\n  scope: string;\n  redirect_uri: string;\n  response_mode?: AuthzResponseMode;\n  state?: string;\n  nonce?: string;\n}\n"]}