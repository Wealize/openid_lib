{"version":3,"file":"authz_response.js","sourceRoot":"","sources":["../../../../src/common/classes/authz_response.ts"],"names":[],"mappings":"AAAA;;GAEG;AACH,MAAM,OAAO,qBAAqB;IAQvB;IACA;IACA;IATT;;;;;OAKG;IACH,YACS,GAAW,EACX,IAAY,EACZ,KAAc;QAFd,QAAG,GAAH,GAAG,CAAQ;QACX,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAS;IACpB,CAAC;IAEJ;;;OAGG;IACH,KAAK;QACH,MAAM,MAAM,GAA2B,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC;QACzD,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC;YACf,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,CAAC;QACD,OAAO,GAAG,IAAI,CAAC,GAAG,IAAI,IAAI,eAAe,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC;IACjF,CAAC;CACF","sourcesContent":["/**\n * Represents an authorization response for the \"code\" response type\n */\nexport class AuthorizationResponse {\n  /**\n   * Contructor of this class\n   * @param uri The URI to which this response should be delivered\n   * @param code The authorization code to include\n   * @param state The state sent by the client in the original Authz request\n   */\n  constructor(\n    public uri: string,\n    public code: string,\n    public state?: string,\n  ) {}\n\n  /**\n   * Allows to express the response in URL format\n   * @returns String with response in URL format\n   */\n  toUri(): string {\n    const params: Record<string, string> = {code: this.code};\n    if (this.state) {\n      params.state = this.state;\n    }\n    return `${this.uri}?${new URLSearchParams(Object.entries(params)).toString()}`;\n  }\n}\n"]}