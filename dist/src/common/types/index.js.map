{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/common/types/index.ts"],"names":[],"mappings":"","sourcesContent":["import {JWA_ALGS} from '../constants/index.js';\nimport {\n  W3CVerifiableCredentialFormats,\n  W3CVerifiablePresentationFormats,\n} from '../formats/index.js';\n\n// RFC 6749 Section 3.1.1\n// OAuth 2.0 Multiple Response Type Encoding Practices Section 3\n// OID4VP Section 5.4\n// TODO: Maybe we should not give support for the \"token\" response type\n/**\n * Valid response types for an authorisation response\n */\nexport type AuthzResponseType = 'code' | 'token' | 'id_token' | 'vp_token';\n/**\n * Valid grant types for a token request\n */\nexport type GrantType =\n  | 'authorization_code'\n  | 'urn:ietf:params:oauth:grant-type:pre-authorized_code'\n  | 'vp_token';\n/**\n * Valid control proof types\n */\nexport type ControlProofType = 'jwt';\n/**\n * Supported formats for a VP\n */\nexport type VpFormatsSupported = {\n  [key in W3CVerifiableCredentialFormats | W3CVerifiablePresentationFormats]?: {\n    alg_values_supported: JWA_ALGS[];\n  };\n};\n/**\n * Compact VC representation\n */\nexport type CompactVc = string;\n/**\n * The result of a verification process, with an optional error message\n */\nexport type VerificationResult = {valid: boolean; error?: string}; // TODO: Replace this by a Result object instead\n"]}